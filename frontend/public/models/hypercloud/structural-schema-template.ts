import { Map as ImmutableMap } from 'immutable';

import { GroupVersionKind, referenceForModel } from '../../module/k8s';
import * as k8sModels from '../../models';
/**
 * Sample YAML manifests for some of the statically-defined Kubernetes models.
 */
export const baseTemplates = ImmutableMap<GroupVersionKind, ImmutableMap<string, string>>()
  .setIn(
    ['DEFAULT', 'default'],
    `
apiVersion: ''
kind: ''
metadata:
  name: example
`,
  )
  .setIn([referenceForModel(k8sModels.CustomResourceDefinitionModel), 'default'], {
    properties: {
      CustomResourceDefinitionSpec: {
        description: 'CustomResourceDefinitionSpec describes how a user wants their resource to appear',
        properties: {
          conversion: {
            // $ref: '#/definitions/blabla',
            description: 'conversion defines conversion settings for the CRD.',
          },
          group: {
            description: 'group is the API group of the defined custom resource. The custom resources are served under `/apis/<group>/...`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`).',
            type: ['string', 'null'],
          },
          names: {
            //"$ref": "https://kubernetesjsonschema.dev/v1.18.1/_definitions.json#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionNames",
            description: 'names specify the resource and kind names for the custom resource.',
          },
          preserveUnknownFields: {
            description:
              'preserveUnknownFields indicates that object fields which are not specified in the OpenAPI schema should be preserved when persisting to storage. apiVersion, kind, metadata and known fields inside metadata are always preserved. This field is deprecated in favor of setting `x-preserve-unknown-fields` to true in `spec.versions[*].schema.openAPIV3Schema`. See https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/#pruning-versus-preserving-unknown-fields for details.',
            type: ['boolean', 'null'],
          },
          scope: {
            description: 'scope indicates whether the defined custom resource is cluster- or namespace-scoped. Allowed values are `Cluster` and `Namespaced`.',
            type: ['string', 'null'],
          },
          versions: {
            description:
              'versions is the list of all API versions of the defined custom resource. Version names are used to compute the order in which served versions are listed in API discovery. If the version string is "kube-like", it will sort above non "kube-like" version strings, which are ordered lexicographically. "Kube-like" versions start with a "v", then are followed by a number (the major version), then optionally the string "alpha" or "beta" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.',
            items: {
              //"$ref": "https://kubernetesjsonschema.dev/v1.18.1/_definitions.json#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionVersion"
            },
            type: ['array', 'null'],
          },
        },
        required: ['group', 'names', 'scope', 'versions'],
        type: 'object',
        $schema: 'http://json-schema.org/schema#',
      },
      CustomResourceConversion: {
        description: 'CustomResourceConversion describes how to convert different versions of a CR.',
        properties: {
          strategy: {
            description: 'strategy specifies how custom resources are converted between versions. Allowed values are: - `None`: The converter only change the apiVersion and would not touch any other field in the custom resource. - `Webhook`: API Server will call to an external webhook to do the conversion. Additional information\n  is needed for this option. This requires spec.preserveUnknownFields to be false, and spec.conversion.webhook to be set.',
            type: ['string', 'null'],
          },
          webhook: {
            description: 'WebhookConversion describes how to call a conversion webhook',
            properties: {
              clientConfig: {
                description: 'WebhookClientConfig contains the information to make a TLS connection with the webhook.',
                properties: {
                  caBundle: {
                    description: "caBundle is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.",
                    format: 'byte',
                    type: ['string', 'null'],
                  },
                  service: {
                    description: 'ServiceReference holds a reference to Service.legacy.k8s.io',
                    properties: {
                      name: {
                        description: 'name is the name of the service. Required',
                        type: 'string',
                      },
                      namespace: {
                        description: 'namespace is the namespace of the service. Required',
                        type: 'string',
                      },
                      path: {
                        description: 'path is an optional URL path at which the webhook will be contacted.',
                        type: ['string', 'null'],
                      },
                      port: {
                        description: 'port is an optional service port at which the webhook will be contacted. `port` should be a valid port number (1-65535, inclusive). Defaults to 443 for backward compatibility.',
                        format: 'int32',
                        type: ['integer', 'null'],
                      },
                    },
                    required: ['namespace', 'name'],
                    type: ['object', 'null'],
                  },
                  url: {
                    description:
                      'url gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.\n\nThe `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.\n\nPlease note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.\n\nThe scheme must be "https"; the URL must begin with "https://".\n\nA path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.\n\nAttempting to use a user or basic auth e.g. "user:password@" is not allowed. Fragments ("#...") and query parameters ("?...") are not allowed, either.',
                    type: ['string', 'null'],
                  },
                },
                type: ['object', 'null'],
              },
              conversionReviewVersions: {
                description: 'conversionReviewVersions is an ordered list of preferred `ConversionReview` versions the Webhook expects. The API server will use the first version in the list which it supports. If none of the versions specified in this list are supported by API server, conversion will fail for the custom resource. If a persisted Webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail.',
                items: {
                  type: ['string', 'null'],
                },
                type: 'array',
              },
            },
            required: ['conversionReviewVersions'],
            type: ['object', 'null'],
          },
        },
        required: ['strategy'],
        type: 'object',
        $schema: 'http://json-schema.org/schema#',
      },
      CustomResourceDefinitionNames: {
        description: 'CustomResourceDefinitionNames indicates the names to serve this CustomResourceDefinition',
        properties: {
          categories: {
            description: "categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`.",
            items: {
              type: ['string', 'null'],
            },
            type: ['array', 'null'],
          },
          kind: {
            description: 'kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the `kind` attribute in API calls.',
            type: ['string', 'null'],
          },
          listKind: {
            description: 'listKind is the serialized kind of the list for this resource. Defaults to "`kind`List".',
            type: ['string', 'null'],
          },
          plural: {
            description: 'plural is the plural name of the resource to serve. The custom resources are served under `/apis/<group>/<version>/.../<plural>`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`). Must be all lowercase.',
            type: ['string', 'null'],
          },
          shortNames: {
            description: 'shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like `kubectl get <shortname>`. It must be all lowercase.',
            items: {
              type: ['string', 'null'],
            },
            type: ['array', 'null'],
          },
          singular: {
            description: 'singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased `kind`.',
            type: ['string', 'null'],
          },
        },
        required: ['plural', 'kind'],
        type: 'object',
        $schema: 'http://json-schema.org/schema#',
      },
      CustomResourceDefinitionVersion: {
        description: 'CustomResourceDefinitionVersion describes a version for CRD.',
        properties: {
          additionalPrinterColumns: {
            description: 'additionalPrinterColumns specifies additional columns returned in Table output. See https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables for details. If no columns are specified, a single column displaying the age of the custom resource is used.',
            items: {
              //"$ref": "https://kubernetesjsonschema.dev/v1.18.1/_definitions.json#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceColumnDefinition"
            },
            type: ['array', 'null'],
          },
          name: {
            description: 'name is the version name, e.g. \u201cv1\u201d, \u201cv2beta1\u201d, etc. The custom resources are served under this version at `/apis/<group>/<version>/...` if `served` is true.',
            type: ['string', 'null'],
          },
          schema: {
            //"$ref": "https://kubernetesjsonschema.dev/v1.18.1/_definitions.json#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceValidation",
            description: 'schema describes the schema used for validation, pruning, and defaulting of this version of the custom resource.',
          },
          served: {
            description: 'served is a flag enabling/disabling this version from being served via REST APIs',
            type: ['boolean', 'null'],
          },
          storage: {
            description: 'storage indicates this version should be used when persisting custom resources to storage. There must be exactly one version with storage=true.',
            type: ['boolean', 'null'],
          },
          subresources: {
            //"$ref": "https://kubernetesjsonschema.dev/v1.18.1/_definitions.json#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresources",
            description: 'subresources specify what subresources this version of the defined custom resource have.',
          },
        },
        required: ['name', 'served', 'storage'],
        type: 'object',
        $schema: 'http://json-schema.org/schema#',
      },
    },
    type: 'object',
  })
  .setIn([referenceForModel(k8sModels.PodSecurityPolicyModel), 'default'], {
    description: 'PodSecurityPolicy governs the ability to make requests that affect the Security Context that will be applied to a pod and container.',
    properties: {
      apiVersion: {
        description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
        type: ['string', 'null'],
      },
      kind: {
        description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
        type: ['string', 'null'],
        enum: ['PodSecurityPolicy'],
      },
      metadata: {
        description: 'ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.',
        properties: {
          annotations: {
            additionalProperties: {
              type: ['string', 'null'],
            },
            description: 'Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations',
            type: ['object', 'null'],
          },
          clusterName: {
            description: 'The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.',
            type: ['string', 'null'],
          },
          creationTimestamp: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            format: 'date-time',
            type: ['string', 'null'],
          },
          deletionGracePeriodSeconds: {
            description: 'Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.',
            format: 'int64',
            type: ['integer', 'null'],
          },
          deletionTimestamp: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            format: 'date-time',
            type: ['string', 'null'],
          },
          finalizers: {
            description:
              'Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.',
            items: {
              type: ['string', 'null'],
            },
            type: ['array', 'null'],
            'x-kubernetes-patch-strategy': 'merge',
          },
          generateName: {
            description:
              'GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency',
            type: ['string', 'null'],
          },
          generation: {
            description: 'A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.',
            format: 'int64',
            type: ['integer', 'null'],
          },
          labels: {
            additionalProperties: {
              type: ['string', 'null'],
            },
            description: 'Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels',
            type: ['object', 'null'],
          },
          managedFields: {
            description: "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
            items: {
              description: 'ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.',
              properties: {
                apiVersion: {
                  description: 'APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.',
                  type: ['string', 'null'],
                },
                fieldsType: {
                  description: 'FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"',
                  type: ['string', 'null'],
                },
                fieldsV1: {
                  description:
                    "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
                  type: ['object', 'null'],
                },
                manager: {
                  description: 'Manager is an identifier of the workflow managing these fields.',
                  type: ['string', 'null'],
                },
                operation: {
                  description: "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
                  type: ['string', 'null'],
                },
                time: {
                  description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                  format: 'date-time',
                  type: ['string', 'null'],
                },
              },
              type: ['object', 'null'],
            },
            type: ['array', 'null'],
          },
          name: {
            description: 'Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
            type: ['string', 'null'],
          },
          namespace: {
            description: 'Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces',
            type: ['string', 'null'],
          },
          ownerReferences: {
            description: 'List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.',
            items: {
              description: 'OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.',
              properties: {
                apiVersion: {
                  description: 'API version of the referent.',
                  type: 'string',
                },
                blockOwnerDeletion: {
                  description: 'If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.',
                  type: ['boolean', 'null'],
                },
                controller: {
                  description: 'If true, this reference points to the managing controller.',
                  type: ['boolean', 'null'],
                },
                kind: {
                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
                  type: 'string',
                },
                name: {
                  description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
                  type: 'string',
                },
                uid: {
                  description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                  type: 'string',
                },
              },
              required: ['apiVersion', 'kind', 'name', 'uid'],
              type: ['object', 'null'],
            },
            type: ['array', 'null'],
            'x-kubernetes-patch-merge-key': 'uid',
            'x-kubernetes-patch-strategy': 'merge',
          },
          resourceVersion: {
            description:
              'An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency',
            type: ['string', 'null'],
          },
          selfLink: {
            description: 'SelfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.',
            type: ['string', 'null'],
          },
          uid: {
            description: 'UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
            type: ['string', 'null'],
          },
        },
        type: ['object', 'null'],
      },
      spec: {
        description: 'PodSecurityPolicySpec defines the policy enforced.',
        properties: {
          allowPrivilegeEscalation: {
            description: 'allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to true.',
            type: ['boolean', 'null'],
          },
          allowedCSIDrivers: {
            description: 'AllowedCSIDrivers is a whitelist of inline CSI drivers that must be explicitly set to be embedded within a pod spec. An empty value indicates that any CSI driver can be used for inline ephemeral volumes. This is an alpha field, and is only honored if the API server enables the CSIInlineVolume feature gate.',
            items: {
              description: 'AllowedCSIDriver represents a single inline CSI Driver that is allowed to be used.',
              properties: {
                name: {
                  description: 'Name is the registered name of the CSI driver',
                  type: 'string',
                },
              },
              required: ['name'],
              type: ['object', 'null'],
            },
            type: ['array', 'null'],
          },
          allowedCapabilities: {
            description: "allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author's discretion. You must not list a capability in both allowedCapabilities and requiredDropCapabilities.",
            items: {
              type: ['string', 'null'],
            },
            type: ['array', 'null'],
          },
          allowedFlexVolumes: {
            description: 'allowedFlexVolumes is a whitelist of allowed Flexvolumes.  Empty or nil indicates that all Flexvolumes may be used.  This parameter is effective only when the usage of the Flexvolumes is allowed in the "volumes" field.',
            items: {
              description: 'AllowedFlexVolume represents a single Flexvolume that is allowed to be used.',
              properties: {
                driver: {
                  description: 'driver is the name of the Flexvolume driver.',
                  type: 'string',
                },
              },
              required: ['driver'],
              type: ['object', 'null'],
            },
            type: ['array', 'null'],
          },
          allowedHostPaths: {
            description: 'allowedHostPaths is a white list of allowed host paths. Empty indicates that all host paths may be used.',
            items: {
              description: 'AllowedHostPath defines the host volume conditions that will be enabled by a policy for pods to use. It requires the path prefix to be defined.',
              properties: {
                pathPrefix: {
                  description: 'pathPrefix is the path prefix that the host volume must match. It does not support `*`. Trailing slashes are trimmed when validating the path prefix with a host path.\n\nExamples: `/foo` would allow `/foo`, `/foo/` and `/foo/bar` `/foo` would not allow `/food` or `/etc/foo`',
                  type: ['string', 'null'],
                },
                readOnly: {
                  description: 'when set to true, will allow host volumes matching the pathPrefix only if all volume mounts are readOnly.',
                  type: ['boolean', 'null'],
                },
              },
              type: ['object', 'null'],
            },
            type: ['array', 'null'],
          },
          allowedProcMountTypes: {
            description: 'AllowedProcMountTypes is a whitelist of allowed ProcMountTypes. Empty or nil indicates that only the DefaultProcMountType may be used. This requires the ProcMountType feature flag to be enabled.',
            items: {
              type: ['string', 'null'],
            },
            type: ['array', 'null'],
          },
          allowedUnsafeSysctls: {
            description: 'allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe sysctls are allowed. Kubelet has to whitelist all allowed unsafe sysctls explicitly to avoid rejection.\n\nExamples: e.g. "foo/*" allows "foo/bar", "foo/baz", etc. e.g. "foo.*" allows "foo.bar", "foo.baz", etc.',
            items: {
              type: ['string', 'null'],
            },
            type: ['array', 'null'],
          },
          defaultAddCapabilities: {
            description: 'defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capability in both defaultAddCapabilities and requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the allowedCapabilities list.',
            items: {
              type: ['string', 'null'],
            },
            type: ['array', 'null'],
          },
          defaultAllowPrivilegeEscalation: {
            description: 'defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its parent process.',
            type: ['boolean', 'null'],
          },
          forbiddenSysctls: {
            description: 'forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are forbidden.\n\nExamples: e.g. "foo/*" forbids "foo/bar", "foo/baz", etc. e.g. "foo.*" forbids "foo.bar", "foo.baz", etc.',
            items: {
              type: ['string', 'null'],
            },
            type: ['array', 'null'],
          },
          fsGroup: {
            description: 'FSGroupStrategyOptions defines the strategy type and options used to create the strategy.',
            properties: {
              rule: {
                description: 'rule is the strategy that will dictate what FSGroup is used in the SecurityContext.',
                type: ['string', 'null'],
              },
              ranges: {
                description: 'ranges are the allowed ranges of fs groups.  If you would like to force a single fs group then supply a single range with the same start and end. Required for MustRunAs.',
                items: {
                  description: 'IDRange provides a min/max of an allowed range of IDs.',
                  properties: {
                    max: {
                      description: 'max is the end of the range, inclusive.',
                      format: 'int64',
                      type: 'integer',
                    },
                    min: {
                      description: 'min is the start of the range, inclusive.',
                      format: 'int64',
                      type: 'integer',
                    },
                  },
                  required: ['min', 'max'],
                  type: ['object', 'null'],
                },
                type: ['array', 'null'],
              },
            },
            required: ['rule'],
            type: 'object',
          },
          hostIPC: {
            description: 'hostIPC determines if the policy allows the use of HostIPC in the pod spec.',
            type: ['boolean', 'null'],
          },
          hostNetwork: {
            description: 'hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.',
            type: ['boolean', 'null'],
          },
          hostPID: {
            description: 'hostPID determines if the policy allows the use of HostPID in the pod spec.',
            type: ['boolean', 'null'],
          },
          hostPorts: {
            description: 'hostPorts determines which host port ranges are allowed to be exposed.',
            items: {
              description: 'HostPortRange defines a range of host ports that will be enabled by a policy for pods to use.  It requires both the start and end to be defined.',
              properties: {
                max: {
                  description: 'max is the end of the range, inclusive.',
                  format: 'int32',
                  type: 'integer',
                },
                min: {
                  description: 'min is the start of the range, inclusive.',
                  format: 'int32',
                  type: 'integer',
                },
              },
              required: ['min', 'max'],
              type: ['object', 'null'],
            },
            type: ['array', 'null'],
          },
          privileged: {
            description: 'privileged determines if a pod can request to be run as privileged.',
            type: ['boolean', 'null'],
          },
          readOnlyRootFilesystem: {
            description: 'readOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.',
            type: ['boolean', 'null'],
          },
          requiredDropCapabilities: {
            description: 'requiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.',
            items: {
              type: ['string', 'null'],
            },
            type: ['array', 'null'],
          },
          runAsGroup: {
            description: 'RunAsGroupStrategyOptions defines the strategy type and any options used to create the strategy.',
            properties: {
              rule: {
                description: 'rule is the strategy that will dictate the allowable RunAsGroup values that may be set.',
                type: 'string',
                enum: ['MustRunAs', 'MayRunAs', 'RunAsAny'],
                enumNames: ['MustRunAs', 'MayRunAs', 'RunAsAny'],
              },
              ranges: {
                description: 'ranges are the allowed ranges of gids that may be used. If you would like to force a single gid then supply a single range with the same start and end. Required for MustRunAs.',
                items: {
                  description: 'IDRange provides a min/max of an allowed range of IDs.',
                  properties: {
                    max: {
                      description: 'max is the end of the range, inclusive.',
                      format: 'int64',
                      type: 'integer',
                    },
                    min: {
                      description: 'min is the start of the range, inclusive.',
                      format: 'int64',
                      type: 'integer',
                    },
                  },
                  required: ['min', 'max'],
                  type: ['object', 'null'],
                },
                type: ['array', 'null'],
              },
            },
            type: ['object', 'null'],
          },
          runAsUser: {
            description: 'RunAsUserStrategyOptions defines the strategy type and any options used to create the strategy.',
            properties: {
              rule: {
                description: 'rule is the strategy that will dictate the allowable RunAsUser values that may be set.',
                type: 'string',
                enum: ['MustRunAs', 'MustRunAsNonRoot', 'RunAsAny'],
                enumNames: ['MustRunAs', 'MustRunAsNonRoot', 'RunAsAny'],
              },
              ranges: {
                description: 'ranges are the allowed ranges of uids that may be used. If you would like to force a single uid then supply a single range with the same start and end. Required for MustRunAs.',
                items: {
                  description: 'IDRange provides a min/max of an allowed range of IDs.',
                  properties: {
                    max: {
                      description: 'max is the end of the range, inclusive.',
                      format: 'int64',
                      type: 'integer',
                    },
                    min: {
                      description: 'min is the start of the range, inclusive.',
                      format: 'int64',
                      type: 'integer',
                    },
                  },
                  required: ['min', 'max'],
                  type: ['object', 'null'],
                },
                type: ['array', 'null'],
              },
            },
            required: ['rule'],
            type: 'object',
          },
          runtimeClass: {
            description: 'RuntimeClassStrategyOptions define the strategy that will dictate the allowable RuntimeClasses for a pod.',
            properties: {
              allowedRuntimeClassNames: {
                description: 'allowedRuntimeClassNames is a whitelist of RuntimeClass names that may be specified on a pod. A value of "*" means that any RuntimeClass name is allowed, and must be the only item in the list. An empty list requires the RuntimeClassName field to be unset.',
                items: {
                  type: ['string', 'null'],
                },
                type: 'array',
              },
              defaultRuntimeClassName: {
                description: 'defaultRuntimeClassName is the default RuntimeClassName to set on the pod. The default MUST be allowed by the allowedRuntimeClassNames list. A value of nil does not mutate the Pod.',
                type: ['string', 'null'],
              },
            },
            required: ['allowedRuntimeClassNames'],
            type: ['object', 'null'],
          },
          seLinux: {
            description: 'SELinuxStrategyOptions defines the strategy type and any options used to create the strategy.',
            properties: {
              rule: {
                description: 'rule is the strategy that will dictate the allowable labels that may be set.',
                type: 'string',
                enum: ['MustRunAs', 'RunAsAny'],
                enumNames: ['MustRunAs', 'RunAsAny'],
              },
              seLinuxOptions: {
                description: 'SELinuxOptions are the labels to be applied to the container',
                properties: {
                  level: {
                    description: 'Level is SELinux level label that applies to the container.',
                    type: ['string', 'null'],
                  },
                  role: {
                    description: 'Role is a SELinux role label that applies to the container.',
                    type: ['string', 'null'],
                  },
                  type: {
                    description: 'Type is a SELinux type label that applies to the container.',
                    type: ['string', 'null'],
                  },
                  user: {
                    description: 'User is a SELinux user label that applies to the container.',
                    type: ['string', 'null'],
                  },
                },
                type: ['object', 'null'],
              },
            },
            required: ['rule'],
            type: 'object',
          },
          supplementalGroups: {
            description: 'SupplementalGroupsStrategyOptions defines the strategy type and options used to create the strategy.',
            properties: {
              rule: {
                description: 'rule is the strategy that will dictate what supplemental groups is used in the SecurityContext.',
                type: ['string', 'null'],
                enum: ['MustRunAs', 'MayRunAs', 'RunAsAny'],
                enumNames: ['MustRunAs', 'MayRunAs', 'RunAsAny'],
              },
              ranges: {
                description: 'ranges are the allowed ranges of supplemental groups.  If you would like to force a single supplemental group then supply a single range with the same start and end. Required for MustRunAs.',
                items: {
                  description: 'IDRange provides a min/max of an allowed range of IDs.',
                  properties: {
                    max: {
                      description: 'max is the end of the range, inclusive.',
                      format: 'int64',
                      type: 'integer',
                    },
                    min: {
                      description: 'min is the start of the range, inclusive.',
                      format: 'int64',
                      type: 'integer',
                    },
                  },
                  required: ['min', 'max'],
                  type: ['object', 'null'],
                },
                type: ['array', 'null'],
              },
            },
            required: ['rule'],
            type: 'object',
          },
          volumes: {
            description: "volumes is a white list of allowed volume plugins. Empty indicates that no volumes may be used. To allow all volumes you may use '*'.",
            items: {
              type: ['string', 'null'],
            },
            type: ['array', 'null'],
          },
        },
        required: ['seLinux', 'runAsUser', 'supplementalGroups', 'fsGroup'],
        type: ['object', 'null'],
      },
    },
    type: 'object',
    'x-kubernetes-group-version-kind': [
      {
        group: 'policy',
        kind: 'PodSecurityPolicy',
        version: 'v1beta1',
      },
    ],
    $schema: 'http://json-schema.org/schema#',
  })
  .setIn([referenceForModel(k8sModels.ConfigMapModel), 'default'], {
    description: 'ConfigMap holds configuration data for pods to consume.',
    properties: {
      apiVersion: {
        description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
        type: ['string', 'null'],
        enum: ['v1'],
      },
      binaryData: {
        additionalProperties: {
          format: 'byte',
          type: ['string', 'null'],
        },
        description: "BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.",
        type: ['object', 'null'],
      },
      data: {
        additionalProperties: {
          type: ['string', 'null'],
        },
        description: "Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.",
        type: ['object', 'null'],
      },
      immutable: {
        description: 'Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil. This is an alpha field enabled by ImmutableEphemeralVolumes feature gate.',
        type: ['boolean', 'null'],
      },
      kind: {
        description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
        type: ['string', 'null'],
        enum: ['ConfigMap'],
      },
      metadata: {
        description: 'ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.',
        properties: {
          annotations: {
            additionalProperties: {
              type: ['string', 'null'],
            },
            description: 'Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations',
            type: ['object', 'null'],
          },
          clusterName: {
            description: 'The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.',
            type: ['string', 'null'],
          },
          creationTimestamp: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            format: 'date-time',
            type: ['string', 'null'],
          },
          deletionGracePeriodSeconds: {
            description: 'Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.',
            format: 'int64',
            type: ['integer', 'null'],
          },
          deletionTimestamp: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            format: 'date-time',
            type: ['string', 'null'],
          },
          finalizers: {
            description:
              'Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.',
            items: {
              type: ['string', 'null'],
            },
            type: ['array', 'null'],
            'x-kubernetes-patch-strategy': 'merge',
          },
          generateName: {
            description:
              'GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency',
            type: ['string', 'null'],
          },
          generation: {
            description: 'A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.',
            format: 'int64',
            type: ['integer', 'null'],
          },
          labels: {
            additionalProperties: {
              type: ['string', 'null'],
            },
            description: 'Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels',
            type: ['object', 'null'],
          },
          managedFields: {
            description: "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
            items: {
              description: 'ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.',
              properties: {
                apiVersion: {
                  description: 'APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.',
                  type: ['string', 'null'],
                },
                fieldsType: {
                  description: 'FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"',
                  type: ['string', 'null'],
                },
                fieldsV1: {
                  description:
                    "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
                  type: ['object', 'null'],
                },
                manager: {
                  description: 'Manager is an identifier of the workflow managing these fields.',
                  type: ['string', 'null'],
                },
                operation: {
                  description: "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
                  type: ['string', 'null'],
                },
                time: {
                  description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                  format: 'date-time',
                  type: ['string', 'null'],
                },
              },
              type: ['object', 'null'],
            },
            type: ['array', 'null'],
          },
          name: {
            description: 'Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
            type: ['string', 'null'],
          },
          namespace: {
            description: 'Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces',
            type: ['string', 'null'],
          },
          ownerReferences: {
            description: 'List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.',
            items: {
              description: 'OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.',
              properties: {
                apiVersion: {
                  description: 'API version of the referent.',
                  type: 'string',
                },
                blockOwnerDeletion: {
                  description: 'If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.',
                  type: ['boolean', 'null'],
                },
                controller: {
                  description: 'If true, this reference points to the managing controller.',
                  type: ['boolean', 'null'],
                },
                kind: {
                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
                  type: 'string',
                },
                name: {
                  description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
                  type: 'string',
                },
                uid: {
                  description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                  type: 'string',
                },
              },
              required: ['apiVersion', 'kind', 'name', 'uid'],
              type: ['object', 'null'],
            },
            type: ['array', 'null'],
            'x-kubernetes-patch-merge-key': 'uid',
            'x-kubernetes-patch-strategy': 'merge',
          },
          resourceVersion: {
            description:
              'An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency',
            type: ['string', 'null'],
          },
          selfLink: {
            description: 'SelfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.',
            type: ['string', 'null'],
          },
          uid: {
            description: 'UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
            type: ['string', 'null'],
          },
        },
        type: ['object', 'null'],
      },
    },
    type: 'object',
    'x-kubernetes-group-version-kind': [
      {
        group: '',
        kind: 'ConfigMap',
        version: 'v1',
      },
    ],
    $schema: 'http://json-schema.org/schema#',
  })
  .setIn([referenceForModel(k8sModels.ServiceAccountModel), 'default'], {
    description: 'ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets',
    properties: {
      apiVersion: {
        description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
        type: ['string', 'null'],
        enum: ['v1'],
      },
      automountServiceAccountToken: {
        description: 'AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.',
        type: ['boolean', 'null'],
      },
      imagePullSecrets: {
        description: 'ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod',
        items: {
          description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
          properties: {
            name: {
              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
              type: ['string', 'null'],
            },
          },
          type: ['object', 'null'],
        },
        type: ['array', 'null'],
      },
      kind: {
        description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
        type: ['string', 'null'],
        enum: ['ServiceAccount'],
      },
      metadata: {
        description: 'ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.',
        properties: {
          annotations: {
            additionalProperties: {
              type: ['string', 'null'],
            },
            description: 'Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations',
            type: ['object', 'null'],
          },
          clusterName: {
            description: 'The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.',
            type: ['string', 'null'],
          },
          creationTimestamp: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            format: 'date-time',
            type: ['string', 'null'],
          },
          deletionGracePeriodSeconds: {
            description: 'Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.',
            format: 'int64',
            type: ['integer', 'null'],
          },
          deletionTimestamp: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            format: 'date-time',
            type: ['string', 'null'],
          },
          finalizers: {
            description:
              'Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.',
            items: {
              type: ['string', 'null'],
            },
            type: ['array', 'null'],
            'x-kubernetes-patch-strategy': 'merge',
          },
          generateName: {
            description:
              'GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency',
            type: ['string', 'null'],
          },
          generation: {
            description: 'A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.',
            format: 'int64',
            type: ['integer', 'null'],
          },
          labels: {
            additionalProperties: {
              type: ['string', 'null'],
            },
            description: 'Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels',
            type: ['object', 'null'],
          },
          managedFields: {
            description: "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
            items: {
              description: 'ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.',
              properties: {
                apiVersion: {
                  description: 'APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.',
                  type: ['string', 'null'],
                },
                fieldsType: {
                  description: 'FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"',
                  type: ['string', 'null'],
                },
                fieldsV1: {
                  description:
                    "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
                  type: ['object', 'null'],
                },
                manager: {
                  description: 'Manager is an identifier of the workflow managing these fields.',
                  type: ['string', 'null'],
                },
                operation: {
                  description: "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
                  type: ['string', 'null'],
                },
                time: {
                  description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                  format: 'date-time',
                  type: ['string', 'null'],
                },
              },
              type: ['object', 'null'],
            },
            type: ['array', 'null'],
          },
          name: {
            description: 'Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
            type: ['string', 'null'],
          },
          namespace: {
            description: 'Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces',
            type: ['string', 'null'],
          },
          ownerReferences: {
            description: 'List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.',
            items: {
              description: 'OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.',
              properties: {
                apiVersion: {
                  description: 'API version of the referent.',
                  type: 'string',
                },
                blockOwnerDeletion: {
                  description: 'If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.',
                  type: ['boolean', 'null'],
                },
                controller: {
                  description: 'If true, this reference points to the managing controller.',
                  type: ['boolean', 'null'],
                },
                kind: {
                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
                  type: 'string',
                },
                name: {
                  description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
                  type: 'string',
                },
                uid: {
                  description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                  type: 'string',
                },
              },
              required: ['apiVersion', 'kind', 'name', 'uid'],
              type: ['object', 'null'],
            },
            type: ['array', 'null'],
            'x-kubernetes-patch-merge-key': 'uid',
            'x-kubernetes-patch-strategy': 'merge',
          },
          resourceVersion: {
            description:
              'An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency',
            type: ['string', 'null'],
          },
          selfLink: {
            description: 'SelfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.',
            type: ['string', 'null'],
          },
          uid: {
            description: 'UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
            type: ['string', 'null'],
          },
        },
        type: ['object', 'null'],
      },
      secrets: {
        description: 'Secrets is the list of secrets allowed to be used by pods running using this ServiceAccount. More info: https://kubernetes.io/docs/concepts/configuration/secret',
        items: {
          description: 'ObjectReference contains enough information to let you inspect or modify the referred object.',
          properties: {
            apiVersion: {
              description: 'API version of the referent.',
              type: ['string', 'null'],
            },
            fieldPath: {
              description:
                'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.',
              type: ['string', 'null'],
            },
            kind: {
              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
              type: ['string', 'null'],
            },
            name: {
              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
              type: ['string', 'null'],
            },
            namespace: {
              description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
              type: ['string', 'null'],
            },
            resourceVersion: {
              description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency',
              type: ['string', 'null'],
            },
            uid: {
              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids',
              type: ['string', 'null'],
            },
          },
          type: ['object', 'null'],
        },
        type: ['array', 'null'],
        'x-kubernetes-patch-merge-key': 'name',
        'x-kubernetes-patch-strategy': 'merge',
      },
    },
    type: 'object',
    'x-kubernetes-group-version-kind': [
      {
        group: '',
        kind: 'ServiceAccount',
        version: 'v1',
      },
    ],
    $schema: 'http://json-schema.org/schema#',
  })
  .setIn([referenceForModel(k8sModels.RoleModel), 'default'], {
    description: 'Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding.',
    properties: {
      apiVersion: {
        description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
        type: ['string', 'null'],
        enum: ['rbac.authorization.k8s.io/v1'],
      },
      kind: {
        description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
        type: ['string', 'null'],
        enum: ['Role'],
      },
      metadata: {
        description: 'ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.',
        properties: {
          annotations: {
            additionalProperties: {
              type: ['string', 'null'],
            },
            description: 'Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations',
            type: ['object', 'null'],
          },
          clusterName: {
            description: 'The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.',
            type: ['string', 'null'],
          },
          creationTimestamp: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            format: 'date-time',
            type: ['string', 'null'],
          },
          deletionGracePeriodSeconds: {
            description: 'Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.',
            format: 'int64',
            type: ['integer', 'null'],
          },
          deletionTimestamp: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            format: 'date-time',
            type: ['string', 'null'],
          },
          finalizers: {
            description:
              'Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.',
            items: {
              type: ['string', 'null'],
            },
            type: ['array', 'null'],
            'x-kubernetes-patch-strategy': 'merge',
          },
          generateName: {
            description:
              'GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency',
            type: ['string', 'null'],
          },
          generation: {
            description: 'A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.',
            format: 'int64',
            type: ['integer', 'null'],
          },
          labels: {
            additionalProperties: {
              type: ['string', 'null'],
            },
            description: 'Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels',
            type: ['object', 'null'],
          },
          managedFields: {
            description: "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
            items: {
              description: 'ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.',
              properties: {
                apiVersion: {
                  description: 'APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.',
                  type: ['string', 'null'],
                },
                fieldsType: {
                  description: 'FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"',
                  type: ['string', 'null'],
                },
                fieldsV1: {
                  description:
                    "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
                  type: ['object', 'null'],
                },
                manager: {
                  description: 'Manager is an identifier of the workflow managing these fields.',
                  type: ['string', 'null'],
                },
                operation: {
                  description: "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
                  type: ['string', 'null'],
                },
                time: {
                  description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                  format: 'date-time',
                  type: ['string', 'null'],
                },
              },
              type: ['object', 'null'],
            },
            type: ['array', 'null'],
          },
          name: {
            description: 'Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
            type: ['string', 'null'],
          },
          namespace: {
            description: 'Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces',
            type: ['string', 'null'],
          },
          ownerReferences: {
            description: 'List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.',
            items: {
              description: 'OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.',
              properties: {
                apiVersion: {
                  description: 'API version of the referent.',
                  type: 'string',
                },
                blockOwnerDeletion: {
                  description: 'If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.',
                  type: ['boolean', 'null'],
                },
                controller: {
                  description: 'If true, this reference points to the managing controller.',
                  type: ['boolean', 'null'],
                },
                kind: {
                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
                  type: 'string',
                },
                name: {
                  description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
                  type: 'string',
                },
                uid: {
                  description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                  type: 'string',
                },
              },
              required: ['apiVersion', 'kind', 'name', 'uid'],
              type: ['object', 'null'],
            },
            type: ['array', 'null'],
            'x-kubernetes-patch-merge-key': 'uid',
            'x-kubernetes-patch-strategy': 'merge',
          },
          resourceVersion: {
            description:
              'An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency',
            type: ['string', 'null'],
          },
          selfLink: {
            description: 'SelfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.',
            type: ['string', 'null'],
          },
          uid: {
            description: 'UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
            type: ['string', 'null'],
          },
        },
        type: ['object', 'null'],
      },
      rules: {
        description: 'Rules holds all the PolicyRules for this Role',
        items: {
          description: 'PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.',
          properties: {
            apiGroups: {
              description: 'APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.',
              items: {
                type: ['string', 'null'],
              },
              type: ['array', 'null'],
            },
            nonResourceURLs: {
              description: 'NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as "pods" or "secrets") or non-resource URL paths (such as "/api"),  but not both.',
              items: {
                type: ['string', 'null'],
              },
              type: ['array', 'null'],
            },
            resourceNames: {
              description: 'ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.',
              items: {
                type: ['string', 'null'],
              },
              type: ['array', 'null'],
            },
            resources: {
              description: 'Resources is a list of resources this rule applies to.  ResourceAll represents all resources.',
              items: {
                type: ['string', 'null'],
              },
              type: ['array', 'null'],
            },
            verbs: {
              description: 'Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.',
              items: {
                type: ['string', 'null'],
              },
              type: 'array',
            },
          },
          required: ['verbs'],
          type: ['object', 'null'],
        },
        type: ['array', 'null'],
      },
    },
    type: 'object',
    'x-kubernetes-group-version-kind': [
      {
        group: 'rbac.authorization.k8s.io',
        kind: 'Role',
        version: 'v1',
      },
    ],
    $schema: 'http://json-schema.org/schema#',
  })
  .setIn([referenceForModel(k8sModels.DeploymentModel), 'default'], {
    description: 'Deployment enables declarative updates for Pods and ReplicaSets.',
    properties: {
      apiVersion: {
        description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
        type: ['string', 'null'],
        enum: ['apps/v1'],
      },
      kind: {
        description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
        type: ['string', 'null'],
        enum: ['Deployment'],
      },
      metadata: {
        description: 'ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.',
        properties: {
          annotations: {
            description: 'Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations',
            type: 'object',
            additionalProperties: {
              type: ['string', 'null'],
            },
          },
          clusterName: {
            description: 'The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.',
            type: ['string', 'null'],
          },
          creationTimestamp: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            type: ['string', 'null'],
            format: 'date-time',
          },
          deletionGracePeriodSeconds: {
            description: 'Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.',
            type: 'integer',
            format: 'int64',
          },
          deletionTimestamp: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            type: ['string', 'null'],
            format: 'date-time',
          },
          finalizers: {
            description: 'Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.',
            type: ['array', 'null'],
            items: {
              type: ['string', 'null'],
            },
            'x-kubernetes-patch-strategy': 'merge',
          },
          generateName: {
            description:
              'GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency',
            type: ['string', 'null'],
          },
          generation: {
            description: 'A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.',
            type: 'integer',
            format: 'int64',
          },
          initializers: {
            description: 'Initializers tracks the progress of initialization.',
            required: ['pending'],
            properties: {
              pending: {
                description: 'Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.',
                type: 'array',
                items: {
                  description: 'Initializer is information about an initializer that has not yet completed.',
                  required: ['name'],
                  properties: {
                    name: {
                      description: 'name of the process that is responsible for initializing this object.',
                      type: 'string',
                    },
                  },
                  additionalProperties: false,
                },
                'x-kubernetes-patch-merge-key': 'name',
                'x-kubernetes-patch-strategy': 'merge',
              },
              result: {
                description: "Status is a return value for calls that don't return other objects.",
                properties: {
                  apiVersion: {
                    description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
                    type: ['string', 'null'],
                    enum: ['v1'],
                  },
                  code: {
                    description: 'Suggested HTTP return code for this status, 0 if not set.',
                    type: 'integer',
                    format: 'int32',
                  },
                  details: {
                    description: 'StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.',
                    properties: {
                      causes: {
                        description: 'The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.',
                        type: ['array', 'null'],
                        items: {
                          description: 'StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.',
                          properties: {
                            field: {
                              description: 'The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  "name" - the field "name" on the current resource\n  "items[0].name" - the field "name" on the first array entry in "items"',
                              type: ['string', 'null'],
                            },
                            message: {
                              description: 'A human-readable description of the cause of the error.  This field may be presented as-is to a reader.',
                              type: ['string', 'null'],
                            },
                            reason: {
                              description: 'A machine-readable description of the cause of the error. If this value is empty there is no information available.',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                      },
                      group: {
                        description: 'The group attribute of the resource associated with the status StatusReason.',
                        type: ['string', 'null'],
                      },
                      kind: {
                        description: 'The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                        type: ['string', 'null'],
                      },
                      name: {
                        description: 'The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).',
                        type: ['string', 'null'],
                      },
                      retryAfterSeconds: {
                        description: 'If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.',
                        type: 'integer',
                        format: 'int32',
                      },
                      uid: {
                        description: 'UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                        type: ['string', 'null'],
                      },
                    },
                    additionalProperties: false,
                  },
                  kind: {
                    description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                    type: ['string', 'null'],
                    enum: ['Status'],
                  },
                  message: {
                    description: 'A human-readable description of the status of this operation.',
                    type: ['string', 'null'],
                  },
                  metadata: {
                    description: 'ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.',
                    properties: {
                      continue: {
                        description:
                          'continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response.',
                        type: ['string', 'null'],
                      },
                      resourceVersion: {
                        description: "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
                        type: ['string', 'null'],
                      },
                      selfLink: {
                        description: 'selfLink is a URL representing this object. Populated by the system. Read-only.',
                        type: ['string', 'null'],
                      },
                    },
                    additionalProperties: false,
                  },
                  reason: {
                    description: 'A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.',
                    type: ['string', 'null'],
                  },
                  status: {
                    description: 'Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status',
                    type: ['string', 'null'],
                  },
                },
                'x-kubernetes-group-version-kind': [
                  {
                    group: '',
                    kind: 'Status',
                    version: 'v1',
                  },
                ],
                additionalProperties: false,
              },
            },
            additionalProperties: false,
          },
          labels: {
            description: 'Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels',
            type: 'object',
            additionalProperties: {
              type: ['string', 'null'],
            },
          },
          name: {
            description: 'Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
            type: ['string', 'null'],
          },
          namespace: {
            description: 'Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces',
            type: ['string', 'null'],
          },
          ownerReferences: {
            description: 'List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.',
            type: ['array', 'null'],
            items: {
              description: 'OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.',
              required: ['apiVersion', 'kind', 'name', 'uid'],
              properties: {
                apiVersion: {
                  description: 'API version of the referent.',
                  type: 'string',
                },
                blockOwnerDeletion: {
                  description: 'If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.',
                  type: 'boolean',
                },
                controller: {
                  description: 'If true, this reference points to the managing controller.',
                  type: 'boolean',
                },
                kind: {
                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                  type: 'string',
                },
                name: {
                  description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
                  type: 'string',
                },
                uid: {
                  description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                  type: 'string',
                },
              },
              additionalProperties: false,
            },
            'x-kubernetes-patch-merge-key': 'uid',
            'x-kubernetes-patch-strategy': 'merge',
          },
          resourceVersion: {
            description:
              'An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency',
            type: ['string', 'null'],
          },
          selfLink: {
            description: 'SelfLink is a URL representing this object. Populated by the system. Read-only.',
            type: ['string', 'null'],
          },
          uid: {
            description: 'UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
            type: ['string', 'null'],
          },
        },
        additionalProperties: false,
      },
      spec: {
        description: 'DeploymentSpec is the specification of the desired behavior of the Deployment.',
        required: ['selector', 'template'],
        properties: {
          minReadySeconds: {
            description: 'Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)',
            type: 'integer',
            format: 'int32',
          },
          paused: {
            description: 'Indicates that the deployment is paused.',
            type: 'boolean',
          },
          progressDeadlineSeconds: {
            description: 'The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.',
            type: 'integer',
            format: 'int32',
          },
          replicas: {
            description: 'Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.',
            type: 'integer',
            format: 'int32',
          },
          revisionHistoryLimit: {
            description: 'The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.',
            type: 'integer',
            format: 'int32',
          },
          selector: {
            description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
            properties: {
              matchExpressions: {
                description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                type: ['array', 'null'],
                items: {
                  description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                  required: ['key', 'operator'],
                  properties: {
                    key: {
                      description: 'key is the label key that the selector applies to.',
                      type: 'string',
                      'x-kubernetes-patch-merge-key': 'key',
                      'x-kubernetes-patch-strategy': 'merge',
                    },
                    operator: {
                      description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                      type: 'string',
                    },
                    values: {
                      description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                      type: ['array', 'null'],
                      items: {
                        type: ['string', 'null'],
                      },
                    },
                  },
                  additionalProperties: false,
                },
              },
              matchLabels: {
                description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                type: 'object',
                propertyNames: 'Labels',
                additionalProperties: {
                  type: ['string', 'null'],
                },
              },
            },
            additionalProperties: false,
          },
          strategy: {
            description: 'DeploymentStrategy describes how to replace existing pods with new ones.',
            properties: {
              rollingUpdate: {
                description: 'Spec to control the desired behavior of rolling update.',
                properties: {
                  maxSurge: {
                    oneOf: [
                      {
                        type: ['string', 'null'],
                      },
                      {
                        type: 'integer',
                      },
                    ],
                  },
                  maxUnavailable: {
                    oneOf: [
                      {
                        type: ['string', 'null'],
                      },
                      {
                        type: 'integer',
                      },
                    ],
                  },
                },
                additionalProperties: false,
              },
              type: {
                description: 'Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.',
                type: ['string', 'null'],
              },
            },
            additionalProperties: false,
          },
          template: {
            description: 'PodTemplateSpec describes the data a pod should have when created from a template',
            properties: {
              metadata: {
                description: 'ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.',
                properties: {
                  annotations: {
                    description: 'Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations',
                    type: 'object',
                    additionalProperties: {
                      type: ['string', 'null'],
                    },
                  },
                  clusterName: {
                    description: 'The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.',
                    type: ['string', 'null'],
                  },
                  creationTimestamp: {
                    description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                    type: ['string', 'null'],
                    format: 'date-time',
                  },
                  deletionGracePeriodSeconds: {
                    description: 'Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.',
                    type: 'integer',
                    format: 'int64',
                  },
                  deletionTimestamp: {
                    description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                    type: ['string', 'null'],
                    format: 'date-time',
                  },
                  finalizers: {
                    description: 'Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.',
                    type: ['array', 'null'],
                    items: {
                      type: ['string', 'null'],
                    },
                    'x-kubernetes-patch-strategy': 'merge',
                  },
                  generateName: {
                    description:
                      'GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency',
                    type: ['string', 'null'],
                  },
                  generation: {
                    description: 'A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.',
                    type: 'integer',
                    format: 'int64',
                  },
                  initializers: {
                    description: 'Initializers tracks the progress of initialization.',
                    required: ['pending'],
                    properties: {
                      pending: {
                        description: 'Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.',
                        type: 'array',
                        items: {
                          description: 'Initializer is information about an initializer that has not yet completed.',
                          required: ['name'],
                          properties: {
                            name: {
                              description: 'name of the process that is responsible for initializing this object.',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        'x-kubernetes-patch-merge-key': 'name',
                        'x-kubernetes-patch-strategy': 'merge',
                      },
                      result: {
                        description: "Status is a return value for calls that don't return other objects.",
                        properties: {
                          apiVersion: {
                            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
                            type: ['string', 'null'],
                            enum: ['v1'],
                          },
                          code: {
                            description: 'Suggested HTTP return code for this status, 0 if not set.',
                            type: 'integer',
                            format: 'int32',
                          },
                          details: {
                            description: 'StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.',
                            properties: {
                              causes: {
                                description: 'The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.',
                                type: ['array', 'null'],
                                items: {
                                  description: 'StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.',
                                  properties: {
                                    field: {
                                      description: 'The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  "name" - the field "name" on the current resource\n  "items[0].name" - the field "name" on the first array entry in "items"',
                                      type: ['string', 'null'],
                                    },
                                    message: {
                                      description: 'A human-readable description of the cause of the error.  This field may be presented as-is to a reader.',
                                      type: ['string', 'null'],
                                    },
                                    reason: {
                                      description: 'A machine-readable description of the cause of the error. If this value is empty there is no information available.',
                                      type: ['string', 'null'],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                              },
                              group: {
                                description: 'The group attribute of the resource associated with the status StatusReason.',
                                type: ['string', 'null'],
                              },
                              kind: {
                                description: 'The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                                type: ['string', 'null'],
                              },
                              name: {
                                description: 'The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).',
                                type: ['string', 'null'],
                              },
                              retryAfterSeconds: {
                                description: 'If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.',
                                type: 'integer',
                                format: 'int32',
                              },
                              uid: {
                                description: 'UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                                type: ['string', 'null'],
                              },
                            },
                            additionalProperties: false,
                          },
                          kind: {
                            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                            type: ['string', 'null'],
                            enum: ['Status'],
                          },
                          message: {
                            description: 'A human-readable description of the status of this operation.',
                            type: ['string', 'null'],
                          },
                          metadata: {
                            description: 'ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.',
                            properties: {
                              continue: {
                                description:
                                  'continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response.',
                                type: ['string', 'null'],
                              },
                              resourceVersion: {
                                description: "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
                                type: ['string', 'null'],
                              },
                              selfLink: {
                                description: 'selfLink is a URL representing this object. Populated by the system. Read-only.',
                                type: ['string', 'null'],
                              },
                            },
                            additionalProperties: false,
                          },
                          reason: {
                            description: 'A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.',
                            type: ['string', 'null'],
                          },
                          status: {
                            description: 'Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status',
                            type: ['string', 'null'],
                          },
                        },
                        'x-kubernetes-group-version-kind': [
                          {
                            group: '',
                            kind: 'Status',
                            version: 'v1',
                          },
                        ],
                        additionalProperties: false,
                      },
                    },
                    additionalProperties: false,
                  },
                  labels: {
                    description: 'Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels',
                    type: 'object',
                    propertyNames: 'Labels',
                    additionalProperties: {
                      type: ['string', 'null'],
                    },
                  },
                  name: {
                    description: 'Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
                    type: ['string', 'null'],
                  },
                  namespace: {
                    description: 'Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces',
                    type: ['string', 'null'],
                  },
                  ownerReferences: {
                    description: 'List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.',
                    type: ['array', 'null'],
                    items: {
                      description: 'OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.',
                      required: ['apiVersion', 'kind', 'name', 'uid'],
                      properties: {
                        apiVersion: {
                          description: 'API version of the referent.',
                          type: 'string',
                        },
                        blockOwnerDeletion: {
                          description: 'If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.',
                          type: 'boolean',
                        },
                        controller: {
                          description: 'If true, this reference points to the managing controller.',
                          type: 'boolean',
                        },
                        kind: {
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                          type: 'string',
                        },
                        name: {
                          description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
                          type: 'string',
                        },
                        uid: {
                          description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                          type: 'string',
                        },
                      },
                      additionalProperties: false,
                    },
                    'x-kubernetes-patch-merge-key': 'uid',
                    'x-kubernetes-patch-strategy': 'merge',
                  },
                  resourceVersion: {
                    description:
                      'An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency',
                    type: ['string', 'null'],
                  },
                  selfLink: {
                    description: 'SelfLink is a URL representing this object. Populated by the system. Read-only.',
                    type: ['string', 'null'],
                  },
                  uid: {
                    description: 'UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                    type: ['string', 'null'],
                  },
                },
                additionalProperties: false,
              },
              spec: {
                description: 'PodSpec is a description of a pod.',
                required: ['containers'],
                properties: {
                  activeDeadlineSeconds: {
                    description: 'Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.',
                    type: 'integer',
                    format: 'int64',
                  },
                  affinity: {
                    description: 'Affinity is a group of affinity scheduling rules.',
                    properties: {
                      nodeAffinity: {
                        description: 'Node affinity is a group of node affinity scheduling rules.',
                        properties: {
                          preferredDuringSchedulingIgnoredDuringExecution: {
                            description:
                              'The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.',
                            type: ['array', 'null'],
                            items: {
                              description: "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
                              required: ['weight', 'preference'],
                              properties: {
                                preference: {
                                  description: 'A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.',
                                  properties: {
                                    matchExpressions: {
                                      description: "A list of node selector requirements by node's labels.",
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                        required: ['key', 'operator'],
                                        properties: {
                                          key: {
                                            description: 'The label key that the selector applies to.',
                                            type: 'string',
                                          },
                                          operator: {
                                            description: "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                            type: 'string',
                                          },
                                          values: {
                                            description: 'An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
                                            type: ['array', 'null'],
                                            items: {
                                              type: ['string', 'null'],
                                            },
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    matchFields: {
                                      description: "A list of node selector requirements by node's fields.",
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                        required: ['key', 'operator'],
                                        properties: {
                                          key: {
                                            description: 'The label key that the selector applies to.',
                                            type: 'string',
                                          },
                                          operator: {
                                            description: "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                            type: 'string',
                                          },
                                          values: {
                                            description: 'An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
                                            type: ['array', 'null'],
                                            items: {
                                              type: ['string', 'null'],
                                            },
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                weight: {
                                  description: 'Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.',
                                  type: 'integer',
                                  format: 'int32',
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          requiredDuringSchedulingIgnoredDuringExecution: {
                            description: 'A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.',
                            required: ['nodeSelectorTerms'],
                            properties: {
                              nodeSelectorTerms: {
                                description: 'Required. A list of node selector terms. The terms are ORed.',
                                type: 'array',
                                items: {
                                  description: 'A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.',
                                  properties: {
                                    matchExpressions: {
                                      description: "A list of node selector requirements by node's labels.",
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                        required: ['key', 'operator'],
                                        properties: {
                                          key: {
                                            description: 'The label key that the selector applies to.',
                                            type: 'string',
                                          },
                                          operator: {
                                            description: "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                            type: 'string',
                                          },
                                          values: {
                                            description: 'An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
                                            type: ['array', 'null'],
                                            items: {
                                              type: ['string', 'null'],
                                            },
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    matchFields: {
                                      description: "A list of node selector requirements by node's fields.",
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                        required: ['key', 'operator'],
                                        properties: {
                                          key: {
                                            description: 'The label key that the selector applies to.',
                                            type: 'string',
                                          },
                                          operator: {
                                            description: "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                            type: 'string',
                                          },
                                          values: {
                                            description: 'An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
                                            type: ['array', 'null'],
                                            items: {
                                              type: ['string', 'null'],
                                            },
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                              },
                            },
                            additionalProperties: false,
                          },
                        },
                        additionalProperties: false,
                      },
                      podAffinity: {
                        description: 'Pod affinity is a group of inter pod affinity scheduling rules.',
                        properties: {
                          preferredDuringSchedulingIgnoredDuringExecution: {
                            description:
                              'The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.',
                            type: ['array', 'null'],
                            items: {
                              description: 'The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)',
                              required: ['weight', 'podAffinityTerm'],
                              properties: {
                                podAffinityTerm: {
                                  description: 'Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running',
                                  required: ['topologyKey'],
                                  properties: {
                                    labelSelector: {
                                      description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
                                      properties: {
                                        matchExpressions: {
                                          description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                                          type: ['array', 'null'],
                                          items: {
                                            description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                            required: ['key', 'operator'],
                                            properties: {
                                              key: {
                                                description: 'key is the label key that the selector applies to.',
                                                type: 'string',
                                                'x-kubernetes-patch-merge-key': 'key',
                                                'x-kubernetes-patch-strategy': 'merge',
                                              },
                                              operator: {
                                                description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                type: 'string',
                                              },
                                              values: {
                                                description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                                                type: ['array', 'null'],
                                                items: {
                                                  type: ['string', 'null'],
                                                },
                                              },
                                            },
                                            additionalProperties: false,
                                          },
                                        },
                                        matchLabels: {
                                          description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                                          type: 'object',
                                          additionalProperties: {
                                            type: ['string', 'null'],
                                          },
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                    namespaces: {
                                      description: 'namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod\'s namespace"',
                                      type: ['array', 'null'],
                                      items: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                    topologyKey: {
                                      description: 'This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
                                      type: 'string',
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                weight: {
                                  description: 'weight associated with matching the corresponding podAffinityTerm, in the range 1-100.',
                                  type: 'integer',
                                  format: 'int32',
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          requiredDuringSchedulingIgnoredDuringExecution: {
                            description:
                              'If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.',
                            type: ['array', 'null'],
                            items: {
                              description: 'Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running',
                              required: ['topologyKey'],
                              properties: {
                                labelSelector: {
                                  description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
                                  properties: {
                                    matchExpressions: {
                                      description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                        required: ['key', 'operator'],
                                        properties: {
                                          key: {
                                            description: 'key is the label key that the selector applies to.',
                                            type: 'string',
                                            'x-kubernetes-patch-merge-key': 'key',
                                            'x-kubernetes-patch-strategy': 'merge',
                                          },
                                          operator: {
                                            description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                            type: 'string',
                                          },
                                          values: {
                                            description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                                            type: ['array', 'null'],
                                            items: {
                                              type: ['string', 'null'],
                                            },
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    matchLabels: {
                                      description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                                      type: 'object',
                                      additionalProperties: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                namespaces: {
                                  description: 'namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod\'s namespace"',
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                                topologyKey: {
                                  description: 'This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
                                  type: 'string',
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                        },
                        additionalProperties: false,
                      },
                      podAntiAffinity: {
                        description: 'Pod anti affinity is a group of inter pod anti affinity scheduling rules.',
                        properties: {
                          preferredDuringSchedulingIgnoredDuringExecution: {
                            description:
                              'The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.',
                            type: ['array', 'null'],
                            items: {
                              description: 'The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)',
                              required: ['weight', 'podAffinityTerm'],
                              properties: {
                                podAffinityTerm: {
                                  description: 'Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running',
                                  required: ['topologyKey'],
                                  properties: {
                                    labelSelector: {
                                      description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
                                      properties: {
                                        matchExpressions: {
                                          description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                                          type: ['array', 'null'],
                                          items: {
                                            description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                            required: ['key', 'operator'],
                                            properties: {
                                              key: {
                                                description: 'key is the label key that the selector applies to.',
                                                type: 'string',
                                                'x-kubernetes-patch-merge-key': 'key',
                                                'x-kubernetes-patch-strategy': 'merge',
                                              },
                                              operator: {
                                                description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                type: 'string',
                                              },
                                              values: {
                                                description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                                                type: ['array', 'null'],
                                                items: {
                                                  type: ['string', 'null'],
                                                },
                                              },
                                            },
                                            additionalProperties: false,
                                          },
                                        },
                                        matchLabels: {
                                          description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                                          type: 'object',
                                          additionalProperties: {
                                            type: ['string', 'null'],
                                          },
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                    namespaces: {
                                      description: 'namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod\'s namespace"',
                                      type: ['array', 'null'],
                                      items: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                    topologyKey: {
                                      description: 'This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
                                      type: 'string',
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                weight: {
                                  description: 'weight associated with matching the corresponding podAffinityTerm, in the range 1-100.',
                                  type: 'integer',
                                  format: 'int32',
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          requiredDuringSchedulingIgnoredDuringExecution: {
                            description:
                              'If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.',
                            type: ['array', 'null'],
                            items: {
                              description: 'Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running',
                              required: ['topologyKey'],
                              properties: {
                                labelSelector: {
                                  description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
                                  properties: {
                                    matchExpressions: {
                                      description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                        required: ['key', 'operator'],
                                        properties: {
                                          key: {
                                            description: 'key is the label key that the selector applies to.',
                                            type: 'string',
                                            'x-kubernetes-patch-merge-key': 'key',
                                            'x-kubernetes-patch-strategy': 'merge',
                                          },
                                          operator: {
                                            description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                            type: 'string',
                                          },
                                          values: {
                                            description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                                            type: ['array', 'null'],
                                            items: {
                                              type: ['string', 'null'],
                                            },
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    matchLabels: {
                                      description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                                      type: 'object',
                                      additionalProperties: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                namespaces: {
                                  description: 'namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod\'s namespace"',
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                                topologyKey: {
                                  description: 'This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
                                  type: 'string',
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                        },
                        additionalProperties: false,
                      },
                    },
                    additionalProperties: false,
                  },
                  automountServiceAccountToken: {
                    description: 'AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.',
                    type: 'boolean',
                  },
                  containers: {
                    description: 'List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.',
                    type: 'array',
                    items: {
                      description: 'A single application container that you want to run within a pod.',
                      required: ['name'],
                      properties: {
                        args: {
                          description:
                            "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                          type: ['array', 'null'],
                          items: {
                            type: ['string', 'null'],
                          },
                        },
                        command: {
                          description:
                            "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                          type: ['array', 'null'],
                          items: {
                            type: ['string', 'null'],
                          },
                        },
                        env: {
                          description: 'List of environment variables to set in the container. Cannot be updated.',
                          type: ['array', 'null'],
                          items: {
                            description: 'EnvVar represents an environment variable present in a Container.',
                            required: ['name'],
                            properties: {
                              name: {
                                description: 'Name of the environment variable. Must be a C_IDENTIFIER.',
                                type: 'string',
                              },
                              value: {
                                description: 'Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".',
                                type: ['string', 'null'],
                              },
                              valueFrom: {
                                description: 'EnvVarSource represents a source for the value of an EnvVar.',
                                properties: {
                                  configMapKeyRef: {
                                    description: 'Selects a key from a ConfigMap.',
                                    required: ['key'],
                                    properties: {
                                      key: {
                                        description: 'The key to select.',
                                        type: 'string',
                                      },
                                      name: {
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                        type: ['string', 'null'],
                                      },
                                      optional: {
                                        description: "Specify whether the ConfigMap or it's key must be defined",
                                        type: 'boolean',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  fieldRef: {
                                    description: 'ObjectFieldSelector selects an APIVersioned field of an object.',
                                    required: ['fieldPath'],
                                    properties: {
                                      apiVersion: {
                                        description: 'Version of the schema the FieldPath is written in terms of, defaults to "v1".',
                                        type: ['string', 'null'],
                                      },
                                      fieldPath: {
                                        description: 'Path of the field to select in the specified API version.',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  resourceFieldRef: {
                                    description: 'ResourceFieldSelector represents container resources (cpu, memory) and their output format',
                                    required: ['resource'],
                                    properties: {
                                      containerName: {
                                        description: 'Container name: required for volumes, optional for env vars',
                                        type: ['string', 'null'],
                                      },
                                      divisor: {
                                        oneOf: [
                                          {
                                            type: ['string', 'null'],
                                          },
                                          {
                                            type: 'integer',
                                          },
                                        ],
                                      },
                                      resource: {
                                        description: 'Required: resource to select',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  secretKeyRef: {
                                    description: 'SecretKeySelector selects a key of a Secret.',
                                    required: ['key'],
                                    properties: {
                                      key: {
                                        description: 'The key of the secret to select from.  Must be a valid secret key.',
                                        type: 'string',
                                      },
                                      name: {
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                        type: ['string', 'null'],
                                      },
                                      optional: {
                                        description: "Specify whether the Secret or it's key must be defined",
                                        type: 'boolean',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                additionalProperties: false,
                              },
                            },
                            additionalProperties: false,
                          },
                          'x-kubernetes-patch-merge-key': 'name',
                          'x-kubernetes-patch-strategy': 'merge',
                        },
                        envFrom: {
                          description: 'List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.',
                          type: ['array', 'null'],
                          items: {
                            description: 'EnvFromSource represents the source of a set of ConfigMaps',
                            properties: {
                              configMapRef: {
                                description: "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
                                properties: {
                                  name: {
                                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                    type: ['string', 'null'],
                                  },
                                  optional: {
                                    description: 'Specify whether the ConfigMap must be defined',
                                    type: 'boolean',
                                  },
                                },
                                additionalProperties: false,
                              },
                              prefix: {
                                description: 'An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.',
                                type: ['string', 'null'],
                              },
                              secretRef: {
                                description: "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
                                properties: {
                                  name: {
                                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                    type: ['string', 'null'],
                                  },
                                  optional: {
                                    description: 'Specify whether the Secret must be defined',
                                    type: 'boolean',
                                  },
                                },
                                additionalProperties: false,
                              },
                            },
                            additionalProperties: false,
                          },
                        },
                        image: {
                          description: 'Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.',
                          type: ['string', 'null'],
                        },
                        imagePullPolicy: {
                          description: 'Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images',
                          type: ['string', 'null'],
                        },
                        lifecycle: {
                          description: 'Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.',
                          properties: {
                            postStart: {
                              description: 'Handler defines a specific action that should be taken',
                              properties: {
                                exec: {
                                  description: 'ExecAction describes a "run in container" action.',
                                  properties: {
                                    command: {
                                      description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                      type: ['array', 'null'],
                                      items: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                httpGet: {
                                  description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                                  required: ['port'],
                                  properties: {
                                    host: {
                                      description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                      type: ['string', 'null'],
                                    },
                                    httpHeaders: {
                                      description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                        required: ['name', 'value'],
                                        properties: {
                                          name: {
                                            description: 'The header field name',
                                            type: 'string',
                                          },
                                          value: {
                                            description: 'The header field value',
                                            type: 'string',
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    path: {
                                      description: 'Path to access on the HTTP server.',
                                      type: ['string', 'null'],
                                    },
                                    port: {
                                      oneOf: [
                                        {
                                          type: ['string', 'null'],
                                        },
                                        {
                                          type: 'integer',
                                        },
                                      ],
                                    },
                                    scheme: {
                                      description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                      type: ['string', 'null'],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                tcpSocket: {
                                  description: 'TCPSocketAction describes an action based on opening a socket',
                                  required: ['port'],
                                  properties: {
                                    host: {
                                      description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                      type: ['string', 'null'],
                                    },
                                    port: {
                                      oneOf: [
                                        {
                                          type: ['string', 'null'],
                                        },
                                        {
                                          type: 'integer',
                                        },
                                      ],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                              },
                              additionalProperties: false,
                            },
                            preStop: {
                              description: 'Handler defines a specific action that should be taken',
                              properties: {
                                exec: {
                                  description: 'ExecAction describes a "run in container" action.',
                                  properties: {
                                    command: {
                                      description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                      type: ['array', 'null'],
                                      items: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                httpGet: {
                                  description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                                  required: ['port'],
                                  properties: {
                                    host: {
                                      description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                      type: ['string', 'null'],
                                    },
                                    httpHeaders: {
                                      description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                        required: ['name', 'value'],
                                        properties: {
                                          name: {
                                            description: 'The header field name',
                                            type: 'string',
                                          },
                                          value: {
                                            description: 'The header field value',
                                            type: 'string',
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    path: {
                                      description: 'Path to access on the HTTP server.',
                                      type: ['string', 'null'],
                                    },
                                    port: {
                                      oneOf: [
                                        {
                                          type: ['string', 'null'],
                                        },
                                        {
                                          type: 'integer',
                                        },
                                      ],
                                    },
                                    scheme: {
                                      description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                      type: ['string', 'null'],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                tcpSocket: {
                                  description: 'TCPSocketAction describes an action based on opening a socket',
                                  required: ['port'],
                                  properties: {
                                    host: {
                                      description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                      type: ['string', 'null'],
                                    },
                                    port: {
                                      oneOf: [
                                        {
                                          type: ['string', 'null'],
                                        },
                                        {
                                          type: 'integer',
                                        },
                                      ],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          additionalProperties: false,
                        },
                        livenessProbe: {
                          description: 'Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.',
                          properties: {
                            exec: {
                              description: 'ExecAction describes a "run in container" action.',
                              properties: {
                                command: {
                                  description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                              },
                              additionalProperties: false,
                            },
                            failureThreshold: {
                              description: 'Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            httpGet: {
                              description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                              required: ['port'],
                              properties: {
                                host: {
                                  description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                  type: ['string', 'null'],
                                },
                                httpHeaders: {
                                  description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                  type: ['array', 'null'],
                                  items: {
                                    description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                    required: ['name', 'value'],
                                    properties: {
                                      name: {
                                        description: 'The header field name',
                                        type: 'string',
                                      },
                                      value: {
                                        description: 'The header field value',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                path: {
                                  description: 'Path to access on the HTTP server.',
                                  type: ['string', 'null'],
                                },
                                port: {
                                  oneOf: [
                                    {
                                      type: ['string', 'null'],
                                    },
                                    {
                                      type: 'integer',
                                    },
                                  ],
                                },
                                scheme: {
                                  description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            initialDelaySeconds: {
                              description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                              type: 'integer',
                              format: 'int32',
                            },
                            periodSeconds: {
                              description: 'How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            successThreshold: {
                              description: 'Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            tcpSocket: {
                              description: 'TCPSocketAction describes an action based on opening a socket',
                              required: ['port'],
                              properties: {
                                host: {
                                  description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                  type: ['string', 'null'],
                                },
                                port: {
                                  oneOf: [
                                    {
                                      type: ['string', 'null'],
                                    },
                                    {
                                      type: 'integer',
                                    },
                                  ],
                                },
                              },
                              additionalProperties: false,
                            },
                            timeoutSeconds: {
                              description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                              type: 'integer',
                              format: 'int32',
                            },
                          },
                          additionalProperties: false,
                        },
                        name: {
                          description: 'Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.',
                          type: 'string',
                        },
                        ports: {
                          description: 'List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.',
                          type: ['array', 'null'],
                          items: {
                            description: 'ContainerPort represents a network port in a single container.',
                            required: ['containerPort'],
                            properties: {
                              containerPort: {
                                description: "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
                                type: 'integer',
                                format: 'int32',
                              },
                              hostIP: {
                                description: 'What host IP to bind the external port to.',
                                type: ['string', 'null'],
                              },
                              hostPort: {
                                description: 'Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.',
                                type: 'integer',
                                format: 'int32',
                              },
                              name: {
                                description: 'If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.',
                                type: ['string', 'null'],
                              },
                              protocol: {
                                description: 'Protocol for port. Must be UDP or TCP. Defaults to "TCP".',
                                type: ['string', 'null'],
                              },
                            },
                            additionalProperties: false,
                          },
                          'x-kubernetes-patch-merge-key': 'containerPort',
                          'x-kubernetes-patch-strategy': 'merge',
                        },
                        readinessProbe: {
                          description: 'Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.',
                          properties: {
                            exec: {
                              description: 'ExecAction describes a "run in container" action.',
                              properties: {
                                command: {
                                  description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                              },
                              additionalProperties: false,
                            },
                            failureThreshold: {
                              description: 'Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            httpGet: {
                              description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                              required: ['port'],
                              properties: {
                                host: {
                                  description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                  type: ['string', 'null'],
                                },
                                httpHeaders: {
                                  description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                  type: ['array', 'null'],
                                  items: {
                                    description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                    required: ['name', 'value'],
                                    properties: {
                                      name: {
                                        description: 'The header field name',
                                        type: 'string',
                                      },
                                      value: {
                                        description: 'The header field value',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                path: {
                                  description: 'Path to access on the HTTP server.',
                                  type: ['string', 'null'],
                                },
                                port: {
                                  oneOf: [
                                    {
                                      type: ['string', 'null'],
                                    },
                                    {
                                      type: 'integer',
                                    },
                                  ],
                                },
                                scheme: {
                                  description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            initialDelaySeconds: {
                              description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                              type: 'integer',
                              format: 'int32',
                            },
                            periodSeconds: {
                              description: 'How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            successThreshold: {
                              description: 'Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            tcpSocket: {
                              description: 'TCPSocketAction describes an action based on opening a socket',
                              required: ['port'],
                              properties: {
                                host: {
                                  description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                  type: ['string', 'null'],
                                },
                                port: {
                                  oneOf: [
                                    {
                                      type: ['string', 'null'],
                                    },
                                    {
                                      type: 'integer',
                                    },
                                  ],
                                },
                              },
                              additionalProperties: false,
                            },
                            timeoutSeconds: {
                              description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                              type: 'integer',
                              format: 'int32',
                            },
                          },
                          additionalProperties: false,
                        },
                        resources: {
                          description: 'ResourceRequirements describes the compute resource requirements.',
                          properties: {
                            limits: {
                              description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/',
                              type: 'object',
                              properties: {
                                cpu: {
                                  type: ['string', 'null'],
                                },
                                memory: {
                                  type: ['string', 'null'],
                                },
                              },
                            },
                            requests: {
                              description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/',
                              type: 'object',
                              properties: {
                                cpu: {
                                  type: ['string', 'null'],
                                },
                                memory: {
                                  type: ['string', 'null'],
                                },
                              },
                            },
                          },
                          additionalProperties: false,
                        },
                        securityContext: {
                          description: 'SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.',
                          properties: {
                            allowPrivilegeEscalation: {
                              description: 'AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN',
                              type: 'boolean',
                            },
                            capabilities: {
                              description: 'Adds and removes POSIX capabilities from running containers.',
                              properties: {
                                add: {
                                  description: 'Added capabilities',
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                                drop: {
                                  description: 'Removed capabilities',
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                              },
                              additionalProperties: false,
                            },
                            privileged: {
                              description: 'Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.',
                              type: 'boolean',
                            },
                            readOnlyRootFilesystem: {
                              description: 'Whether this container has a read-only root filesystem. Default is false.',
                              type: 'boolean',
                            },
                            runAsGroup: {
                              description: 'The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                              type: 'integer',
                              format: 'int64',
                            },
                            runAsNonRoot: {
                              description: 'Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                              type: 'boolean',
                            },
                            runAsUser: {
                              description: 'The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                              type: 'integer',
                              format: 'int64',
                            },
                            seLinuxOptions: {
                              description: 'SELinuxOptions are the labels to be applied to the container',
                              properties: {
                                level: {
                                  description: 'Level is SELinux level label that applies to the container.',
                                  type: ['string', 'null'],
                                },
                                role: {
                                  description: 'Role is a SELinux role label that applies to the container.',
                                  type: ['string', 'null'],
                                },
                                type: {
                                  description: 'Type is a SELinux type label that applies to the container.',
                                  type: ['string', 'null'],
                                },
                                user: {
                                  description: 'User is a SELinux user label that applies to the container.',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          additionalProperties: false,
                        },
                        stdin: {
                          description: 'Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.',
                          type: 'boolean',
                        },
                        stdinOnce: {
                          description:
                            'Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false',
                          type: 'boolean',
                        },
                        terminationMessagePath: {
                          description: "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                          type: ['string', 'null'],
                        },
                        terminationMessagePolicy: {
                          description: 'Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.',
                          type: ['string', 'null'],
                        },
                        tty: {
                          description: "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                          type: 'boolean',
                        },
                        volumeDevices: {
                          description: 'volumeDevices is the list of block devices to be used by the container. This is an alpha feature and may change in the future.',
                          type: ['array', 'null'],
                          items: {
                            description: 'volumeDevice describes a mapping of a raw block device within a container.',
                            required: ['name', 'devicePath'],
                            properties: {
                              devicePath: {
                                description: 'devicePath is the path inside of the container that the device will be mapped to.',
                                type: 'string',
                              },
                              name: {
                                description: 'name must match the name of a persistentVolumeClaim in the pod',
                                type: 'string',
                              },
                            },
                            additionalProperties: false,
                          },
                          'x-kubernetes-patch-merge-key': 'devicePath',
                          'x-kubernetes-patch-strategy': 'merge',
                        },
                        volumeMounts: {
                          description: "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                          type: ['array', 'null'],
                          items: {
                            description: 'VolumeMount describes a mounting of a Volume within a container.',
                            required: ['name', 'mountPath'],
                            properties: {
                              mountPath: {
                                description: "Path within the container at which the volume should be mounted.  Must not contain ':'.",
                                type: 'string',
                              },
                              mountPropagation: {
                                description: 'mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.',
                                type: ['string', 'null'],
                              },
                              name: {
                                description: 'This must match the Name of a Volume.',
                                type: 'string',
                              },
                              readOnly: {
                                description: 'Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.',
                                type: 'boolean',
                              },
                              subPath: {
                                description: 'Path within the volume from which the container\'s volume should be mounted. Defaults to "" (volume\'s root).',
                                type: ['string', 'null'],
                              },
                            },
                            additionalProperties: false,
                          },
                          'x-kubernetes-patch-merge-key': 'mountPath',
                          'x-kubernetes-patch-strategy': 'merge',
                        },
                        workingDir: {
                          description: "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                          type: ['string', 'null'],
                        },
                      },
                      additionalProperties: false,
                    },
                    'x-kubernetes-patch-merge-key': 'name',
                    'x-kubernetes-patch-strategy': 'merge',
                  },
                  dnsConfig: {
                    description: 'PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.',
                    properties: {
                      nameservers: {
                        description: 'A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.',
                        type: ['array', 'null'],
                        items: {
                          type: ['string', 'null'],
                        },
                      },
                      options: {
                        description: 'A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.',
                        type: ['array', 'null'],
                        items: {
                          description: 'PodDNSConfigOption defines DNS resolver options of a pod.',
                          properties: {
                            name: {
                              description: 'Required.',
                              type: ['string', 'null'],
                            },
                            value: {
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                      },
                      searches: {
                        description: 'A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.',
                        type: ['array', 'null'],
                        items: {
                          type: ['string', 'null'],
                        },
                      },
                    },
                    additionalProperties: false,
                  },
                  dnsPolicy: {
                    description: "Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.",
                    type: ['string', 'null'],
                  },
                  hostAliases: {
                    description: "HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.",
                    type: ['array', 'null'],
                    items: {
                      description: "HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.",
                      properties: {
                        hostnames: {
                          description: 'Hostnames for the above IP address.',
                          type: ['array', 'null'],
                          items: {
                            type: ['string', 'null'],
                          },
                        },
                        ip: {
                          description: 'IP address of the host file entry.',
                          type: ['string', 'null'],
                        },
                      },
                      additionalProperties: false,
                    },
                    'x-kubernetes-patch-merge-key': 'ip',
                    'x-kubernetes-patch-strategy': 'merge',
                  },
                  hostIPC: {
                    description: "Use the host's ipc namespace. Optional: Default to false.",
                    type: 'boolean',
                  },
                  hostNetwork: {
                    description: "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.",
                    type: 'boolean',
                  },
                  hostPID: {
                    description: "Use the host's pid namespace. Optional: Default to false.",
                    type: 'boolean',
                  },
                  hostname: {
                    description: "Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.",
                    type: ['string', 'null'],
                  },
                  imagePullSecrets: {
                    description: 'ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod',
                    type: ['array', 'null'],
                    items: {
                      description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                      properties: {
                        name: {
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                          type: ['string', 'null'],
                        },
                      },
                      additionalProperties: false,
                    },
                    'x-kubernetes-patch-merge-key': 'name',
                    'x-kubernetes-patch-strategy': 'merge',
                  },
                  initContainers: {
                    description:
                      'List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/',
                    type: ['array', 'null'],
                    items: {
                      description: 'A single application container that you want to run within a pod.',
                      required: ['name'],
                      properties: {
                        args: {
                          description:
                            "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                          type: ['array', 'null'],
                          items: {
                            type: ['string', 'null'],
                          },
                        },
                        command: {
                          description:
                            "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                          type: ['array', 'null'],
                          items: {
                            type: ['string', 'null'],
                          },
                        },
                        env: {
                          description: 'List of environment variables to set in the container. Cannot be updated.',
                          type: ['array', 'null'],
                          items: {
                            description: 'EnvVar represents an environment variable present in a Container.',
                            required: ['name'],
                            properties: {
                              name: {
                                description: 'Name of the environment variable. Must be a C_IDENTIFIER.',
                                type: 'string',
                              },
                              value: {
                                description: 'Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".',
                                type: ['string', 'null'],
                              },
                              valueFrom: {
                                description: 'EnvVarSource represents a source for the value of an EnvVar.',
                                properties: {
                                  configMapKeyRef: {
                                    description: 'Selects a key from a ConfigMap.',
                                    required: ['key'],
                                    properties: {
                                      key: {
                                        description: 'The key to select.',
                                        type: 'string',
                                      },
                                      name: {
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                        type: ['string', 'null'],
                                      },
                                      optional: {
                                        description: "Specify whether the ConfigMap or it's key must be defined",
                                        type: 'boolean',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  fieldRef: {
                                    description: 'ObjectFieldSelector selects an APIVersioned field of an object.',
                                    required: ['fieldPath'],
                                    properties: {
                                      apiVersion: {
                                        description: 'Version of the schema the FieldPath is written in terms of, defaults to "v1".',
                                        type: ['string', 'null'],
                                      },
                                      fieldPath: {
                                        description: 'Path of the field to select in the specified API version.',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  resourceFieldRef: {
                                    description: 'ResourceFieldSelector represents container resources (cpu, memory) and their output format',
                                    required: ['resource'],
                                    properties: {
                                      containerName: {
                                        description: 'Container name: required for volumes, optional for env vars',
                                        type: ['string', 'null'],
                                      },
                                      divisor: {
                                        oneOf: [
                                          {
                                            type: ['string', 'null'],
                                          },
                                          {
                                            type: 'integer',
                                          },
                                        ],
                                      },
                                      resource: {
                                        description: 'Required: resource to select',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  secretKeyRef: {
                                    description: 'SecretKeySelector selects a key of a Secret.',
                                    required: ['key'],
                                    properties: {
                                      key: {
                                        description: 'The key of the secret to select from.  Must be a valid secret key.',
                                        type: 'string',
                                      },
                                      name: {
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                        type: ['string', 'null'],
                                      },
                                      optional: {
                                        description: "Specify whether the Secret or it's key must be defined",
                                        type: 'boolean',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                additionalProperties: false,
                              },
                            },
                            additionalProperties: false,
                          },
                          'x-kubernetes-patch-merge-key': 'name',
                          'x-kubernetes-patch-strategy': 'merge',
                        },
                        envFrom: {
                          description: 'List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.',
                          type: ['array', 'null'],
                          items: {
                            description: 'EnvFromSource represents the source of a set of ConfigMaps',
                            properties: {
                              configMapRef: {
                                description: "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
                                properties: {
                                  name: {
                                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                    type: ['string', 'null'],
                                  },
                                  optional: {
                                    description: 'Specify whether the ConfigMap must be defined',
                                    type: 'boolean',
                                  },
                                },
                                additionalProperties: false,
                              },
                              prefix: {
                                description: 'An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.',
                                type: ['string', 'null'],
                              },
                              secretRef: {
                                description: "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
                                properties: {
                                  name: {
                                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                    type: ['string', 'null'],
                                  },
                                  optional: {
                                    description: 'Specify whether the Secret must be defined',
                                    type: 'boolean',
                                  },
                                },
                                additionalProperties: false,
                              },
                            },
                            additionalProperties: false,
                          },
                        },
                        image: {
                          description: 'Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.',
                          type: ['string', 'null'],
                        },
                        imagePullPolicy: {
                          description: 'Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images',
                          type: ['string', 'null'],
                        },
                        lifecycle: {
                          description: 'Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.',
                          properties: {
                            postStart: {
                              description: 'Handler defines a specific action that should be taken',
                              properties: {
                                exec: {
                                  description: 'ExecAction describes a "run in container" action.',
                                  properties: {
                                    command: {
                                      description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                      type: ['array', 'null'],
                                      items: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                httpGet: {
                                  description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                                  required: ['port'],
                                  properties: {
                                    host: {
                                      description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                      type: ['string', 'null'],
                                    },
                                    httpHeaders: {
                                      description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                        required: ['name', 'value'],
                                        properties: {
                                          name: {
                                            description: 'The header field name',
                                            type: 'string',
                                          },
                                          value: {
                                            description: 'The header field value',
                                            type: 'string',
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    path: {
                                      description: 'Path to access on the HTTP server.',
                                      type: ['string', 'null'],
                                    },
                                    port: {
                                      oneOf: [
                                        {
                                          type: ['string', 'null'],
                                        },
                                        {
                                          type: 'integer',
                                        },
                                      ],
                                    },
                                    scheme: {
                                      description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                      type: ['string', 'null'],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                tcpSocket: {
                                  description: 'TCPSocketAction describes an action based on opening a socket',
                                  required: ['port'],
                                  properties: {
                                    host: {
                                      description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                      type: ['string', 'null'],
                                    },
                                    port: {
                                      oneOf: [
                                        {
                                          type: ['string', 'null'],
                                        },
                                        {
                                          type: 'integer',
                                        },
                                      ],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                              },
                              additionalProperties: false,
                            },
                            preStop: {
                              description: 'Handler defines a specific action that should be taken',
                              properties: {
                                exec: {
                                  description: 'ExecAction describes a "run in container" action.',
                                  properties: {
                                    command: {
                                      description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                      type: ['array', 'null'],
                                      items: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                httpGet: {
                                  description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                                  required: ['port'],
                                  properties: {
                                    host: {
                                      description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                      type: ['string', 'null'],
                                    },
                                    httpHeaders: {
                                      description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                        required: ['name', 'value'],
                                        properties: {
                                          name: {
                                            description: 'The header field name',
                                            type: 'string',
                                          },
                                          value: {
                                            description: 'The header field value',
                                            type: 'string',
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    path: {
                                      description: 'Path to access on the HTTP server.',
                                      type: ['string', 'null'],
                                    },
                                    port: {
                                      oneOf: [
                                        {
                                          type: ['string', 'null'],
                                        },
                                        {
                                          type: 'integer',
                                        },
                                      ],
                                    },
                                    scheme: {
                                      description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                      type: ['string', 'null'],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                tcpSocket: {
                                  description: 'TCPSocketAction describes an action based on opening a socket',
                                  required: ['port'],
                                  properties: {
                                    host: {
                                      description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                      type: ['string', 'null'],
                                    },
                                    port: {
                                      oneOf: [
                                        {
                                          type: ['string', 'null'],
                                        },
                                        {
                                          type: 'integer',
                                        },
                                      ],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          additionalProperties: false,
                        },
                        livenessProbe: {
                          description: 'Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.',
                          properties: {
                            exec: {
                              description: 'ExecAction describes a "run in container" action.',
                              properties: {
                                command: {
                                  description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                              },
                              additionalProperties: false,
                            },
                            failureThreshold: {
                              description: 'Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            httpGet: {
                              description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                              required: ['port'],
                              properties: {
                                host: {
                                  description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                  type: ['string', 'null'],
                                },
                                httpHeaders: {
                                  description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                  type: ['array', 'null'],
                                  items: {
                                    description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                    required: ['name', 'value'],
                                    properties: {
                                      name: {
                                        description: 'The header field name',
                                        type: 'string',
                                      },
                                      value: {
                                        description: 'The header field value',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                path: {
                                  description: 'Path to access on the HTTP server.',
                                  type: ['string', 'null'],
                                },
                                port: {
                                  oneOf: [
                                    {
                                      type: ['string', 'null'],
                                    },
                                    {
                                      type: 'integer',
                                    },
                                  ],
                                },
                                scheme: {
                                  description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            initialDelaySeconds: {
                              description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                              type: 'integer',
                              format: 'int32',
                            },
                            periodSeconds: {
                              description: 'How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            successThreshold: {
                              description: 'Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            tcpSocket: {
                              description: 'TCPSocketAction describes an action based on opening a socket',
                              required: ['port'],
                              properties: {
                                host: {
                                  description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                  type: ['string', 'null'],
                                },
                                port: {
                                  oneOf: [
                                    {
                                      type: ['string', 'null'],
                                    },
                                    {
                                      type: 'integer',
                                    },
                                  ],
                                },
                              },
                              additionalProperties: false,
                            },
                            timeoutSeconds: {
                              description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                              type: 'integer',
                              format: 'int32',
                            },
                          },
                          additionalProperties: false,
                        },
                        name: {
                          description: 'Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.',
                          type: 'string',
                        },
                        ports: {
                          description: 'List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.',
                          type: ['array', 'null'],
                          items: {
                            description: 'ContainerPort represents a network port in a single container.',
                            required: ['containerPort'],
                            properties: {
                              containerPort: {
                                description: "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
                                type: 'integer',
                                format: 'int32',
                              },
                              hostIP: {
                                description: 'What host IP to bind the external port to.',
                                type: ['string', 'null'],
                              },
                              hostPort: {
                                description: 'Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.',
                                type: 'integer',
                                format: 'int32',
                              },
                              name: {
                                description: 'If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.',
                                type: ['string', 'null'],
                              },
                              protocol: {
                                description: 'Protocol for port. Must be UDP or TCP. Defaults to "TCP".',
                                type: ['string', 'null'],
                              },
                            },
                            additionalProperties: false,
                          },
                          'x-kubernetes-patch-merge-key': 'containerPort',
                          'x-kubernetes-patch-strategy': 'merge',
                        },
                        readinessProbe: {
                          description: 'Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.',
                          properties: {
                            exec: {
                              description: 'ExecAction describes a "run in container" action.',
                              properties: {
                                command: {
                                  description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                              },
                              additionalProperties: false,
                            },
                            failureThreshold: {
                              description: 'Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            httpGet: {
                              description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                              required: ['port'],
                              properties: {
                                host: {
                                  description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                  type: ['string', 'null'],
                                },
                                httpHeaders: {
                                  description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                  type: ['array', 'null'],
                                  items: {
                                    description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                    required: ['name', 'value'],
                                    properties: {
                                      name: {
                                        description: 'The header field name',
                                        type: 'string',
                                      },
                                      value: {
                                        description: 'The header field value',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                path: {
                                  description: 'Path to access on the HTTP server.',
                                  type: ['string', 'null'],
                                },
                                port: {
                                  oneOf: [
                                    {
                                      type: ['string', 'null'],
                                    },
                                    {
                                      type: 'integer',
                                    },
                                  ],
                                },
                                scheme: {
                                  description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            initialDelaySeconds: {
                              description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                              type: 'integer',
                              format: 'int32',
                            },
                            periodSeconds: {
                              description: 'How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            successThreshold: {
                              description: 'Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            tcpSocket: {
                              description: 'TCPSocketAction describes an action based on opening a socket',
                              required: ['port'],
                              properties: {
                                host: {
                                  description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                  type: ['string', 'null'],
                                },
                                port: {
                                  oneOf: [
                                    {
                                      type: ['string', 'null'],
                                    },
                                    {
                                      type: 'integer',
                                    },
                                  ],
                                },
                              },
                              additionalProperties: false,
                            },
                            timeoutSeconds: {
                              description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                              type: 'integer',
                              format: 'int32',
                            },
                          },
                          additionalProperties: false,
                        },
                        resources: {
                          description: 'ResourceRequirements describes the compute resource requirements.',
                          properties: {
                            limits: {
                              description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/',
                              type: 'object',
                              additionalProperties: {
                                oneOf: [
                                  {
                                    type: ['string', 'null'],
                                  },
                                  {
                                    type: 'integer',
                                  },
                                ],
                              },
                            },
                            requests: {
                              description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/',
                              type: 'object',
                              additionalProperties: {
                                oneOf: [
                                  {
                                    type: ['string', 'null'],
                                  },
                                  {
                                    type: 'integer',
                                  },
                                ],
                              },
                            },
                          },
                          additionalProperties: false,
                        },
                        securityContext: {
                          description: 'SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.',
                          properties: {
                            allowPrivilegeEscalation: {
                              description: 'AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN',
                              type: 'boolean',
                            },
                            capabilities: {
                              description: 'Adds and removes POSIX capabilities from running containers.',
                              properties: {
                                add: {
                                  description: 'Added capabilities',
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                                drop: {
                                  description: 'Removed capabilities',
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                              },
                              additionalProperties: false,
                            },
                            privileged: {
                              description: 'Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.',
                              type: 'boolean',
                            },
                            readOnlyRootFilesystem: {
                              description: 'Whether this container has a read-only root filesystem. Default is false.',
                              type: 'boolean',
                            },
                            runAsGroup: {
                              description: 'The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                              type: 'integer',
                              format: 'int64',
                            },
                            runAsNonRoot: {
                              description: 'Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                              type: 'boolean',
                            },
                            runAsUser: {
                              description: 'The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                              type: 'integer',
                              format: 'int64',
                            },
                            seLinuxOptions: {
                              description: 'SELinuxOptions are the labels to be applied to the container',
                              properties: {
                                level: {
                                  description: 'Level is SELinux level label that applies to the container.',
                                  type: ['string', 'null'],
                                },
                                role: {
                                  description: 'Role is a SELinux role label that applies to the container.',
                                  type: ['string', 'null'],
                                },
                                type: {
                                  description: 'Type is a SELinux type label that applies to the container.',
                                  type: ['string', 'null'],
                                },
                                user: {
                                  description: 'User is a SELinux user label that applies to the container.',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          additionalProperties: false,
                        },
                        stdin: {
                          description: 'Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.',
                          type: 'boolean',
                        },
                        stdinOnce: {
                          description:
                            'Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false',
                          type: 'boolean',
                        },
                        terminationMessagePath: {
                          description: "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                          type: ['string', 'null'],
                        },
                        terminationMessagePolicy: {
                          description: 'Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.',
                          type: ['string', 'null'],
                        },
                        tty: {
                          description: "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                          type: 'boolean',
                        },
                        volumeDevices: {
                          description: 'volumeDevices is the list of block devices to be used by the container. This is an alpha feature and may change in the future.',
                          type: ['array', 'null'],
                          items: {
                            description: 'volumeDevice describes a mapping of a raw block device within a container.',
                            required: ['name', 'devicePath'],
                            properties: {
                              devicePath: {
                                description: 'devicePath is the path inside of the container that the device will be mapped to.',
                                type: 'string',
                              },
                              name: {
                                description: 'name must match the name of a persistentVolumeClaim in the pod',
                                type: 'string',
                              },
                            },
                            additionalProperties: false,
                          },
                          'x-kubernetes-patch-merge-key': 'devicePath',
                          'x-kubernetes-patch-strategy': 'merge',
                        },
                        volumeMounts: {
                          description: "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                          type: ['array', 'null'],
                          items: {
                            description: 'VolumeMount describes a mounting of a Volume within a container.',
                            required: ['name', 'mountPath'],
                            properties: {
                              mountPath: {
                                description: "Path within the container at which the volume should be mounted.  Must not contain ':'.",
                                type: 'string',
                              },
                              mountPropagation: {
                                description: 'mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.',
                                type: ['string', 'null'],
                              },
                              name: {
                                description: 'This must match the Name of a Volume.',
                                type: 'string',
                              },
                              readOnly: {
                                description: 'Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.',
                                type: 'boolean',
                              },
                              subPath: {
                                description: 'Path within the volume from which the container\'s volume should be mounted. Defaults to "" (volume\'s root).',
                                type: ['string', 'null'],
                              },
                            },
                            additionalProperties: false,
                          },
                          'x-kubernetes-patch-merge-key': 'mountPath',
                          'x-kubernetes-patch-strategy': 'merge',
                        },
                        workingDir: {
                          description: "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                          type: ['string', 'null'],
                        },
                      },
                      additionalProperties: false,
                    },
                    'x-kubernetes-patch-merge-key': 'name',
                    'x-kubernetes-patch-strategy': 'merge',
                  },
                  nodeName: {
                    description: 'NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.',
                    type: ['string', 'null'],
                  },
                  nodeSelector: {
                    description: "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
                    type: 'object',
                    additionalProperties: {
                      type: ['string', 'null'],
                    },
                  },
                  priority: {
                    description: 'The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.',
                    type: 'integer',
                    format: 'int32',
                  },
                  priorityClassName: {
                    description: 'If specified, indicates the pod\'s priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.',
                    type: ['string', 'null'],
                  },
                  readinessGates: {
                    description: 'If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://github.com/kubernetes/community/blob/master/keps/sig-network/0007-pod-ready%2B%2B.md',
                    type: ['array', 'null'],
                    items: {
                      description: 'PodReadinessGate contains the reference to a pod condition',
                      required: ['conditionType'],
                      properties: {
                        conditionType: {
                          description: "ConditionType refers to a condition in the pod's condition list with matching type.",
                          type: 'string',
                        },
                      },
                      additionalProperties: false,
                    },
                  },
                  restartPolicy: {
                    description: 'Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy',
                    type: ['string', 'null'],
                  },
                  schedulerName: {
                    description: 'If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.',
                    type: ['string', 'null'],
                  },
                  securityContext: {
                    description: 'PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.',
                    properties: {
                      fsGroup: {
                        description: "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume.",
                        type: 'integer',
                        format: 'int64',
                      },
                      runAsGroup: {
                        description: 'The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.',
                        type: 'integer',
                        format: 'int64',
                      },
                      runAsNonRoot: {
                        description: 'Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                        type: 'boolean',
                      },
                      runAsUser: {
                        description: 'The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.',
                        type: 'integer',
                        format: 'int64',
                      },
                      seLinuxOptions: {
                        description: 'SELinuxOptions are the labels to be applied to the container',
                        properties: {
                          level: {
                            description: 'Level is SELinux level label that applies to the container.',
                            type: ['string', 'null'],
                          },
                          role: {
                            description: 'Role is a SELinux role label that applies to the container.',
                            type: ['string', 'null'],
                          },
                          type: {
                            description: 'Type is a SELinux type label that applies to the container.',
                            type: ['string', 'null'],
                          },
                          user: {
                            description: 'User is a SELinux user label that applies to the container.',
                            type: ['string', 'null'],
                          },
                        },
                        additionalProperties: false,
                      },
                      supplementalGroups: {
                        description: "A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.",
                        type: ['array', 'null'],
                        items: {
                          type: 'integer',
                          format: 'int64',
                        },
                      },
                      sysctls: {
                        description: 'Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.',
                        type: ['array', 'null'],
                        items: {
                          description: 'Sysctl defines a kernel parameter to be set',
                          required: ['name', 'value'],
                          properties: {
                            name: {
                              description: 'Name of a property to set',
                              type: 'string',
                            },
                            value: {
                              description: 'Value of a property to set',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                      },
                    },
                    additionalProperties: false,
                  },
                  serviceAccount: {
                    description: 'DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.',
                    type: ['string', 'null'],
                  },
                  serviceAccountName: {
                    description: 'ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/',
                    type: ['string', 'null'],
                  },
                  shareProcessNamespace: {
                    description: 'Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false. This field is alpha-level and is honored only by servers that enable the PodShareProcessNamespace feature.',
                    type: 'boolean',
                  },
                  subdomain: {
                    description: 'If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.',
                    type: ['string', 'null'],
                  },
                  terminationGracePeriodSeconds: {
                    description:
                      'Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.',
                    type: 'integer',
                    format: 'int64',
                  },
                  tolerations: {
                    description: "If specified, the pod's tolerations.",
                    type: ['array', 'null'],
                    items: {
                      description: 'The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.',
                      properties: {
                        effect: {
                          description: 'Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.',
                          type: ['string', 'null'],
                        },
                        key: {
                          description: 'Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.',
                          type: ['string', 'null'],
                        },
                        operator: {
                          description: "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                          type: ['string', 'null'],
                        },
                        tolerationSeconds: {
                          description: 'TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.',
                          type: 'integer',
                          format: 'int64',
                        },
                        value: {
                          description: 'Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.',
                          type: ['string', 'null'],
                        },
                      },
                      additionalProperties: false,
                    },
                  },
                  volumes: {
                    description: 'List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes',
                    type: ['array', 'null'],
                    items: {
                      description: 'Volume represents a named volume in a pod that may be accessed by any container in the pod.',
                      required: ['name'],
                      properties: {
                        awsElasticBlockStore: {
                          description: 'Represents a Persistent Disk resource in AWS.\n\nAn AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.',
                          required: ['volumeID'],
                          properties: {
                            fsType: {
                              description: 'Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore',
                              type: ['string', 'null'],
                            },
                            partition: {
                              description: 'The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).',
                              type: 'integer',
                              format: 'int32',
                            },
                            readOnly: {
                              description: 'Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore',
                              type: 'boolean',
                            },
                            volumeID: {
                              description: 'Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        azureDisk: {
                          description: 'AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.',
                          required: ['diskName', 'diskURI'],
                          properties: {
                            cachingMode: {
                              description: 'Host Caching mode: None, Read Only, Read Write.',
                              type: ['string', 'null'],
                            },
                            diskName: {
                              description: 'The Name of the data disk in the blob storage',
                              type: 'string',
                            },
                            diskURI: {
                              description: 'The URI the data disk in the blob storage',
                              type: 'string',
                            },
                            fsType: {
                              description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                              type: ['string', 'null'],
                            },
                            kind: {
                              description: 'Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared',
                              type: ['string', 'null'],
                            },
                            readOnly: {
                              description: 'Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                              type: 'boolean',
                            },
                          },
                          additionalProperties: false,
                        },
                        azureFile: {
                          description: 'AzureFile represents an Azure File Service mount on the host and bind mount to the pod.',
                          required: ['secretName', 'shareName'],
                          properties: {
                            readOnly: {
                              description: 'Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                              type: 'boolean',
                            },
                            secretName: {
                              description: 'the name of secret that contains Azure Storage Account Name and Key',
                              type: 'string',
                            },
                            shareName: {
                              description: 'Share Name',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        cephfs: {
                          description: 'Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.',
                          required: ['monitors'],
                          properties: {
                            monitors: {
                              description: 'Required: Monitors is a collection of Ceph monitors More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it',
                              type: 'array',
                              items: {
                                type: ['string', 'null'],
                              },
                            },
                            path: {
                              description: 'Optional: Used as the mounted root, rather than the full Ceph tree, default is /',
                              type: ['string', 'null'],
                            },
                            readOnly: {
                              description: 'Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it',
                              type: 'boolean',
                            },
                            secretFile: {
                              description: 'Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it',
                              type: ['string', 'null'],
                            },
                            secretRef: {
                              description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                              properties: {
                                name: {
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            user: {
                              description: 'Optional: User is the rados user name, default is admin More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                        cinder: {
                          description: 'Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.',
                          required: ['volumeID'],
                          properties: {
                            fsType: {
                              description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md',
                              type: ['string', 'null'],
                            },
                            readOnly: {
                              description: 'Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md',
                              type: 'boolean',
                            },
                            secretRef: {
                              description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                              properties: {
                                name: {
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            volumeID: {
                              description: 'volume id used to identify the volume in cinder More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        configMap: {
                          description: "Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.",
                          properties: {
                            defaultMode: {
                              description: 'Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                              type: 'integer',
                              format: 'int32',
                            },
                            items: {
                              description:
                                "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                              type: ['array', 'null'],
                              items: {
                                description: 'Maps a string key to a path within a volume.',
                                required: ['key', 'path'],
                                properties: {
                                  key: {
                                    description: 'The key to project.',
                                    type: 'string',
                                  },
                                  mode: {
                                    description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                    type: 'integer',
                                    format: 'int32',
                                  },
                                  path: {
                                    description: "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                                    type: 'string',
                                  },
                                },
                                additionalProperties: false,
                              },
                            },
                            name: {
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                              type: ['string', 'null'],
                            },
                            optional: {
                              description: "Specify whether the ConfigMap or it's keys must be defined",
                              type: 'boolean',
                            },
                          },
                          additionalProperties: false,
                        },
                        downwardAPI: {
                          description: 'DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.',
                          properties: {
                            defaultMode: {
                              description: 'Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                              type: 'integer',
                              format: 'int32',
                            },
                            items: {
                              description: 'Items is a list of downward API volume file',
                              type: ['array', 'null'],
                              items: {
                                description: 'DownwardAPIVolumeFile represents information to create the file containing the pod field',
                                required: ['path'],
                                properties: {
                                  fieldRef: {
                                    description: 'ObjectFieldSelector selects an APIVersioned field of an object.',
                                    required: ['fieldPath'],
                                    properties: {
                                      apiVersion: {
                                        description: 'Version of the schema the FieldPath is written in terms of, defaults to "v1".',
                                        type: ['string', 'null'],
                                      },
                                      fieldPath: {
                                        description: 'Path of the field to select in the specified API version.',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  mode: {
                                    description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                    type: 'integer',
                                    format: 'int32',
                                  },
                                  path: {
                                    description: "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
                                    type: 'string',
                                  },
                                  resourceFieldRef: {
                                    description: 'ResourceFieldSelector represents container resources (cpu, memory) and their output format',
                                    required: ['resource'],
                                    properties: {
                                      containerName: {
                                        description: 'Container name: required for volumes, optional for env vars',
                                        type: ['string', 'null'],
                                      },
                                      divisor: {
                                        oneOf: [
                                          {
                                            type: ['string', 'null'],
                                          },
                                          {
                                            type: 'integer',
                                          },
                                        ],
                                      },
                                      resource: {
                                        description: 'Required: resource to select',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                additionalProperties: false,
                              },
                            },
                          },
                          additionalProperties: false,
                        },
                        emptyDir: {
                          description: 'Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.',
                          properties: {
                            medium: {
                              description: 'What type of storage medium should back this directory. The default is "" which means to use the node\'s default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir',
                              type: ['string', 'null'],
                            },
                            sizeLimit: {
                              oneOf: [
                                {
                                  type: ['string', 'null'],
                                },
                                {
                                  type: 'integer',
                                },
                              ],
                            },
                          },
                          additionalProperties: false,
                        },
                        fc: {
                          description: 'Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.',
                          properties: {
                            fsType: {
                              description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                              type: ['string', 'null'],
                            },
                            lun: {
                              description: 'Optional: FC target lun number',
                              type: 'integer',
                              format: 'int32',
                            },
                            readOnly: {
                              description: 'Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                              type: 'boolean',
                            },
                            targetWWNs: {
                              description: 'Optional: FC target worldwide names (WWNs)',
                              type: ['array', 'null'],
                              items: {
                                type: ['string', 'null'],
                              },
                            },
                            wwids: {
                              description: 'Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.',
                              type: ['array', 'null'],
                              items: {
                                type: ['string', 'null'],
                              },
                            },
                          },
                          additionalProperties: false,
                        },
                        flexVolume: {
                          description: 'FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.',
                          required: ['driver'],
                          properties: {
                            driver: {
                              description: 'Driver is the name of the driver to use for this volume.',
                              type: 'string',
                            },
                            fsType: {
                              description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.',
                              type: ['string', 'null'],
                            },
                            options: {
                              description: 'Optional: Extra command options if any.',
                              type: 'object',
                              additionalProperties: {
                                type: ['string', 'null'],
                              },
                            },
                            readOnly: {
                              description: 'Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                              type: 'boolean',
                            },
                            secretRef: {
                              description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                              properties: {
                                name: {
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          additionalProperties: false,
                        },
                        flocker: {
                          description: 'Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.',
                          properties: {
                            datasetName: {
                              description: 'Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated',
                              type: ['string', 'null'],
                            },
                            datasetUUID: {
                              description: 'UUID of the dataset. This is unique identifier of a Flocker dataset',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                        gcePersistentDisk: {
                          description: 'Represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.',
                          required: ['pdName'],
                          properties: {
                            fsType: {
                              description: 'Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
                              type: ['string', 'null'],
                            },
                            partition: {
                              description: 'The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
                              type: 'integer',
                              format: 'int32',
                            },
                            pdName: {
                              description: 'Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
                              type: 'string',
                            },
                            readOnly: {
                              description: 'ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
                              type: 'boolean',
                            },
                          },
                          additionalProperties: false,
                        },
                        gitRepo: {
                          description: "Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.\n\nDEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.",
                          required: ['repository'],
                          properties: {
                            directory: {
                              description: "Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.",
                              type: ['string', 'null'],
                            },
                            repository: {
                              description: 'Repository URL',
                              type: 'string',
                            },
                            revision: {
                              description: 'Commit hash for the specified revision.',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                        glusterfs: {
                          description: 'Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.',
                          required: ['endpoints', 'path'],
                          properties: {
                            endpoints: {
                              description: 'EndpointsName is the endpoint name that details Glusterfs topology. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod',
                              type: 'string',
                            },
                            path: {
                              description: 'Path is the Glusterfs volume path. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod',
                              type: 'string',
                            },
                            readOnly: {
                              description: 'ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod',
                              type: 'boolean',
                            },
                          },
                          additionalProperties: false,
                        },
                        hostPath: {
                          description: 'Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.',
                          required: ['path'],
                          properties: {
                            path: {
                              description: 'Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath',
                              type: 'string',
                            },
                            type: {
                              description: 'Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                        iscsi: {
                          description: 'Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.',
                          required: ['targetPortal', 'iqn', 'lun'],
                          properties: {
                            chapAuthDiscovery: {
                              description: 'whether support iSCSI Discovery CHAP authentication',
                              type: 'boolean',
                            },
                            chapAuthSession: {
                              description: 'whether support iSCSI Session CHAP authentication',
                              type: 'boolean',
                            },
                            fsType: {
                              description: 'Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi',
                              type: ['string', 'null'],
                            },
                            initiatorName: {
                              description: 'Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.',
                              type: ['string', 'null'],
                            },
                            iqn: {
                              description: 'Target iSCSI Qualified Name.',
                              type: 'string',
                            },
                            iscsiInterface: {
                              description: "iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
                              type: ['string', 'null'],
                            },
                            lun: {
                              description: 'iSCSI Target Lun number.',
                              type: 'integer',
                              format: 'int32',
                            },
                            portals: {
                              description: 'iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).',
                              type: ['array', 'null'],
                              items: {
                                type: ['string', 'null'],
                              },
                            },
                            readOnly: {
                              description: 'ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.',
                              type: 'boolean',
                            },
                            secretRef: {
                              description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                              properties: {
                                name: {
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            targetPortal: {
                              description: 'iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        name: {
                          description: "Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                          type: 'string',
                        },
                        nfs: {
                          description: 'Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.',
                          required: ['server', 'path'],
                          properties: {
                            path: {
                              description: 'Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs',
                              type: 'string',
                            },
                            readOnly: {
                              description: 'ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs',
                              type: 'boolean',
                            },
                            server: {
                              description: 'Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        persistentVolumeClaim: {
                          description: "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).",
                          required: ['claimName'],
                          properties: {
                            claimName: {
                              description: 'ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims',
                              type: 'string',
                            },
                            readOnly: {
                              description: 'Will force the ReadOnly setting in VolumeMounts. Default false.',
                              type: 'boolean',
                            },
                          },
                          additionalProperties: false,
                        },
                        photonPersistentDisk: {
                          description: 'Represents a Photon Controller persistent disk resource.',
                          required: ['pdID'],
                          properties: {
                            fsType: {
                              description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                              type: ['string', 'null'],
                            },
                            pdID: {
                              description: 'ID that identifies Photon Controller persistent disk',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        portworxVolume: {
                          description: 'PortworxVolumeSource represents a Portworx volume resource.',
                          required: ['volumeID'],
                          properties: {
                            fsType: {
                              description: 'FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.',
                              type: ['string', 'null'],
                            },
                            readOnly: {
                              description: 'Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                              type: 'boolean',
                            },
                            volumeID: {
                              description: 'VolumeID uniquely identifies a Portworx volume',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        projected: {
                          description: 'Represents a projected volume source',
                          required: ['sources'],
                          properties: {
                            defaultMode: {
                              description: 'Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                              type: 'integer',
                              format: 'int32',
                            },
                            sources: {
                              description: 'list of volume projections',
                              type: 'array',
                              items: {
                                description: 'Projection that may be projected along with other supported volume types',
                                properties: {
                                  configMap: {
                                    description: "Adapts a ConfigMap into a projected volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.",
                                    properties: {
                                      items: {
                                        description:
                                          "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                                        type: ['array', 'null'],
                                        items: {
                                          description: 'Maps a string key to a path within a volume.',
                                          required: ['key', 'path'],
                                          properties: {
                                            key: {
                                              description: 'The key to project.',
                                              type: 'string',
                                            },
                                            mode: {
                                              description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                              type: 'integer',
                                              format: 'int32',
                                            },
                                            path: {
                                              description: "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                                              type: 'string',
                                            },
                                          },
                                          additionalProperties: false,
                                        },
                                      },
                                      name: {
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                        type: ['string', 'null'],
                                      },
                                      optional: {
                                        description: "Specify whether the ConfigMap or it's keys must be defined",
                                        type: 'boolean',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  downwardAPI: {
                                    description: 'Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.',
                                    properties: {
                                      items: {
                                        description: 'Items is a list of DownwardAPIVolume file',
                                        type: ['array', 'null'],
                                        items: {
                                          description: 'DownwardAPIVolumeFile represents information to create the file containing the pod field',
                                          required: ['path'],
                                          properties: {
                                            fieldRef: {
                                              description: 'ObjectFieldSelector selects an APIVersioned field of an object.',
                                              required: ['fieldPath'],
                                              properties: {
                                                apiVersion: {
                                                  description: 'Version of the schema the FieldPath is written in terms of, defaults to "v1".',
                                                  type: ['string', 'null'],
                                                },
                                                fieldPath: {
                                                  description: 'Path of the field to select in the specified API version.',
                                                  type: 'string',
                                                },
                                              },
                                              additionalProperties: false,
                                            },
                                            mode: {
                                              description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                              type: 'integer',
                                              format: 'int32',
                                            },
                                            path: {
                                              description: "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
                                              type: 'string',
                                            },
                                            resourceFieldRef: {
                                              description: 'ResourceFieldSelector represents container resources (cpu, memory) and their output format',
                                              required: ['resource'],
                                              properties: {
                                                containerName: {
                                                  description: 'Container name: required for volumes, optional for env vars',
                                                  type: ['string', 'null'],
                                                },
                                                divisor: {
                                                  oneOf: [
                                                    {
                                                      type: ['string', 'null'],
                                                    },
                                                    {
                                                      type: 'integer',
                                                    },
                                                  ],
                                                },
                                                resource: {
                                                  description: 'Required: resource to select',
                                                  type: 'string',
                                                },
                                              },
                                              additionalProperties: false,
                                            },
                                          },
                                          additionalProperties: false,
                                        },
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  secret: {
                                    description: "Adapts a secret into a projected volume.\n\nThe contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.",
                                    properties: {
                                      items: {
                                        description:
                                          "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                                        type: ['array', 'null'],
                                        items: {
                                          description: 'Maps a string key to a path within a volume.',
                                          required: ['key', 'path'],
                                          properties: {
                                            key: {
                                              description: 'The key to project.',
                                              type: 'string',
                                            },
                                            mode: {
                                              description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                              type: 'integer',
                                              format: 'int32',
                                            },
                                            path: {
                                              description: "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                                              type: 'string',
                                            },
                                          },
                                          additionalProperties: false,
                                        },
                                      },
                                      name: {
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                        type: ['string', 'null'],
                                      },
                                      optional: {
                                        description: 'Specify whether the Secret or its key must be defined',
                                        type: 'boolean',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  serviceAccountToken: {
                                    description: 'ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).',
                                    required: ['path'],
                                    properties: {
                                      audience: {
                                        description: 'Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.',
                                        type: ['string', 'null'],
                                      },
                                      expirationSeconds: {
                                        description: 'ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.',
                                        type: 'integer',
                                        format: 'int64',
                                      },
                                      path: {
                                        description: 'Path is the path relative to the mount point of the file to project the token into.',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                additionalProperties: false,
                              },
                            },
                          },
                          additionalProperties: false,
                        },
                        quobyte: {
                          description: 'Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.',
                          required: ['registry', 'volume'],
                          properties: {
                            group: {
                              description: 'Group to map volume access to Default is no group',
                              type: ['string', 'null'],
                            },
                            readOnly: {
                              description: 'ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.',
                              type: 'boolean',
                            },
                            registry: {
                              description: 'Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes',
                              type: 'string',
                            },
                            user: {
                              description: 'User to map volume access to Defaults to serivceaccount user',
                              type: ['string', 'null'],
                            },
                            volume: {
                              description: 'Volume is a string that references an already created Quobyte volume by name.',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        rbd: {
                          description: 'Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.',
                          required: ['monitors', 'image'],
                          properties: {
                            fsType: {
                              description: 'Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd',
                              type: ['string', 'null'],
                            },
                            image: {
                              description: 'The rados image name. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                              type: 'string',
                            },
                            keyring: {
                              description: 'Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                              type: ['string', 'null'],
                            },
                            monitors: {
                              description: 'A collection of Ceph monitors. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                              type: 'array',
                              items: {
                                type: ['string', 'null'],
                              },
                            },
                            pool: {
                              description: 'The rados pool name. Default is rbd. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                              type: ['string', 'null'],
                            },
                            readOnly: {
                              description: 'ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                              type: 'boolean',
                            },
                            secretRef: {
                              description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                              properties: {
                                name: {
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            user: {
                              description: 'The rados user name. Default is admin. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                        scaleIO: {
                          description: 'ScaleIOVolumeSource represents a persistent ScaleIO volume',
                          required: ['gateway', 'system', 'secretRef'],
                          properties: {
                            fsType: {
                              description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                              type: ['string', 'null'],
                            },
                            gateway: {
                              description: 'The host address of the ScaleIO API Gateway.',
                              type: 'string',
                            },
                            protectionDomain: {
                              description: 'The name of the ScaleIO Protection Domain for the configured storage.',
                              type: ['string', 'null'],
                            },
                            readOnly: {
                              description: 'Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                              type: 'boolean',
                            },
                            secretRef: {
                              description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                              properties: {
                                name: {
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            sslEnabled: {
                              description: 'Flag to enable/disable SSL communication with Gateway, default false',
                              type: 'boolean',
                            },
                            storageMode: {
                              description: 'Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.',
                              type: ['string', 'null'],
                            },
                            storagePool: {
                              description: 'The ScaleIO Storage Pool associated with the protection domain.',
                              type: ['string', 'null'],
                            },
                            system: {
                              description: 'The name of the storage system as configured in ScaleIO.',
                              type: 'string',
                            },
                            volumeName: {
                              description: 'The name of a volume already created in the ScaleIO system that is associated with this volume source.',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                        secret: {
                          description: "Adapts a Secret into a volume.\n\nThe contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.",
                          properties: {
                            defaultMode: {
                              description: 'Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                              type: 'integer',
                              format: 'int32',
                            },
                            items: {
                              description:
                                "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                              type: ['array', 'null'],
                              items: {
                                description: 'Maps a string key to a path within a volume.',
                                required: ['key', 'path'],
                                properties: {
                                  key: {
                                    description: 'The key to project.',
                                    type: 'string',
                                  },
                                  mode: {
                                    description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                    type: 'integer',
                                    format: 'int32',
                                  },
                                  path: {
                                    description: "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                                    type: 'string',
                                  },
                                },
                                additionalProperties: false,
                              },
                            },
                            optional: {
                              description: "Specify whether the Secret or it's keys must be defined",
                              type: 'boolean',
                            },
                            secretName: {
                              description: "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                        storageos: {
                          description: 'Represents a StorageOS persistent volume resource.',
                          properties: {
                            fsType: {
                              description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                              type: ['string', 'null'],
                            },
                            readOnly: {
                              description: 'Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                              type: 'boolean',
                            },
                            secretRef: {
                              description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                              properties: {
                                name: {
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            volumeName: {
                              description: 'VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.',
                              type: ['string', 'null'],
                            },
                            volumeNamespace: {
                              description: 'VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod\'s namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                        vsphereVolume: {
                          description: 'Represents a vSphere volume resource.',
                          required: ['volumePath'],
                          properties: {
                            fsType: {
                              description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                              type: ['string', 'null'],
                            },
                            storagePolicyID: {
                              description: 'Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.',
                              type: ['string', 'null'],
                            },
                            storagePolicyName: {
                              description: 'Storage Policy Based Management (SPBM) profile name.',
                              type: ['string', 'null'],
                            },
                            volumePath: {
                              description: 'Path that identifies vSphere volume vmdk',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                      },
                      additionalProperties: false,
                    },
                    'x-kubernetes-patch-merge-key': 'name',
                    'x-kubernetes-patch-strategy': 'merge,retainKeys',
                  },
                },
                additionalProperties: false,
              },
            },
            additionalProperties: false,
          },
        },
        additionalProperties: false,
      },
      status: {
        description: 'DeploymentStatus is the most recently observed status of the Deployment.',
        properties: {
          availableReplicas: {
            description: 'Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.',
            type: 'integer',
            format: 'int32',
          },
          collisionCount: {
            description: 'Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.',
            type: 'integer',
            format: 'int32',
          },
          conditions: {
            description: "Represents the latest available observations of a deployment's current state.",
            type: ['array', 'null'],
            items: {
              description: 'DeploymentCondition describes the state of a deployment at a certain point.',
              required: ['type', 'status'],
              properties: {
                lastTransitionTime: {
                  description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                  type: ['string', 'null'],
                  format: 'date-time',
                },
                lastUpdateTime: {
                  description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                  type: ['string', 'null'],
                  format: 'date-time',
                },
                message: {
                  description: 'A human readable message indicating details about the transition.',
                  type: ['string', 'null'],
                },
                reason: {
                  description: "The reason for the condition's last transition.",
                  type: ['string', 'null'],
                },
                status: {
                  description: 'Status of the condition, one of True, False, Unknown.',
                  type: 'string',
                },
                type: {
                  description: 'Type of deployment condition.',
                  type: 'string',
                },
              },
              additionalProperties: false,
            },
            'x-kubernetes-patch-merge-key': 'type',
            'x-kubernetes-patch-strategy': 'merge',
          },
          observedGeneration: {
            description: 'The generation observed by the deployment controller.',
            type: 'integer',
            format: 'int64',
          },
          readyReplicas: {
            description: 'Total number of ready pods targeted by this deployment.',
            type: 'integer',
            format: 'int32',
          },
          replicas: {
            description: 'Total number of non-terminated pods targeted by this deployment (their labels match the selector).',
            type: 'integer',
            format: 'int32',
          },
          unavailableReplicas: {
            description: 'Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.',
            type: 'integer',
            format: 'int32',
          },
          updatedReplicas: {
            description: 'Total number of non-terminated pods targeted by this deployment that have the desired template spec.',
            type: 'integer',
            format: 'int32',
          },
        },
        additionalProperties: false,
      },
    },
    'x-kubernetes-group-version-kind': [
      {
        group: 'apps',
        kind: 'Deployment',
        version: 'v1',
      },
    ],
    additionalProperties: false,
    $schema: 'http://json-schema.org/schema#',
    type: 'object',
  })
  .setIn([referenceForModel(k8sModels.PodModel), 'default'], {
    description: 'Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.',
    properties: {
      apiVersion: {
        description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
        type: ['string', 'null'],
        enum: ['v1'],
      },
      kind: {
        description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
        type: ['string', 'null'],
        enum: ['Pod'],
      },
      metadata: {
        description: 'ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.',
        properties: {
          annotations: {
            additionalProperties: {
              type: ['string', 'null'],
            },
            description: 'Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations',
            type: ['object', 'null'],
          },
          clusterName: {
            description: 'The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.',
            type: ['string', 'null'],
          },
          creationTimestamp: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            format: 'date-time',
            type: ['string', 'null'],
          },
          deletionGracePeriodSeconds: {
            description: 'Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.',
            format: 'int64',
            type: ['integer', 'null'],
          },
          deletionTimestamp: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            format: 'date-time',
            type: ['string', 'null'],
          },
          finalizers: {
            description:
              'Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.',
            items: {
              type: ['string', 'null'],
            },
            type: ['array', 'null'],
            'x-kubernetes-patch-strategy': 'merge',
          },
          generateName: {
            description:
              'GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency',
            type: ['string', 'null'],
          },
          generation: {
            description: 'A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.',
            format: 'int64',
            type: ['integer', 'null'],
          },
          labels: {
            additionalProperties: {
              type: ['string', 'null'],
            },
            description: 'Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels',
            type: ['object', 'null'],
          },
          managedFields: {
            description: "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
            items: {
              description: 'ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.',
              properties: {
                apiVersion: {
                  description: 'APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.',
                  type: ['string', 'null'],
                },
                fieldsType: {
                  description: 'FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"',
                  type: ['string', 'null'],
                },
                fieldsV1: {
                  description:
                    "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
                  type: ['object', 'null'],
                },
                manager: {
                  description: 'Manager is an identifier of the workflow managing these fields.',
                  type: ['string', 'null'],
                },
                operation: {
                  description: "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
                  type: ['string', 'null'],
                },
                time: {
                  description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                  format: 'date-time',
                  type: ['string', 'null'],
                },
              },
              type: ['object', 'null'],
            },
            type: ['array', 'null'],
          },
          name: {
            description: 'Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
            type: ['string', 'null'],
          },
          namespace: {
            description: 'Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces',
            type: ['string', 'null'],
          },
          ownerReferences: {
            description: 'List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.',
            items: {
              description: 'OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.',
              properties: {
                apiVersion: {
                  description: 'API version of the referent.',
                  type: 'string',
                },
                blockOwnerDeletion: {
                  description: 'If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.',
                  type: ['boolean', 'null'],
                },
                controller: {
                  description: 'If true, this reference points to the managing controller.',
                  type: ['boolean', 'null'],
                },
                kind: {
                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
                  type: 'string',
                },
                name: {
                  description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
                  type: 'string',
                },
                uid: {
                  description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                  type: 'string',
                },
              },
              required: ['apiVersion', 'kind', 'name', 'uid'],
              type: ['object', 'null'],
            },
            type: ['array', 'null'],
            'x-kubernetes-patch-merge-key': 'uid',
            'x-kubernetes-patch-strategy': 'merge',
          },
          resourceVersion: {
            description:
              'An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency',
            type: ['string', 'null'],
          },
          selfLink: {
            description: 'SelfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.',
            type: ['string', 'null'],
          },
          uid: {
            description: 'UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
            type: ['string', 'null'],
          },
        },
        type: ['object', 'null'],
      },
      spec: {
        description: 'PodSpec is a description of a pod.',
        properties: {
          activeDeadlineSeconds: {
            description: 'Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.',
            format: 'int64',
            type: ['integer', 'null'],
          },
          affinity: {
            description: 'Affinity is a group of affinity scheduling rules.',
            properties: {
              nodeAffinity: {
                description: 'Node affinity is a group of node affinity scheduling rules.',
                properties: {
                  preferredDuringSchedulingIgnoredDuringExecution: {
                    description:
                      'The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.',
                    items: {
                      description: "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
                      properties: {
                        preference: {
                          description: 'A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.',
                          properties: {
                            matchExpressions: {
                              description: "A list of node selector requirements by node's labels.",
                              items: {
                                description: 'A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                properties: {
                                  key: {
                                    description: 'The label key that the selector applies to.',
                                    type: 'string',
                                  },
                                  operator: {
                                    description: "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                    type: 'string',
                                  },
                                  values: {
                                    description: 'An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
                                    items: {
                                      type: ['string', 'null'],
                                    },
                                    type: ['array', 'null'],
                                  },
                                },
                                required: ['key', 'operator'],
                                type: ['object', 'null'],
                              },
                              type: ['array', 'null'],
                            },
                            matchFields: {
                              description: "A list of node selector requirements by node's fields.",
                              items: {
                                description: 'A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                properties: {
                                  key: {
                                    description: 'The label key that the selector applies to.',
                                    type: 'string',
                                  },
                                  operator: {
                                    description: "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                    type: 'string',
                                  },
                                  values: {
                                    description: 'An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
                                    items: {
                                      type: ['string', 'null'],
                                    },
                                    type: ['array', 'null'],
                                  },
                                },
                                required: ['key', 'operator'],
                                type: ['object', 'null'],
                              },
                              type: ['array', 'null'],
                            },
                          },
                          type: 'object',
                        },
                        weight: {
                          description: 'Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.',
                          format: 'int32',
                          type: 'integer',
                        },
                      },
                      required: ['weight', 'preference'],
                      type: ['object', 'null'],
                    },
                    type: ['array', 'null'],
                  },
                  requiredDuringSchedulingIgnoredDuringExecution: {
                    description: 'A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.',
                    properties: {
                      nodeSelectorTerms: {
                        description: 'Required. A list of node selector terms. The terms are ORed.',
                        items: {
                          description: 'A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.',
                          properties: {
                            matchExpressions: {
                              description: "A list of node selector requirements by node's labels.",
                              items: {
                                description: 'A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                properties: {
                                  key: {
                                    description: 'The label key that the selector applies to.',
                                    type: 'string',
                                  },
                                  operator: {
                                    description: "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                    type: 'string',
                                  },
                                  values: {
                                    description: 'An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
                                    items: {
                                      type: ['string', 'null'],
                                    },
                                    type: ['array', 'null'],
                                  },
                                },
                                required: ['key', 'operator'],
                                type: ['object', 'null'],
                              },
                              type: ['array', 'null'],
                            },
                            matchFields: {
                              description: "A list of node selector requirements by node's fields.",
                              items: {
                                description: 'A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                properties: {
                                  key: {
                                    description: 'The label key that the selector applies to.',
                                    type: 'string',
                                  },
                                  operator: {
                                    description: "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                    type: 'string',
                                  },
                                  values: {
                                    description: 'An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
                                    items: {
                                      type: ['string', 'null'],
                                    },
                                    type: ['array', 'null'],
                                  },
                                },
                                required: ['key', 'operator'],
                                type: ['object', 'null'],
                              },
                              type: ['array', 'null'],
                            },
                          },
                          type: ['object', 'null'],
                        },
                        type: 'array',
                      },
                    },
                    required: ['nodeSelectorTerms'],
                    type: ['object', 'null'],
                  },
                },
                type: ['object', 'null'],
              },
              podAffinity: {
                description: 'Pod affinity is a group of inter pod affinity scheduling rules.',
                properties: {
                  preferredDuringSchedulingIgnoredDuringExecution: {
                    description:
                      'The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.',
                    items: {
                      description: 'The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)',
                      properties: {
                        podAffinityTerm: {
                          description: 'Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running',
                          properties: {
                            labelSelector: {
                              description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
                              properties: {
                                matchExpressions: {
                                  description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                                  items: {
                                    description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                    properties: {
                                      key: {
                                        description: 'key is the label key that the selector applies to.',
                                        type: 'string',
                                        'x-kubernetes-patch-merge-key': 'key',
                                        'x-kubernetes-patch-strategy': 'merge',
                                      },
                                      operator: {
                                        description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                        type: 'string',
                                      },
                                      values: {
                                        description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                                        items: {
                                          type: ['string', 'null'],
                                        },
                                        type: ['array', 'null'],
                                      },
                                    },
                                    required: ['key', 'operator'],
                                    type: ['object', 'null'],
                                  },
                                  type: ['array', 'null'],
                                },
                                matchLabels: {
                                  additionalProperties: {
                                    type: ['string', 'null'],
                                  },
                                  description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                                  type: ['object', 'null'],
                                },
                              },
                              type: ['object', 'null'],
                            },
                            namespaces: {
                              description: 'namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod\'s namespace"',
                              items: {
                                type: ['string', 'null'],
                              },
                              type: ['array', 'null'],
                            },
                            topologyKey: {
                              description: 'This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
                              type: 'string',
                            },
                          },
                          required: ['topologyKey'],
                          type: 'object',
                        },
                        weight: {
                          description: 'weight associated with matching the corresponding podAffinityTerm, in the range 1-100.',
                          format: 'int32',
                          type: 'integer',
                        },
                      },
                      required: ['weight', 'podAffinityTerm'],
                      type: ['object', 'null'],
                    },
                    type: ['array', 'null'],
                  },
                  requiredDuringSchedulingIgnoredDuringExecution: {
                    description:
                      'If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.',
                    items: {
                      description: 'Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running',
                      properties: {
                        labelSelector: {
                          description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
                          properties: {
                            matchExpressions: {
                              description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                              items: {
                                description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                properties: {
                                  key: {
                                    description: 'key is the label key that the selector applies to.',
                                    type: 'string',
                                    'x-kubernetes-patch-merge-key': 'key',
                                    'x-kubernetes-patch-strategy': 'merge',
                                  },
                                  operator: {
                                    description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                    type: 'string',
                                  },
                                  values: {
                                    description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                                    items: {
                                      type: ['string', 'null'],
                                    },
                                    type: ['array', 'null'],
                                  },
                                },
                                required: ['key', 'operator'],
                                type: ['object', 'null'],
                              },
                              type: ['array', 'null'],
                            },
                            matchLabels: {
                              additionalProperties: {
                                type: ['string', 'null'],
                              },
                              description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                              type: ['object', 'null'],
                            },
                          },
                          type: ['object', 'null'],
                        },
                        namespaces: {
                          description: 'namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod\'s namespace"',
                          items: {
                            type: ['string', 'null'],
                          },
                          type: ['array', 'null'],
                        },
                        topologyKey: {
                          description: 'This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
                          type: 'string',
                        },
                      },
                      required: ['topologyKey'],
                      type: ['object', 'null'],
                    },
                    type: ['array', 'null'],
                  },
                },
                type: ['object', 'null'],
              },
              podAntiAffinity: {
                description: 'Pod anti affinity is a group of inter pod anti affinity scheduling rules.',
                properties: {
                  preferredDuringSchedulingIgnoredDuringExecution: {
                    description:
                      'The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.',
                    items: {
                      description: 'The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)',
                      properties: {
                        podAffinityTerm: {
                          description: 'Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running',
                          properties: {
                            labelSelector: {
                              description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
                              properties: {
                                matchExpressions: {
                                  description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                                  items: {
                                    description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                    properties: {
                                      key: {
                                        description: 'key is the label key that the selector applies to.',
                                        type: 'string',
                                        'x-kubernetes-patch-merge-key': 'key',
                                        'x-kubernetes-patch-strategy': 'merge',
                                      },
                                      operator: {
                                        description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                        type: 'string',
                                      },
                                      values: {
                                        description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                                        items: {
                                          type: ['string', 'null'],
                                        },
                                        type: ['array', 'null'],
                                      },
                                    },
                                    required: ['key', 'operator'],
                                    type: ['object', 'null'],
                                  },
                                  type: ['array', 'null'],
                                },
                                matchLabels: {
                                  additionalProperties: {
                                    type: ['string', 'null'],
                                  },
                                  description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                                  type: ['object', 'null'],
                                },
                              },
                              type: ['object', 'null'],
                            },
                            namespaces: {
                              description: 'namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod\'s namespace"',
                              items: {
                                type: ['string', 'null'],
                              },
                              type: ['array', 'null'],
                            },
                            topologyKey: {
                              description: 'This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
                              type: 'string',
                            },
                          },
                          required: ['topologyKey'],
                          type: 'object',
                        },
                        weight: {
                          description: 'weight associated with matching the corresponding podAffinityTerm, in the range 1-100.',
                          format: 'int32',
                          type: 'integer',
                        },
                      },
                      required: ['weight', 'podAffinityTerm'],
                      type: ['object', 'null'],
                    },
                    type: ['array', 'null'],
                  },
                  requiredDuringSchedulingIgnoredDuringExecution: {
                    description:
                      'If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.',
                    items: {
                      description: 'Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running',
                      properties: {
                        labelSelector: {
                          description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
                          properties: {
                            matchExpressions: {
                              description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                              items: {
                                description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                properties: {
                                  key: {
                                    description: 'key is the label key that the selector applies to.',
                                    type: 'string',
                                    'x-kubernetes-patch-merge-key': 'key',
                                    'x-kubernetes-patch-strategy': 'merge',
                                  },
                                  operator: {
                                    description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                    type: 'string',
                                  },
                                  values: {
                                    description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                                    items: {
                                      type: ['string', 'null'],
                                    },
                                    type: ['array', 'null'],
                                  },
                                },
                                required: ['key', 'operator'],
                                type: ['object', 'null'],
                              },
                              type: ['array', 'null'],
                            },
                            matchLabels: {
                              additionalProperties: {
                                type: ['string', 'null'],
                              },
                              description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                              type: ['object', 'null'],
                            },
                          },
                          type: ['object', 'null'],
                        },
                        namespaces: {
                          description: 'namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod\'s namespace"',
                          items: {
                            type: ['string', 'null'],
                          },
                          type: ['array', 'null'],
                        },
                        topologyKey: {
                          description: 'This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
                          type: 'string',
                        },
                      },
                      required: ['topologyKey'],
                      type: ['object', 'null'],
                    },
                    type: ['array', 'null'],
                  },
                },
                type: ['object', 'null'],
              },
            },
            type: ['object', 'null'],
          },
          automountServiceAccountToken: {
            description: 'AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.',
            type: ['boolean', 'null'],
          },
          containers: {
            description: 'List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.',
            items: {
              description: 'A single application container that you want to run within a pod.',
              properties: {
                args: {
                  description:
                    "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                  items: {
                    type: ['string', 'null'],
                  },
                  type: ['array', 'null'],
                },
                command: {
                  description:
                    "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                  items: {
                    type: ['string', 'null'],
                  },
                  type: ['array', 'null'],
                },
                env: {
                  description: 'List of environment variables to set in the container. Cannot be updated.',
                  items: {
                    description: 'EnvVar represents an environment variable present in a Container.',
                    properties: {
                      name: {
                        description: 'Name of the environment variable. Must be a C_IDENTIFIER.',
                        type: 'string',
                      },
                      value: {
                        description: 'Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".',
                        type: ['string', 'null'],
                      },
                      valueFrom: {
                        description: 'EnvVarSource represents a source for the value of an EnvVar.',
                        properties: {
                          configMapKeyRef: {
                            description: 'Selects a key from a ConfigMap.',
                            properties: {
                              key: {
                                description: 'The key to select.',
                                type: 'string',
                              },
                              name: {
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                type: ['string', 'null'],
                              },
                              optional: {
                                description: 'Specify whether the ConfigMap or its key must be defined',
                                type: ['boolean', 'null'],
                              },
                            },
                            required: ['key'],
                            type: ['object', 'null'],
                          },
                          fieldRef: {
                            description: 'ObjectFieldSelector selects an APIVersioned field of an object.',
                            properties: {
                              apiVersion: {
                                description: 'Version of the schema the FieldPath is written in terms of, defaults to "v1".',
                                type: ['string', 'null'],
                              },
                              fieldPath: {
                                description: 'Path of the field to select in the specified API version.',
                                type: 'string',
                              },
                            },
                            required: ['fieldPath'],
                            type: ['object', 'null'],
                          },
                          resourceFieldRef: {
                            description: 'ResourceFieldSelector represents container resources (cpu, memory) and their output format',
                            properties: {
                              containerName: {
                                description: 'Container name: required for volumes, optional for env vars',
                                type: ['string', 'null'],
                              },
                              divisor: {
                                oneOf: [
                                  {
                                    type: ['string', 'null'],
                                  },
                                  {
                                    type: ['number', 'null'],
                                  },
                                ],
                              },
                              resource: {
                                description: 'Required: resource to select',
                                type: 'string',
                              },
                            },
                            required: ['resource'],
                            type: ['object', 'null'],
                          },
                          secretKeyRef: {
                            description: 'SecretKeySelector selects a key of a Secret.',
                            properties: {
                              key: {
                                description: 'The key of the secret to select from.  Must be a valid secret key.',
                                type: 'string',
                              },
                              name: {
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                type: ['string', 'null'],
                              },
                              optional: {
                                description: 'Specify whether the Secret or its key must be defined',
                                type: ['boolean', 'null'],
                              },
                            },
                            required: ['key'],
                            type: ['object', 'null'],
                          },
                        },
                        type: ['object', 'null'],
                      },
                    },
                    required: ['name'],
                    type: ['object', 'null'],
                  },
                  type: ['array', 'null'],
                  'x-kubernetes-patch-merge-key': 'name',
                  'x-kubernetes-patch-strategy': 'merge',
                },
                envFrom: {
                  description: 'List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.',
                  items: {
                    description: 'EnvFromSource represents the source of a set of ConfigMaps',
                    properties: {
                      configMapRef: {
                        description: "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
                        properties: {
                          name: {
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                            type: ['string', 'null'],
                          },
                          optional: {
                            description: 'Specify whether the ConfigMap must be defined',
                            type: ['boolean', 'null'],
                          },
                        },
                        type: ['object', 'null'],
                      },
                      prefix: {
                        description: 'An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.',
                        type: ['string', 'null'],
                      },
                      secretRef: {
                        description: "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
                        properties: {
                          name: {
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                            type: ['string', 'null'],
                          },
                          optional: {
                            description: 'Specify whether the Secret must be defined',
                            type: ['boolean', 'null'],
                          },
                        },
                        type: ['object', 'null'],
                      },
                    },
                    type: ['object', 'null'],
                  },
                  type: ['array', 'null'],
                },
                image: {
                  description: 'Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.',
                  type: ['string', 'null'],
                },
                imagePullPolicy: {
                  description: 'Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images',
                  type: ['string', 'null'],
                },
                lifecycle: {
                  description: 'Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.',
                  properties: {
                    postStart: {
                      description: 'Handler defines a specific action that should be taken',
                      properties: {
                        exec: {
                          description: 'ExecAction describes a "run in container" action.',
                          properties: {
                            command: {
                              description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                              items: {
                                type: ['string', 'null'],
                              },
                              type: ['array', 'null'],
                            },
                          },
                          type: ['object', 'null'],
                        },
                        httpGet: {
                          description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                          properties: {
                            host: {
                              description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                              type: ['string', 'null'],
                            },
                            httpHeaders: {
                              description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                              items: {
                                description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                properties: {
                                  name: {
                                    description: 'The header field name',
                                    type: 'string',
                                  },
                                  value: {
                                    description: 'The header field value',
                                    type: 'string',
                                  },
                                },
                                required: ['name', 'value'],
                                type: ['object', 'null'],
                              },
                              type: ['array', 'null'],
                            },
                            path: {
                              description: 'Path to access on the HTTP server.',
                              type: ['string', 'null'],
                            },
                            port: {
                              oneOf: [
                                {
                                  type: ['string', 'null'],
                                },
                                {
                                  type: ['integer', 'null'],
                                },
                              ],
                            },
                            scheme: {
                              description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                              type: ['string', 'null'],
                            },
                          },
                          required: ['port'],
                          type: ['object', 'null'],
                        },
                        tcpSocket: {
                          description: 'TCPSocketAction describes an action based on opening a socket',
                          properties: {
                            host: {
                              description: 'Optional: Host name to connect to, defaults to the pod IP.',
                              type: ['string', 'null'],
                            },
                            port: {
                              oneOf: [
                                {
                                  type: ['string', 'null'],
                                },
                                {
                                  type: ['integer', 'null'],
                                },
                              ],
                            },
                          },
                          required: ['port'],
                          type: ['object', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                    preStop: {
                      description: 'Handler defines a specific action that should be taken',
                      properties: {
                        exec: {
                          description: 'ExecAction describes a "run in container" action.',
                          properties: {
                            command: {
                              description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                              items: {
                                type: ['string', 'null'],
                              },
                              type: ['array', 'null'],
                            },
                          },
                          type: ['object', 'null'],
                        },
                        httpGet: {
                          description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                          properties: {
                            host: {
                              description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                              type: ['string', 'null'],
                            },
                            httpHeaders: {
                              description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                              items: {
                                description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                properties: {
                                  name: {
                                    description: 'The header field name',
                                    type: 'string',
                                  },
                                  value: {
                                    description: 'The header field value',
                                    type: 'string',
                                  },
                                },
                                required: ['name', 'value'],
                                type: ['object', 'null'],
                              },
                              type: ['array', 'null'],
                            },
                            path: {
                              description: 'Path to access on the HTTP server.',
                              type: ['string', 'null'],
                            },
                            port: {
                              oneOf: [
                                {
                                  type: ['string', 'null'],
                                },
                                {
                                  type: ['integer', 'null'],
                                },
                              ],
                            },
                            scheme: {
                              description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                              type: ['string', 'null'],
                            },
                          },
                          required: ['port'],
                          type: ['object', 'null'],
                        },
                        tcpSocket: {
                          description: 'TCPSocketAction describes an action based on opening a socket',
                          properties: {
                            host: {
                              description: 'Optional: Host name to connect to, defaults to the pod IP.',
                              type: ['string', 'null'],
                            },
                            port: {
                              oneOf: [
                                {
                                  type: ['string', 'null'],
                                },
                                {
                                  type: ['integer', 'null'],
                                },
                              ],
                            },
                          },
                          required: ['port'],
                          type: ['object', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                  },
                  type: ['object', 'null'],
                },
                livenessProbe: {
                  description: 'Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.',
                  properties: {
                    exec: {
                      description: 'ExecAction describes a "run in container" action.',
                      properties: {
                        command: {
                          description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                          items: {
                            type: ['string', 'null'],
                          },
                          type: ['array', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                    failureThreshold: {
                      description: 'Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    httpGet: {
                      description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                      properties: {
                        host: {
                          description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                          type: ['string', 'null'],
                        },
                        httpHeaders: {
                          description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                          items: {
                            description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                            properties: {
                              name: {
                                description: 'The header field name',
                                type: 'string',
                              },
                              value: {
                                description: 'The header field value',
                                type: 'string',
                              },
                            },
                            required: ['name', 'value'],
                            type: ['object', 'null'],
                          },
                          type: ['array', 'null'],
                        },
                        path: {
                          description: 'Path to access on the HTTP server.',
                          type: ['string', 'null'],
                        },
                        port: {
                          oneOf: [
                            {
                              type: ['string', 'null'],
                            },
                            {
                              type: ['integer', 'null'],
                            },
                          ],
                        },
                        scheme: {
                          description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                          type: ['string', 'null'],
                        },
                      },
                      required: ['port'],
                      type: ['object', 'null'],
                    },
                    initialDelaySeconds: {
                      description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    periodSeconds: {
                      description: 'How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    successThreshold: {
                      description: 'Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    tcpSocket: {
                      description: 'TCPSocketAction describes an action based on opening a socket',
                      properties: {
                        host: {
                          description: 'Optional: Host name to connect to, defaults to the pod IP.',
                          type: ['string', 'null'],
                        },
                        port: {
                          oneOf: [
                            {
                              type: ['string', 'null'],
                            },
                            {
                              type: ['integer', 'null'],
                            },
                          ],
                        },
                      },
                      required: ['port'],
                      type: ['object', 'null'],
                    },
                    timeoutSeconds: {
                      description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                  },
                  type: ['object', 'null'],
                },
                name: {
                  description: 'Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.',
                  type: 'string',
                },
                ports: {
                  description: 'List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.',
                  items: {
                    description: 'ContainerPort represents a network port in a single container.',
                    properties: {
                      containerPort: {
                        description: "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
                        format: 'int32',
                        type: 'integer',
                      },
                      hostIP: {
                        description: 'What host IP to bind the external port to.',
                        type: ['string', 'null'],
                      },
                      hostPort: {
                        description: 'Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.',
                        format: 'int32',
                        type: ['integer', 'null'],
                      },
                      name: {
                        description: 'If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.',
                        type: ['string', 'null'],
                      },
                      protocol: {
                        description: 'Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".',
                        type: ['string', 'null'],
                      },
                    },
                    required: ['containerPort'],
                    type: ['object', 'null'],
                  },
                  type: ['array', 'null'],
                  'x-kubernetes-list-map-keys': ['containerPort', 'protocol'],
                  'x-kubernetes-list-type': 'map',
                  'x-kubernetes-patch-merge-key': 'containerPort',
                  'x-kubernetes-patch-strategy': 'merge',
                },
                readinessProbe: {
                  description: 'Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.',
                  properties: {
                    exec: {
                      description: 'ExecAction describes a "run in container" action.',
                      properties: {
                        command: {
                          description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                          items: {
                            type: ['string', 'null'],
                          },
                          type: ['array', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                    failureThreshold: {
                      description: 'Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    httpGet: {
                      description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                      properties: {
                        host: {
                          description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                          type: ['string', 'null'],
                        },
                        httpHeaders: {
                          description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                          items: {
                            description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                            properties: {
                              name: {
                                description: 'The header field name',
                                type: 'string',
                              },
                              value: {
                                description: 'The header field value',
                                type: 'string',
                              },
                            },
                            required: ['name', 'value'],
                            type: ['object', 'null'],
                          },
                          type: ['array', 'null'],
                        },
                        path: {
                          description: 'Path to access on the HTTP server.',
                          type: ['string', 'null'],
                        },
                        port: {
                          oneOf: [
                            {
                              type: ['string', 'null'],
                            },
                            {
                              type: ['integer', 'null'],
                            },
                          ],
                        },
                        scheme: {
                          description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                          type: ['string', 'null'],
                        },
                      },
                      required: ['port'],
                      type: ['object', 'null'],
                    },
                    initialDelaySeconds: {
                      description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    periodSeconds: {
                      description: 'How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    successThreshold: {
                      description: 'Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    tcpSocket: {
                      description: 'TCPSocketAction describes an action based on opening a socket',
                      properties: {
                        host: {
                          description: 'Optional: Host name to connect to, defaults to the pod IP.',
                          type: ['string', 'null'],
                        },
                        port: {
                          oneOf: [
                            {
                              type: ['string', 'null'],
                            },
                            {
                              type: ['integer', 'null'],
                            },
                          ],
                        },
                      },
                      required: ['port'],
                      type: ['object', 'null'],
                    },
                    timeoutSeconds: {
                      description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                  },
                  type: ['object', 'null'],
                },
                resources: {
                  description: 'ResourceRequirements describes the compute resource requirements.',
                  properties: {
                    limits: {
                      additionalProperties: {
                        oneOf: [
                          {
                            type: ['string', 'null'],
                          },
                          {
                            type: ['number', 'null'],
                          },
                        ],
                      },
                      description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/',
                      type: ['object', 'null'],
                    },
                    requests: {
                      additionalProperties: {
                        oneOf: [
                          {
                            type: ['string', 'null'],
                          },
                          {
                            type: ['number', 'null'],
                          },
                        ],
                      },
                      description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/',
                      type: ['object', 'null'],
                    },
                  },
                  type: ['object', 'null'],
                },
                securityContext: {
                  description: 'SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.',
                  properties: {
                    allowPrivilegeEscalation: {
                      description: 'AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN',
                      type: ['boolean', 'null'],
                    },
                    capabilities: {
                      description: 'Adds and removes POSIX capabilities from running containers.',
                      properties: {
                        add: {
                          description: 'Added capabilities',
                          items: {
                            type: ['string', 'null'],
                          },
                          type: ['array', 'null'],
                        },
                        drop: {
                          description: 'Removed capabilities',
                          items: {
                            type: ['string', 'null'],
                          },
                          type: ['array', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                    privileged: {
                      description: 'Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.',
                      type: ['boolean', 'null'],
                    },
                    procMount: {
                      description: 'procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.',
                      type: ['string', 'null'],
                    },
                    readOnlyRootFilesystem: {
                      description: 'Whether this container has a read-only root filesystem. Default is false.',
                      type: ['boolean', 'null'],
                    },
                    runAsGroup: {
                      description: 'The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                      format: 'int64',
                      type: ['integer', 'null'],
                    },
                    runAsNonRoot: {
                      description: 'Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                      type: ['boolean', 'null'],
                    },
                    runAsUser: {
                      description: 'The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                      format: 'int64',
                      type: ['integer', 'null'],
                    },
                    seLinuxOptions: {
                      description: 'SELinuxOptions are the labels to be applied to the container',
                      properties: {
                        level: {
                          description: 'Level is SELinux level label that applies to the container.',
                          type: ['string', 'null'],
                        },
                        role: {
                          description: 'Role is a SELinux role label that applies to the container.',
                          type: ['string', 'null'],
                        },
                        type: {
                          description: 'Type is a SELinux type label that applies to the container.',
                          type: ['string', 'null'],
                        },
                        user: {
                          description: 'User is a SELinux user label that applies to the container.',
                          type: ['string', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                    windowsOptions: {
                      description: 'WindowsSecurityContextOptions contain Windows-specific options and credentials.',
                      properties: {
                        gmsaCredentialSpec: {
                          description: 'GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.',
                          type: ['string', 'null'],
                        },
                        gmsaCredentialSpecName: {
                          description: 'GMSACredentialSpecName is the name of the GMSA credential spec to use.',
                          type: ['string', 'null'],
                        },
                        runAsUserName: {
                          description: 'The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                          type: ['string', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                  },
                  type: ['object', 'null'],
                },
                startupProbe: {
                  description: 'Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.',
                  properties: {
                    exec: {
                      description: 'ExecAction describes a "run in container" action.',
                      properties: {
                        command: {
                          description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                          items: {
                            type: ['string', 'null'],
                          },
                          type: ['array', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                    failureThreshold: {
                      description: 'Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    httpGet: {
                      description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                      properties: {
                        host: {
                          description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                          type: ['string', 'null'],
                        },
                        httpHeaders: {
                          description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                          items: {
                            description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                            properties: {
                              name: {
                                description: 'The header field name',
                                type: 'string',
                              },
                              value: {
                                description: 'The header field value',
                                type: 'string',
                              },
                            },
                            required: ['name', 'value'],
                            type: ['object', 'null'],
                          },
                          type: ['array', 'null'],
                        },
                        path: {
                          description: 'Path to access on the HTTP server.',
                          type: ['string', 'null'],
                        },
                        port: {
                          oneOf: [
                            {
                              type: ['string', 'null'],
                            },
                            {
                              type: ['integer', 'null'],
                            },
                          ],
                        },
                        scheme: {
                          description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                          type: ['string', 'null'],
                        },
                      },
                      required: ['port'],
                      type: ['object', 'null'],
                    },
                    initialDelaySeconds: {
                      description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    periodSeconds: {
                      description: 'How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    successThreshold: {
                      description: 'Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    tcpSocket: {
                      description: 'TCPSocketAction describes an action based on opening a socket',
                      properties: {
                        host: {
                          description: 'Optional: Host name to connect to, defaults to the pod IP.',
                          type: ['string', 'null'],
                        },
                        port: {
                          oneOf: [
                            {
                              type: ['string', 'null'],
                            },
                            {
                              type: ['integer', 'null'],
                            },
                          ],
                        },
                      },
                      required: ['port'],
                      type: ['object', 'null'],
                    },
                    timeoutSeconds: {
                      description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                  },
                  type: ['object', 'null'],
                },
                stdin: {
                  description: 'Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.',
                  type: ['boolean', 'null'],
                },
                stdinOnce: {
                  description:
                    'Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false',
                  type: ['boolean', 'null'],
                },
                terminationMessagePath: {
                  description: "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                  type: ['string', 'null'],
                },
                terminationMessagePolicy: {
                  description: 'Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.',
                  type: ['string', 'null'],
                },
                tty: {
                  description: "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                  type: ['boolean', 'null'],
                },
                volumeDevices: {
                  description: 'volumeDevices is the list of block devices to be used by the container.',
                  items: {
                    description: 'volumeDevice describes a mapping of a raw block device within a container.',
                    properties: {
                      devicePath: {
                        description: 'devicePath is the path inside of the container that the device will be mapped to.',
                        type: 'string',
                      },
                      name: {
                        description: 'name must match the name of a persistentVolumeClaim in the pod',
                        type: 'string',
                      },
                    },
                    required: ['name', 'devicePath'],
                    type: ['object', 'null'],
                  },
                  type: ['array', 'null'],
                  'x-kubernetes-patch-merge-key': 'devicePath',
                  'x-kubernetes-patch-strategy': 'merge',
                },
                volumeMounts: {
                  description: "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                  items: {
                    description: 'VolumeMount describes a mounting of a Volume within a container.',
                    properties: {
                      mountPath: {
                        description: "Path within the container at which the volume should be mounted.  Must not contain ':'.",
                        type: 'string',
                      },
                      mountPropagation: {
                        description: 'mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.',
                        type: ['string', 'null'],
                      },
                      name: {
                        description: 'This must match the Name of a Volume.',
                        type: 'string',
                      },
                      readOnly: {
                        description: 'Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.',
                        type: ['boolean', 'null'],
                      },
                      subPath: {
                        description: 'Path within the volume from which the container\'s volume should be mounted. Defaults to "" (volume\'s root).',
                        type: ['string', 'null'],
                      },
                      subPathExpr: {
                        description: "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.",
                        type: ['string', 'null'],
                      },
                    },
                    required: ['name', 'mountPath'],
                    type: ['object', 'null'],
                  },
                  type: ['array', 'null'],
                  'x-kubernetes-patch-merge-key': 'mountPath',
                  'x-kubernetes-patch-strategy': 'merge',
                },
                workingDir: {
                  description: "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                  type: ['string', 'null'],
                },
              },
              required: ['name'],
              type: ['object', 'null'],
            },
            type: 'array',
            'x-kubernetes-patch-merge-key': 'name',
            'x-kubernetes-patch-strategy': 'merge',
          },
          dnsConfig: {
            description: 'PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.',
            properties: {
              nameservers: {
                description: 'A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.',
                items: {
                  type: ['string', 'null'],
                },
                type: ['array', 'null'],
              },
              options: {
                description: 'A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.',
                items: {
                  description: 'PodDNSConfigOption defines DNS resolver options of a pod.',
                  properties: {
                    name: {
                      description: 'Required.',
                      type: ['string', 'null'],
                    },
                    value: {
                      type: ['string', 'null'],
                    },
                  },
                  type: ['object', 'null'],
                },
                type: ['array', 'null'],
              },
              searches: {
                description: 'A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.',
                items: {
                  type: ['string', 'null'],
                },
                type: ['array', 'null'],
              },
            },
            type: ['object', 'null'],
          },
          dnsPolicy: {
            description: "Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.",
            type: ['string', 'null'],
          },
          enableServiceLinks: {
            description: "EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.",
            type: ['boolean', 'null'],
          },
          ephemeralContainers: {
            description: "List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource. This field is alpha-level and is only honored by servers that enable the EphemeralContainers feature.",
            items: {
              description:
                "An EphemeralContainer is a container that may be added temporarily to an existing pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a pod is removed or restarted. If an ephemeral container causes a pod to exceed its resource allocation, the pod may be evicted. Ephemeral containers may not be added by directly updating the pod spec. They must be added via the pod's ephemeralcontainers subresource, and they will appear in the pod spec once added. This is an alpha feature enabled by the EphemeralContainers feature flag.",
              properties: {
                args: {
                  description:
                    "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                  items: {
                    type: ['string', 'null'],
                  },
                  type: ['array', 'null'],
                },
                command: {
                  description:
                    "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                  items: {
                    type: ['string', 'null'],
                  },
                  type: ['array', 'null'],
                },
                env: {
                  description: 'List of environment variables to set in the container. Cannot be updated.',
                  items: {
                    description: 'EnvVar represents an environment variable present in a Container.',
                    properties: {
                      name: {
                        description: 'Name of the environment variable. Must be a C_IDENTIFIER.',
                        type: 'string',
                      },
                      value: {
                        description: 'Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".',
                        type: ['string', 'null'],
                      },
                      valueFrom: {
                        description: 'EnvVarSource represents a source for the value of an EnvVar.',
                        properties: {
                          configMapKeyRef: {
                            description: 'Selects a key from a ConfigMap.',
                            properties: {
                              key: {
                                description: 'The key to select.',
                                type: 'string',
                              },
                              name: {
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                type: ['string', 'null'],
                              },
                              optional: {
                                description: 'Specify whether the ConfigMap or its key must be defined',
                                type: ['boolean', 'null'],
                              },
                            },
                            required: ['key'],
                            type: ['object', 'null'],
                          },
                          fieldRef: {
                            description: 'ObjectFieldSelector selects an APIVersioned field of an object.',
                            properties: {
                              apiVersion: {
                                description: 'Version of the schema the FieldPath is written in terms of, defaults to "v1".',
                                type: ['string', 'null'],
                              },
                              fieldPath: {
                                description: 'Path of the field to select in the specified API version.',
                                type: 'string',
                              },
                            },
                            required: ['fieldPath'],
                            type: ['object', 'null'],
                          },
                          resourceFieldRef: {
                            description: 'ResourceFieldSelector represents container resources (cpu, memory) and their output format',
                            properties: {
                              containerName: {
                                description: 'Container name: required for volumes, optional for env vars',
                                type: ['string', 'null'],
                              },
                              divisor: {
                                oneOf: [
                                  {
                                    type: ['string', 'null'],
                                  },
                                  {
                                    type: ['number', 'null'],
                                  },
                                ],
                              },
                              resource: {
                                description: 'Required: resource to select',
                                type: 'string',
                              },
                            },
                            required: ['resource'],
                            type: ['object', 'null'],
                          },
                          secretKeyRef: {
                            description: 'SecretKeySelector selects a key of a Secret.',
                            properties: {
                              key: {
                                description: 'The key of the secret to select from.  Must be a valid secret key.',
                                type: 'string',
                              },
                              name: {
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                type: ['string', 'null'],
                              },
                              optional: {
                                description: 'Specify whether the Secret or its key must be defined',
                                type: ['boolean', 'null'],
                              },
                            },
                            required: ['key'],
                            type: ['object', 'null'],
                          },
                        },
                        type: ['object', 'null'],
                      },
                    },
                    required: ['name'],
                    type: ['object', 'null'],
                  },
                  type: ['array', 'null'],
                  'x-kubernetes-patch-merge-key': 'name',
                  'x-kubernetes-patch-strategy': 'merge',
                },
                envFrom: {
                  description: 'List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.',
                  items: {
                    description: 'EnvFromSource represents the source of a set of ConfigMaps',
                    properties: {
                      configMapRef: {
                        description: "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
                        properties: {
                          name: {
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                            type: ['string', 'null'],
                          },
                          optional: {
                            description: 'Specify whether the ConfigMap must be defined',
                            type: ['boolean', 'null'],
                          },
                        },
                        type: ['object', 'null'],
                      },
                      prefix: {
                        description: 'An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.',
                        type: ['string', 'null'],
                      },
                      secretRef: {
                        description: "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
                        properties: {
                          name: {
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                            type: ['string', 'null'],
                          },
                          optional: {
                            description: 'Specify whether the Secret must be defined',
                            type: ['boolean', 'null'],
                          },
                        },
                        type: ['object', 'null'],
                      },
                    },
                    type: ['object', 'null'],
                  },
                  type: ['array', 'null'],
                },
                image: {
                  description: 'Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images',
                  type: ['string', 'null'],
                },
                imagePullPolicy: {
                  description: 'Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images',
                  type: ['string', 'null'],
                },
                lifecycle: {
                  description: 'Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.',
                  properties: {
                    postStart: {
                      description: 'Handler defines a specific action that should be taken',
                      properties: {
                        exec: {
                          description: 'ExecAction describes a "run in container" action.',
                          properties: {
                            command: {
                              description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                              items: {
                                type: ['string', 'null'],
                              },
                              type: ['array', 'null'],
                            },
                          },
                          type: ['object', 'null'],
                        },
                        httpGet: {
                          description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                          properties: {
                            host: {
                              description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                              type: ['string', 'null'],
                            },
                            httpHeaders: {
                              description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                              items: {
                                description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                properties: {
                                  name: {
                                    description: 'The header field name',
                                    type: 'string',
                                  },
                                  value: {
                                    description: 'The header field value',
                                    type: 'string',
                                  },
                                },
                                required: ['name', 'value'],
                                type: ['object', 'null'],
                              },
                              type: ['array', 'null'],
                            },
                            path: {
                              description: 'Path to access on the HTTP server.',
                              type: ['string', 'null'],
                            },
                            port: {
                              oneOf: [
                                {
                                  type: ['string', 'null'],
                                },
                                {
                                  type: ['integer', 'null'],
                                },
                              ],
                            },
                            scheme: {
                              description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                              type: ['string', 'null'],
                            },
                          },
                          required: ['port'],
                          type: ['object', 'null'],
                        },
                        tcpSocket: {
                          description: 'TCPSocketAction describes an action based on opening a socket',
                          properties: {
                            host: {
                              description: 'Optional: Host name to connect to, defaults to the pod IP.',
                              type: ['string', 'null'],
                            },
                            port: {
                              oneOf: [
                                {
                                  type: ['string', 'null'],
                                },
                                {
                                  type: ['integer', 'null'],
                                },
                              ],
                            },
                          },
                          required: ['port'],
                          type: ['object', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                    preStop: {
                      description: 'Handler defines a specific action that should be taken',
                      properties: {
                        exec: {
                          description: 'ExecAction describes a "run in container" action.',
                          properties: {
                            command: {
                              description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                              items: {
                                type: ['string', 'null'],
                              },
                              type: ['array', 'null'],
                            },
                          },
                          type: ['object', 'null'],
                        },
                        httpGet: {
                          description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                          properties: {
                            host: {
                              description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                              type: ['string', 'null'],
                            },
                            httpHeaders: {
                              description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                              items: {
                                description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                properties: {
                                  name: {
                                    description: 'The header field name',
                                    type: 'string',
                                  },
                                  value: {
                                    description: 'The header field value',
                                    type: 'string',
                                  },
                                },
                                required: ['name', 'value'],
                                type: ['object', 'null'],
                              },
                              type: ['array', 'null'],
                            },
                            path: {
                              description: 'Path to access on the HTTP server.',
                              type: ['string', 'null'],
                            },
                            port: {
                              oneOf: [
                                {
                                  type: ['string', 'null'],
                                },
                                {
                                  type: ['integer', 'null'],
                                },
                              ],
                            },
                            scheme: {
                              description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                              type: ['string', 'null'],
                            },
                          },
                          required: ['port'],
                          type: ['object', 'null'],
                        },
                        tcpSocket: {
                          description: 'TCPSocketAction describes an action based on opening a socket',
                          properties: {
                            host: {
                              description: 'Optional: Host name to connect to, defaults to the pod IP.',
                              type: ['string', 'null'],
                            },
                            port: {
                              oneOf: [
                                {
                                  type: ['string', 'null'],
                                },
                                {
                                  type: ['integer', 'null'],
                                },
                              ],
                            },
                          },
                          required: ['port'],
                          type: ['object', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                  },
                  type: ['object', 'null'],
                },
                livenessProbe: {
                  description: 'Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.',
                  properties: {
                    exec: {
                      description: 'ExecAction describes a "run in container" action.',
                      properties: {
                        command: {
                          description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                          items: {
                            type: ['string', 'null'],
                          },
                          type: ['array', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                    failureThreshold: {
                      description: 'Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    httpGet: {
                      description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                      properties: {
                        host: {
                          description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                          type: ['string', 'null'],
                        },
                        httpHeaders: {
                          description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                          items: {
                            description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                            properties: {
                              name: {
                                description: 'The header field name',
                                type: 'string',
                              },
                              value: {
                                description: 'The header field value',
                                type: 'string',
                              },
                            },
                            required: ['name', 'value'],
                            type: ['object', 'null'],
                          },
                          type: ['array', 'null'],
                        },
                        path: {
                          description: 'Path to access on the HTTP server.',
                          type: ['string', 'null'],
                        },
                        port: {
                          oneOf: [
                            {
                              type: ['string', 'null'],
                            },
                            {
                              type: ['integer', 'null'],
                            },
                          ],
                        },
                        scheme: {
                          description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                          type: ['string', 'null'],
                        },
                      },
                      required: ['port'],
                      type: ['object', 'null'],
                    },
                    initialDelaySeconds: {
                      description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    periodSeconds: {
                      description: 'How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    successThreshold: {
                      description: 'Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    tcpSocket: {
                      description: 'TCPSocketAction describes an action based on opening a socket',
                      properties: {
                        host: {
                          description: 'Optional: Host name to connect to, defaults to the pod IP.',
                          type: ['string', 'null'],
                        },
                        port: {
                          oneOf: [
                            {
                              type: ['string', 'null'],
                            },
                            {
                              type: ['integer', 'null'],
                            },
                          ],
                        },
                      },
                      required: ['port'],
                      type: ['object', 'null'],
                    },
                    timeoutSeconds: {
                      description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                  },
                  type: ['object', 'null'],
                },
                name: {
                  description: 'Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.',
                  type: 'string',
                },
                ports: {
                  description: 'Ports are not allowed for ephemeral containers.',
                  items: {
                    description: 'ContainerPort represents a network port in a single container.',
                    properties: {
                      containerPort: {
                        description: "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
                        format: 'int32',
                        type: 'integer',
                      },
                      hostIP: {
                        description: 'What host IP to bind the external port to.',
                        type: ['string', 'null'],
                      },
                      hostPort: {
                        description: 'Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.',
                        format: 'int32',
                        type: ['integer', 'null'],
                      },
                      name: {
                        description: 'If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.',
                        type: ['string', 'null'],
                      },
                      protocol: {
                        description: 'Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".',
                        type: ['string', 'null'],
                      },
                    },
                    required: ['containerPort'],
                    type: ['object', 'null'],
                  },
                  type: ['array', 'null'],
                },
                readinessProbe: {
                  description: 'Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.',
                  properties: {
                    exec: {
                      description: 'ExecAction describes a "run in container" action.',
                      properties: {
                        command: {
                          description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                          items: {
                            type: ['string', 'null'],
                          },
                          type: ['array', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                    failureThreshold: {
                      description: 'Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    httpGet: {
                      description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                      properties: {
                        host: {
                          description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                          type: ['string', 'null'],
                        },
                        httpHeaders: {
                          description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                          items: {
                            description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                            properties: {
                              name: {
                                description: 'The header field name',
                                type: 'string',
                              },
                              value: {
                                description: 'The header field value',
                                type: 'string',
                              },
                            },
                            required: ['name', 'value'],
                            type: ['object', 'null'],
                          },
                          type: ['array', 'null'],
                        },
                        path: {
                          description: 'Path to access on the HTTP server.',
                          type: ['string', 'null'],
                        },
                        port: {
                          oneOf: [
                            {
                              type: ['string', 'null'],
                            },
                            {
                              type: ['integer', 'null'],
                            },
                          ],
                        },
                        scheme: {
                          description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                          type: ['string', 'null'],
                        },
                      },
                      required: ['port'],
                      type: ['object', 'null'],
                    },
                    initialDelaySeconds: {
                      description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    periodSeconds: {
                      description: 'How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    successThreshold: {
                      description: 'Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    tcpSocket: {
                      description: 'TCPSocketAction describes an action based on opening a socket',
                      properties: {
                        host: {
                          description: 'Optional: Host name to connect to, defaults to the pod IP.',
                          type: ['string', 'null'],
                        },
                        port: {
                          oneOf: [
                            {
                              type: ['string', 'null'],
                            },
                            {
                              type: ['integer', 'null'],
                            },
                          ],
                        },
                      },
                      required: ['port'],
                      type: ['object', 'null'],
                    },
                    timeoutSeconds: {
                      description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                  },
                  type: ['object', 'null'],
                },
                resources: {
                  description: 'ResourceRequirements describes the compute resource requirements.',
                  properties: {
                    limits: {
                      additionalProperties: {
                        oneOf: [
                          {
                            type: ['string', 'null'],
                          },
                          {
                            type: ['number', 'null'],
                          },
                        ],
                      },
                      description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/',
                      type: ['object', 'null'],
                    },
                    requests: {
                      additionalProperties: {
                        oneOf: [
                          {
                            type: ['string', 'null'],
                          },
                          {
                            type: ['number', 'null'],
                          },
                        ],
                      },
                      description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/',
                      type: ['object', 'null'],
                    },
                  },
                  type: ['object', 'null'],
                },
                securityContext: {
                  description: 'SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.',
                  properties: {
                    allowPrivilegeEscalation: {
                      description: 'AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN',
                      type: ['boolean', 'null'],
                    },
                    capabilities: {
                      description: 'Adds and removes POSIX capabilities from running containers.',
                      properties: {
                        add: {
                          description: 'Added capabilities',
                          items: {
                            type: ['string', 'null'],
                          },
                          type: ['array', 'null'],
                        },
                        drop: {
                          description: 'Removed capabilities',
                          items: {
                            type: ['string', 'null'],
                          },
                          type: ['array', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                    privileged: {
                      description: 'Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.',
                      type: ['boolean', 'null'],
                    },
                    procMount: {
                      description: 'procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.',
                      type: ['string', 'null'],
                    },
                    readOnlyRootFilesystem: {
                      description: 'Whether this container has a read-only root filesystem. Default is false.',
                      type: ['boolean', 'null'],
                    },
                    runAsGroup: {
                      description: 'The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                      format: 'int64',
                      type: ['integer', 'null'],
                    },
                    runAsNonRoot: {
                      description: 'Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                      type: ['boolean', 'null'],
                    },
                    runAsUser: {
                      description: 'The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                      format: 'int64',
                      type: ['integer', 'null'],
                    },
                    seLinuxOptions: {
                      description: 'SELinuxOptions are the labels to be applied to the container',
                      properties: {
                        level: {
                          description: 'Level is SELinux level label that applies to the container.',
                          type: ['string', 'null'],
                        },
                        role: {
                          description: 'Role is a SELinux role label that applies to the container.',
                          type: ['string', 'null'],
                        },
                        type: {
                          description: 'Type is a SELinux type label that applies to the container.',
                          type: ['string', 'null'],
                        },
                        user: {
                          description: 'User is a SELinux user label that applies to the container.',
                          type: ['string', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                    windowsOptions: {
                      description: 'WindowsSecurityContextOptions contain Windows-specific options and credentials.',
                      properties: {
                        gmsaCredentialSpec: {
                          description: 'GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.',
                          type: ['string', 'null'],
                        },
                        gmsaCredentialSpecName: {
                          description: 'GMSACredentialSpecName is the name of the GMSA credential spec to use.',
                          type: ['string', 'null'],
                        },
                        runAsUserName: {
                          description: 'The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                          type: ['string', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                  },
                  type: ['object', 'null'],
                },
                startupProbe: {
                  description: 'Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.',
                  properties: {
                    exec: {
                      description: 'ExecAction describes a "run in container" action.',
                      properties: {
                        command: {
                          description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                          items: {
                            type: ['string', 'null'],
                          },
                          type: ['array', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                    failureThreshold: {
                      description: 'Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    httpGet: {
                      description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                      properties: {
                        host: {
                          description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                          type: ['string', 'null'],
                        },
                        httpHeaders: {
                          description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                          items: {
                            description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                            properties: {
                              name: {
                                description: 'The header field name',
                                type: 'string',
                              },
                              value: {
                                description: 'The header field value',
                                type: 'string',
                              },
                            },
                            required: ['name', 'value'],
                            type: ['object', 'null'],
                          },
                          type: ['array', 'null'],
                        },
                        path: {
                          description: 'Path to access on the HTTP server.',
                          type: ['string', 'null'],
                        },
                        port: {
                          oneOf: [
                            {
                              type: ['string', 'null'],
                            },
                            {
                              type: ['integer', 'null'],
                            },
                          ],
                        },
                        scheme: {
                          description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                          type: ['string', 'null'],
                        },
                      },
                      required: ['port'],
                      type: ['object', 'null'],
                    },
                    initialDelaySeconds: {
                      description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    periodSeconds: {
                      description: 'How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    successThreshold: {
                      description: 'Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    tcpSocket: {
                      description: 'TCPSocketAction describes an action based on opening a socket',
                      properties: {
                        host: {
                          description: 'Optional: Host name to connect to, defaults to the pod IP.',
                          type: ['string', 'null'],
                        },
                        port: {
                          oneOf: [
                            {
                              type: ['string', 'null'],
                            },
                            {
                              type: ['integer', 'null'],
                            },
                          ],
                        },
                      },
                      required: ['port'],
                      type: ['object', 'null'],
                    },
                    timeoutSeconds: {
                      description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                  },
                  type: ['object', 'null'],
                },
                stdin: {
                  description: 'Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.',
                  type: ['boolean', 'null'],
                },
                stdinOnce: {
                  description:
                    'Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false',
                  type: ['boolean', 'null'],
                },
                targetContainerName: {
                  description: 'If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container is run in whatever namespaces are shared for the pod. Note that the container runtime must support this feature.',
                  type: ['string', 'null'],
                },
                terminationMessagePath: {
                  description: "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                  type: ['string', 'null'],
                },
                terminationMessagePolicy: {
                  description: 'Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.',
                  type: ['string', 'null'],
                },
                tty: {
                  description: "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                  type: ['boolean', 'null'],
                },
                volumeDevices: {
                  description: 'volumeDevices is the list of block devices to be used by the container.',
                  items: {
                    description: 'volumeDevice describes a mapping of a raw block device within a container.',
                    properties: {
                      devicePath: {
                        description: 'devicePath is the path inside of the container that the device will be mapped to.',
                        type: 'string',
                      },
                      name: {
                        description: 'name must match the name of a persistentVolumeClaim in the pod',
                        type: 'string',
                      },
                    },
                    required: ['name', 'devicePath'],
                    type: ['object', 'null'],
                  },
                  type: ['array', 'null'],
                  'x-kubernetes-patch-merge-key': 'devicePath',
                  'x-kubernetes-patch-strategy': 'merge',
                },
                volumeMounts: {
                  description: "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                  items: {
                    description: 'VolumeMount describes a mounting of a Volume within a container.',
                    properties: {
                      mountPath: {
                        description: "Path within the container at which the volume should be mounted.  Must not contain ':'.",
                        type: 'string',
                      },
                      mountPropagation: {
                        description: 'mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.',
                        type: ['string', 'null'],
                      },
                      name: {
                        description: 'This must match the Name of a Volume.',
                        type: 'string',
                      },
                      readOnly: {
                        description: 'Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.',
                        type: ['boolean', 'null'],
                      },
                      subPath: {
                        description: 'Path within the volume from which the container\'s volume should be mounted. Defaults to "" (volume\'s root).',
                        type: ['string', 'null'],
                      },
                      subPathExpr: {
                        description: "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.",
                        type: ['string', 'null'],
                      },
                    },
                    required: ['name', 'mountPath'],
                    type: ['object', 'null'],
                  },
                  type: ['array', 'null'],
                  'x-kubernetes-patch-merge-key': 'mountPath',
                  'x-kubernetes-patch-strategy': 'merge',
                },
                workingDir: {
                  description: "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                  type: ['string', 'null'],
                },
              },
              required: ['name'],
              type: ['object', 'null'],
            },
            type: ['array', 'null'],
            'x-kubernetes-patch-merge-key': 'name',
            'x-kubernetes-patch-strategy': 'merge',
          },
          hostAliases: {
            description: "HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.",
            items: {
              description: "HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.",
              properties: {
                hostnames: {
                  description: 'Hostnames for the above IP address.',
                  items: {
                    type: ['string', 'null'],
                  },
                  type: ['array', 'null'],
                },
                ip: {
                  description: 'IP address of the host file entry.',
                  type: ['string', 'null'],
                },
              },
              type: ['object', 'null'],
            },
            type: ['array', 'null'],
            'x-kubernetes-patch-merge-key': 'ip',
            'x-kubernetes-patch-strategy': 'merge',
          },
          hostIPC: {
            description: "Use the host's ipc namespace. Optional: Default to false.",
            type: ['boolean', 'null'],
          },
          hostNetwork: {
            description: "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.",
            type: ['boolean', 'null'],
          },
          hostPID: {
            description: "Use the host's pid namespace. Optional: Default to false.",
            type: ['boolean', 'null'],
          },
          hostname: {
            description: "Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.",
            type: ['string', 'null'],
          },
          imagePullSecrets: {
            description: 'ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod',
            items: {
              description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
              properties: {
                name: {
                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                  type: ['string', 'null'],
                },
              },
              type: ['object', 'null'],
            },
            type: ['array', 'null'],
            'x-kubernetes-patch-merge-key': 'name',
            'x-kubernetes-patch-strategy': 'merge',
          },
          initContainers: {
            description:
              'List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/',
            items: {
              description: 'A single application container that you want to run within a pod.',
              properties: {
                args: {
                  description:
                    "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                  items: {
                    type: ['string', 'null'],
                  },
                  type: ['array', 'null'],
                },
                command: {
                  description:
                    "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                  items: {
                    type: ['string', 'null'],
                  },
                  type: ['array', 'null'],
                },
                env: {
                  description: 'List of environment variables to set in the container. Cannot be updated.',
                  items: {
                    description: 'EnvVar represents an environment variable present in a Container.',
                    properties: {
                      name: {
                        description: 'Name of the environment variable. Must be a C_IDENTIFIER.',
                        type: 'string',
                      },
                      value: {
                        description: 'Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".',
                        type: ['string', 'null'],
                      },
                      valueFrom: {
                        description: 'EnvVarSource represents a source for the value of an EnvVar.',
                        properties: {
                          configMapKeyRef: {
                            description: 'Selects a key from a ConfigMap.',
                            properties: {
                              key: {
                                description: 'The key to select.',
                                type: 'string',
                              },
                              name: {
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                type: ['string', 'null'],
                              },
                              optional: {
                                description: 'Specify whether the ConfigMap or its key must be defined',
                                type: ['boolean', 'null'],
                              },
                            },
                            required: ['key'],
                            type: ['object', 'null'],
                          },
                          fieldRef: {
                            description: 'ObjectFieldSelector selects an APIVersioned field of an object.',
                            properties: {
                              apiVersion: {
                                description: 'Version of the schema the FieldPath is written in terms of, defaults to "v1".',
                                type: ['string', 'null'],
                              },
                              fieldPath: {
                                description: 'Path of the field to select in the specified API version.',
                                type: 'string',
                              },
                            },
                            required: ['fieldPath'],
                            type: ['object', 'null'],
                          },
                          resourceFieldRef: {
                            description: 'ResourceFieldSelector represents container resources (cpu, memory) and their output format',
                            properties: {
                              containerName: {
                                description: 'Container name: required for volumes, optional for env vars',
                                type: ['string', 'null'],
                              },
                              divisor: {
                                oneOf: [
                                  {
                                    type: ['string', 'null'],
                                  },
                                  {
                                    type: ['number', 'null'],
                                  },
                                ],
                              },
                              resource: {
                                description: 'Required: resource to select',
                                type: 'string',
                              },
                            },
                            required: ['resource'],
                            type: ['object', 'null'],
                          },
                          secretKeyRef: {
                            description: 'SecretKeySelector selects a key of a Secret.',
                            properties: {
                              key: {
                                description: 'The key of the secret to select from.  Must be a valid secret key.',
                                type: 'string',
                              },
                              name: {
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                type: ['string', 'null'],
                              },
                              optional: {
                                description: 'Specify whether the Secret or its key must be defined',
                                type: ['boolean', 'null'],
                              },
                            },
                            required: ['key'],
                            type: ['object', 'null'],
                          },
                        },
                        type: ['object', 'null'],
                      },
                    },
                    required: ['name'],
                    type: ['object', 'null'],
                  },
                  type: ['array', 'null'],
                  'x-kubernetes-patch-merge-key': 'name',
                  'x-kubernetes-patch-strategy': 'merge',
                },
                envFrom: {
                  description: 'List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.',
                  items: {
                    description: 'EnvFromSource represents the source of a set of ConfigMaps',
                    properties: {
                      configMapRef: {
                        description: "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
                        properties: {
                          name: {
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                            type: ['string', 'null'],
                          },
                          optional: {
                            description: 'Specify whether the ConfigMap must be defined',
                            type: ['boolean', 'null'],
                          },
                        },
                        type: ['object', 'null'],
                      },
                      prefix: {
                        description: 'An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.',
                        type: ['string', 'null'],
                      },
                      secretRef: {
                        description: "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
                        properties: {
                          name: {
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                            type: ['string', 'null'],
                          },
                          optional: {
                            description: 'Specify whether the Secret must be defined',
                            type: ['boolean', 'null'],
                          },
                        },
                        type: ['object', 'null'],
                      },
                    },
                    type: ['object', 'null'],
                  },
                  type: ['array', 'null'],
                },
                image: {
                  description: 'Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.',
                  type: ['string', 'null'],
                },
                imagePullPolicy: {
                  description: 'Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images',
                  type: ['string', 'null'],
                },
                lifecycle: {
                  description: 'Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.',
                  properties: {
                    postStart: {
                      description: 'Handler defines a specific action that should be taken',
                      properties: {
                        exec: {
                          description: 'ExecAction describes a "run in container" action.',
                          properties: {
                            command: {
                              description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                              items: {
                                type: ['string', 'null'],
                              },
                              type: ['array', 'null'],
                            },
                          },
                          type: ['object', 'null'],
                        },
                        httpGet: {
                          description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                          properties: {
                            host: {
                              description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                              type: ['string', 'null'],
                            },
                            httpHeaders: {
                              description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                              items: {
                                description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                properties: {
                                  name: {
                                    description: 'The header field name',
                                    type: 'string',
                                  },
                                  value: {
                                    description: 'The header field value',
                                    type: 'string',
                                  },
                                },
                                required: ['name', 'value'],
                                type: ['object', 'null'],
                              },
                              type: ['array', 'null'],
                            },
                            path: {
                              description: 'Path to access on the HTTP server.',
                              type: ['string', 'null'],
                            },
                            port: {
                              oneOf: [
                                {
                                  type: ['string', 'null'],
                                },
                                {
                                  type: ['integer', 'null'],
                                },
                              ],
                            },
                            scheme: {
                              description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                              type: ['string', 'null'],
                            },
                          },
                          required: ['port'],
                          type: ['object', 'null'],
                        },
                        tcpSocket: {
                          description: 'TCPSocketAction describes an action based on opening a socket',
                          properties: {
                            host: {
                              description: 'Optional: Host name to connect to, defaults to the pod IP.',
                              type: ['string', 'null'],
                            },
                            port: {
                              oneOf: [
                                {
                                  type: ['string', 'null'],
                                },
                                {
                                  type: ['integer', 'null'],
                                },
                              ],
                            },
                          },
                          required: ['port'],
                          type: ['object', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                    preStop: {
                      description: 'Handler defines a specific action that should be taken',
                      properties: {
                        exec: {
                          description: 'ExecAction describes a "run in container" action.',
                          properties: {
                            command: {
                              description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                              items: {
                                type: ['string', 'null'],
                              },
                              type: ['array', 'null'],
                            },
                          },
                          type: ['object', 'null'],
                        },
                        httpGet: {
                          description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                          properties: {
                            host: {
                              description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                              type: ['string', 'null'],
                            },
                            httpHeaders: {
                              description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                              items: {
                                description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                properties: {
                                  name: {
                                    description: 'The header field name',
                                    type: 'string',
                                  },
                                  value: {
                                    description: 'The header field value',
                                    type: 'string',
                                  },
                                },
                                required: ['name', 'value'],
                                type: ['object', 'null'],
                              },
                              type: ['array', 'null'],
                            },
                            path: {
                              description: 'Path to access on the HTTP server.',
                              type: ['string', 'null'],
                            },
                            port: {
                              oneOf: [
                                {
                                  type: ['string', 'null'],
                                },
                                {
                                  type: ['integer', 'null'],
                                },
                              ],
                            },
                            scheme: {
                              description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                              type: ['string', 'null'],
                            },
                          },
                          required: ['port'],
                          type: ['object', 'null'],
                        },
                        tcpSocket: {
                          description: 'TCPSocketAction describes an action based on opening a socket',
                          properties: {
                            host: {
                              description: 'Optional: Host name to connect to, defaults to the pod IP.',
                              type: ['string', 'null'],
                            },
                            port: {
                              oneOf: [
                                {
                                  type: ['string', 'null'],
                                },
                                {
                                  type: ['integer', 'null'],
                                },
                              ],
                            },
                          },
                          required: ['port'],
                          type: ['object', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                  },
                  type: ['object', 'null'],
                },
                livenessProbe: {
                  description: 'Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.',
                  properties: {
                    exec: {
                      description: 'ExecAction describes a "run in container" action.',
                      properties: {
                        command: {
                          description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                          items: {
                            type: ['string', 'null'],
                          },
                          type: ['array', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                    failureThreshold: {
                      description: 'Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    httpGet: {
                      description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                      properties: {
                        host: {
                          description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                          type: ['string', 'null'],
                        },
                        httpHeaders: {
                          description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                          items: {
                            description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                            properties: {
                              name: {
                                description: 'The header field name',
                                type: 'string',
                              },
                              value: {
                                description: 'The header field value',
                                type: 'string',
                              },
                            },
                            required: ['name', 'value'],
                            type: ['object', 'null'],
                          },
                          type: ['array', 'null'],
                        },
                        path: {
                          description: 'Path to access on the HTTP server.',
                          type: ['string', 'null'],
                        },
                        port: {
                          oneOf: [
                            {
                              type: ['string', 'null'],
                            },
                            {
                              type: ['integer', 'null'],
                            },
                          ],
                        },
                        scheme: {
                          description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                          type: ['string', 'null'],
                        },
                      },
                      required: ['port'],
                      type: ['object', 'null'],
                    },
                    initialDelaySeconds: {
                      description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    periodSeconds: {
                      description: 'How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    successThreshold: {
                      description: 'Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    tcpSocket: {
                      description: 'TCPSocketAction describes an action based on opening a socket',
                      properties: {
                        host: {
                          description: 'Optional: Host name to connect to, defaults to the pod IP.',
                          type: ['string', 'null'],
                        },
                        port: {
                          oneOf: [
                            {
                              type: ['string', 'null'],
                            },
                            {
                              type: ['integer', 'null'],
                            },
                          ],
                        },
                      },
                      required: ['port'],
                      type: ['object', 'null'],
                    },
                    timeoutSeconds: {
                      description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                  },
                  type: ['object', 'null'],
                },
                name: {
                  description: 'Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.',
                  type: 'string',
                },
                ports: {
                  description: 'List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.',
                  items: {
                    description: 'ContainerPort represents a network port in a single container.',
                    properties: {
                      containerPort: {
                        description: "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
                        format: 'int32',
                        type: 'integer',
                      },
                      hostIP: {
                        description: 'What host IP to bind the external port to.',
                        type: ['string', 'null'],
                      },
                      hostPort: {
                        description: 'Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.',
                        format: 'int32',
                        type: ['integer', 'null'],
                      },
                      name: {
                        description: 'If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.',
                        type: ['string', 'null'],
                      },
                      protocol: {
                        description: 'Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".',
                        type: ['string', 'null'],
                      },
                    },
                    required: ['containerPort'],
                    type: ['object', 'null'],
                  },
                  type: ['array', 'null'],
                  'x-kubernetes-list-map-keys': ['containerPort', 'protocol'],
                  'x-kubernetes-list-type': 'map',
                  'x-kubernetes-patch-merge-key': 'containerPort',
                  'x-kubernetes-patch-strategy': 'merge',
                },
                readinessProbe: {
                  description: 'Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.',
                  properties: {
                    exec: {
                      description: 'ExecAction describes a "run in container" action.',
                      properties: {
                        command: {
                          description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                          items: {
                            type: ['string', 'null'],
                          },
                          type: ['array', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                    failureThreshold: {
                      description: 'Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    httpGet: {
                      description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                      properties: {
                        host: {
                          description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                          type: ['string', 'null'],
                        },
                        httpHeaders: {
                          description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                          items: {
                            description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                            properties: {
                              name: {
                                description: 'The header field name',
                                type: 'string',
                              },
                              value: {
                                description: 'The header field value',
                                type: 'string',
                              },
                            },
                            required: ['name', 'value'],
                            type: ['object', 'null'],
                          },
                          type: ['array', 'null'],
                        },
                        path: {
                          description: 'Path to access on the HTTP server.',
                          type: ['string', 'null'],
                        },
                        port: {
                          oneOf: [
                            {
                              type: ['string', 'null'],
                            },
                            {
                              type: ['integer', 'null'],
                            },
                          ],
                        },
                        scheme: {
                          description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                          type: ['string', 'null'],
                        },
                      },
                      required: ['port'],
                      type: ['object', 'null'],
                    },
                    initialDelaySeconds: {
                      description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    periodSeconds: {
                      description: 'How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    successThreshold: {
                      description: 'Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    tcpSocket: {
                      description: 'TCPSocketAction describes an action based on opening a socket',
                      properties: {
                        host: {
                          description: 'Optional: Host name to connect to, defaults to the pod IP.',
                          type: ['string', 'null'],
                        },
                        port: {
                          oneOf: [
                            {
                              type: ['string', 'null'],
                            },
                            {
                              type: ['integer', 'null'],
                            },
                          ],
                        },
                      },
                      required: ['port'],
                      type: ['object', 'null'],
                    },
                    timeoutSeconds: {
                      description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                  },
                  type: ['object', 'null'],
                },
                resources: {
                  description: 'ResourceRequirements describes the compute resource requirements.',
                  properties: {
                    limits: {
                      additionalProperties: {
                        oneOf: [
                          {
                            type: ['string', 'null'],
                          },
                          {
                            type: ['number', 'null'],
                          },
                        ],
                      },
                      description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/',
                      type: ['object', 'null'],
                    },
                    requests: {
                      additionalProperties: {
                        oneOf: [
                          {
                            type: ['string', 'null'],
                          },
                          {
                            type: ['number', 'null'],
                          },
                        ],
                      },
                      description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/',
                      type: ['object', 'null'],
                    },
                  },
                  type: ['object', 'null'],
                },
                securityContext: {
                  description: 'SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.',
                  properties: {
                    allowPrivilegeEscalation: {
                      description: 'AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN',
                      type: ['boolean', 'null'],
                    },
                    capabilities: {
                      description: 'Adds and removes POSIX capabilities from running containers.',
                      properties: {
                        add: {
                          description: 'Added capabilities',
                          items: {
                            type: ['string', 'null'],
                          },
                          type: ['array', 'null'],
                        },
                        drop: {
                          description: 'Removed capabilities',
                          items: {
                            type: ['string', 'null'],
                          },
                          type: ['array', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                    privileged: {
                      description: 'Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.',
                      type: ['boolean', 'null'],
                    },
                    procMount: {
                      description: 'procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.',
                      type: ['string', 'null'],
                    },
                    readOnlyRootFilesystem: {
                      description: 'Whether this container has a read-only root filesystem. Default is false.',
                      type: ['boolean', 'null'],
                    },
                    runAsGroup: {
                      description: 'The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                      format: 'int64',
                      type: ['integer', 'null'],
                    },
                    runAsNonRoot: {
                      description: 'Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                      type: ['boolean', 'null'],
                    },
                    runAsUser: {
                      description: 'The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                      format: 'int64',
                      type: ['integer', 'null'],
                    },
                    seLinuxOptions: {
                      description: 'SELinuxOptions are the labels to be applied to the container',
                      properties: {
                        level: {
                          description: 'Level is SELinux level label that applies to the container.',
                          type: ['string', 'null'],
                        },
                        role: {
                          description: 'Role is a SELinux role label that applies to the container.',
                          type: ['string', 'null'],
                        },
                        type: {
                          description: 'Type is a SELinux type label that applies to the container.',
                          type: ['string', 'null'],
                        },
                        user: {
                          description: 'User is a SELinux user label that applies to the container.',
                          type: ['string', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                    windowsOptions: {
                      description: 'WindowsSecurityContextOptions contain Windows-specific options and credentials.',
                      properties: {
                        gmsaCredentialSpec: {
                          description: 'GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.',
                          type: ['string', 'null'],
                        },
                        gmsaCredentialSpecName: {
                          description: 'GMSACredentialSpecName is the name of the GMSA credential spec to use.',
                          type: ['string', 'null'],
                        },
                        runAsUserName: {
                          description: 'The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                          type: ['string', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                  },
                  type: ['object', 'null'],
                },
                startupProbe: {
                  description: 'Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.',
                  properties: {
                    exec: {
                      description: 'ExecAction describes a "run in container" action.',
                      properties: {
                        command: {
                          description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                          items: {
                            type: ['string', 'null'],
                          },
                          type: ['array', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                    failureThreshold: {
                      description: 'Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    httpGet: {
                      description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                      properties: {
                        host: {
                          description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                          type: ['string', 'null'],
                        },
                        httpHeaders: {
                          description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                          items: {
                            description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                            properties: {
                              name: {
                                description: 'The header field name',
                                type: 'string',
                              },
                              value: {
                                description: 'The header field value',
                                type: 'string',
                              },
                            },
                            required: ['name', 'value'],
                            type: ['object', 'null'],
                          },
                          type: ['array', 'null'],
                        },
                        path: {
                          description: 'Path to access on the HTTP server.',
                          type: ['string', 'null'],
                        },
                        port: {
                          oneOf: [
                            {
                              type: ['string', 'null'],
                            },
                            {
                              type: ['integer', 'null'],
                            },
                          ],
                        },
                        scheme: {
                          description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                          type: ['string', 'null'],
                        },
                      },
                      required: ['port'],
                      type: ['object', 'null'],
                    },
                    initialDelaySeconds: {
                      description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    periodSeconds: {
                      description: 'How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    successThreshold: {
                      description: 'Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    tcpSocket: {
                      description: 'TCPSocketAction describes an action based on opening a socket',
                      properties: {
                        host: {
                          description: 'Optional: Host name to connect to, defaults to the pod IP.',
                          type: ['string', 'null'],
                        },
                        port: {
                          oneOf: [
                            {
                              type: ['string', 'null'],
                            },
                            {
                              type: ['integer', 'null'],
                            },
                          ],
                        },
                      },
                      required: ['port'],
                      type: ['object', 'null'],
                    },
                    timeoutSeconds: {
                      description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                  },
                  type: ['object', 'null'],
                },
                stdin: {
                  description: 'Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.',
                  type: ['boolean', 'null'],
                },
                stdinOnce: {
                  description:
                    'Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false',
                  type: ['boolean', 'null'],
                },
                terminationMessagePath: {
                  description: "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                  type: ['string', 'null'],
                },
                terminationMessagePolicy: {
                  description: 'Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.',
                  type: ['string', 'null'],
                },
                tty: {
                  description: "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                  type: ['boolean', 'null'],
                },
                volumeDevices: {
                  description: 'volumeDevices is the list of block devices to be used by the container.',
                  items: {
                    description: 'volumeDevice describes a mapping of a raw block device within a container.',
                    properties: {
                      devicePath: {
                        description: 'devicePath is the path inside of the container that the device will be mapped to.',
                        type: 'string',
                      },
                      name: {
                        description: 'name must match the name of a persistentVolumeClaim in the pod',
                        type: 'string',
                      },
                    },
                    required: ['name', 'devicePath'],
                    type: ['object', 'null'],
                  },
                  type: ['array', 'null'],
                  'x-kubernetes-patch-merge-key': 'devicePath',
                  'x-kubernetes-patch-strategy': 'merge',
                },
                volumeMounts: {
                  description: "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                  items: {
                    description: 'VolumeMount describes a mounting of a Volume within a container.',
                    properties: {
                      mountPath: {
                        description: "Path within the container at which the volume should be mounted.  Must not contain ':'.",
                        type: 'string',
                      },
                      mountPropagation: {
                        description: 'mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.',
                        type: ['string', 'null'],
                      },
                      name: {
                        description: 'This must match the Name of a Volume.',
                        type: 'string',
                      },
                      readOnly: {
                        description: 'Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.',
                        type: ['boolean', 'null'],
                      },
                      subPath: {
                        description: 'Path within the volume from which the container\'s volume should be mounted. Defaults to "" (volume\'s root).',
                        type: ['string', 'null'],
                      },
                      subPathExpr: {
                        description: "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.",
                        type: ['string', 'null'],
                      },
                    },
                    required: ['name', 'mountPath'],
                    type: ['object', 'null'],
                  },
                  type: ['array', 'null'],
                  'x-kubernetes-patch-merge-key': 'mountPath',
                  'x-kubernetes-patch-strategy': 'merge',
                },
                workingDir: {
                  description: "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                  type: ['string', 'null'],
                },
              },
              required: ['name'],
              type: ['object', 'null'],
            },
            type: ['array', 'null'],
            'x-kubernetes-patch-merge-key': 'name',
            'x-kubernetes-patch-strategy': 'merge',
          },
          nodeName: {
            description: 'NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.',
            type: ['string', 'null'],
          },
          nodeSelector: {
            additionalProperties: {
              type: ['string', 'null'],
            },
            description: "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            type: ['object', 'null'],
          },
          overhead: {
            additionalProperties: {
              oneOf: [
                {
                  type: ['string', 'null'],
                },
                {
                  type: ['number', 'null'],
                },
              ],
            },
            description:
              'Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field is alpha-level as of Kubernetes v1.16, and is only honored by servers that enable the PodOverhead feature.',
            type: ['object', 'null'],
          },
          preemptionPolicy: {
            description: 'PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is alpha-level and is only honored by servers that enable the NonPreemptingPriority feature.',
            type: ['string', 'null'],
          },
          priority: {
            description: 'The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.',
            format: 'int32',
            type: ['integer', 'null'],
          },
          priorityClassName: {
            description: 'If specified, indicates the pod\'s priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.',
            type: ['string', 'null'],
          },
          readinessGates: {
            description: 'If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md',
            items: {
              description: 'PodReadinessGate contains the reference to a pod condition',
              properties: {
                conditionType: {
                  description: "ConditionType refers to a condition in the pod's condition list with matching type.",
                  type: 'string',
                },
              },
              required: ['conditionType'],
              type: ['object', 'null'],
            },
            type: ['array', 'null'],
          },
          restartPolicy: {
            description: 'Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy',
            type: ['string', 'null'],
          },
          runtimeClassName: {
            description: 'RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md This is a beta feature as of Kubernetes v1.14.',
            type: ['string', 'null'],
          },
          schedulerName: {
            description: 'If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.',
            type: ['string', 'null'],
          },
          securityContext: {
            description: 'PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.',
            properties: {
              fsGroup: {
                description: "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume.",
                format: 'int64',
                type: ['integer', 'null'],
              },
              fsGroupChangePolicy: {
                description: 'fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified defaults to "Always".',
                type: ['string', 'null'],
              },
              runAsGroup: {
                description: 'The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.',
                format: 'int64',
                type: ['integer', 'null'],
              },
              runAsNonRoot: {
                description: 'Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                type: ['boolean', 'null'],
              },
              runAsUser: {
                description: 'The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.',
                format: 'int64',
                type: ['integer', 'null'],
              },
              seLinuxOptions: {
                description: 'SELinuxOptions are the labels to be applied to the container',
                properties: {
                  level: {
                    description: 'Level is SELinux level label that applies to the container.',
                    type: ['string', 'null'],
                  },
                  role: {
                    description: 'Role is a SELinux role label that applies to the container.',
                    type: ['string', 'null'],
                  },
                  type: {
                    description: 'Type is a SELinux type label that applies to the container.',
                    type: ['string', 'null'],
                  },
                  user: {
                    description: 'User is a SELinux user label that applies to the container.',
                    type: ['string', 'null'],
                  },
                },
                type: ['object', 'null'],
              },
              supplementalGroups: {
                description: "A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.",
                items: {
                  format: 'int64',
                  type: ['integer', 'null'],
                },
                type: ['array', 'null'],
              },
              sysctls: {
                description: 'Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.',
                items: {
                  description: 'Sysctl defines a kernel parameter to be set',
                  properties: {
                    name: {
                      description: 'Name of a property to set',
                      type: 'string',
                    },
                    value: {
                      description: 'Value of a property to set',
                      type: 'string',
                    },
                  },
                  required: ['name', 'value'],
                  type: ['object', 'null'],
                },
                type: ['array', 'null'],
              },
              windowsOptions: {
                description: 'WindowsSecurityContextOptions contain Windows-specific options and credentials.',
                properties: {
                  gmsaCredentialSpec: {
                    description: 'GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.',
                    type: ['string', 'null'],
                  },
                  gmsaCredentialSpecName: {
                    description: 'GMSACredentialSpecName is the name of the GMSA credential spec to use.',
                    type: ['string', 'null'],
                  },
                  runAsUserName: {
                    description: 'The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                    type: ['string', 'null'],
                  },
                },
                type: ['object', 'null'],
              },
            },
            type: ['object', 'null'],
          },
          serviceAccount: {
            description: 'DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.',
            type: ['string', 'null'],
          },
          serviceAccountName: {
            description: 'ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/',
            type: ['string', 'null'],
          },
          shareProcessNamespace: {
            description: 'Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.',
            type: ['boolean', 'null'],
          },
          subdomain: {
            description: 'If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.',
            type: ['string', 'null'],
          },
          terminationGracePeriodSeconds: {
            description:
              'Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.',
            format: 'int64',
            type: ['integer', 'null'],
          },
          tolerations: {
            description: "If specified, the pod's tolerations.",
            items: {
              description: 'The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.',
              properties: {
                effect: {
                  description: 'Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.',
                  type: ['string', 'null'],
                },
                key: {
                  description: 'Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.',
                  type: ['string', 'null'],
                },
                operator: {
                  description: "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                  type: ['string', 'null'],
                },
                tolerationSeconds: {
                  description: 'TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.',
                  format: 'int64',
                  type: ['integer', 'null'],
                },
                value: {
                  description: 'Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.',
                  type: ['string', 'null'],
                },
              },
              type: ['object', 'null'],
            },
            type: ['array', 'null'],
          },
          topologySpreadConstraints: {
            description: 'TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. This field is only honored by clusters that enable the EvenPodsSpread feature. All topologySpreadConstraints are ANDed.',
            items: {
              description: 'TopologySpreadConstraint specifies how to spread matching pods among the given topology.',
              properties: {
                labelSelector: {
                  description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
                  properties: {
                    matchExpressions: {
                      description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                      items: {
                        description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                        properties: {
                          key: {
                            description: 'key is the label key that the selector applies to.',
                            type: 'string',
                            'x-kubernetes-patch-merge-key': 'key',
                            'x-kubernetes-patch-strategy': 'merge',
                          },
                          operator: {
                            description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                            type: 'string',
                          },
                          values: {
                            description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                            items: {
                              type: ['string', 'null'],
                            },
                            type: ['array', 'null'],
                          },
                        },
                        required: ['key', 'operator'],
                        type: ['object', 'null'],
                      },
                      type: ['array', 'null'],
                    },
                    matchLabels: {
                      additionalProperties: {
                        type: ['string', 'null'],
                      },
                      description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                      type: ['object', 'null'],
                    },
                  },
                  type: ['object', 'null'],
                },
                maxSkew: {
                  description:
                    "MaxSkew describes the degree to which pods may be unevenly distributed. It's the maximum permitted difference between the number of matching pods in any two topology domains of a given topology type. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. It's a required field. Default value is 1 and 0 is not allowed.",
                  format: 'int32',
                  type: 'integer',
                },
                topologyKey: {
                  description: 'TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. It\'s a required field.',
                  type: 'string',
                },
                whenUnsatisfiable: {
                  description:
                    'WhenUnsatisfiable indicates how to deal with a pod if it doesn\'t satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it - ScheduleAnyway tells the scheduler to still schedule it It\'s considered as "Unsatisfiable" if and only if placing incoming pod on any topology violates "MaxSkew". For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won\'t make it *more* imbalanced. It\'s a required field.',
                  type: 'string',
                },
              },
              required: ['maxSkew', 'topologyKey', 'whenUnsatisfiable'],
              type: ['object', 'null'],
            },
            type: ['array', 'null'],
            'x-kubernetes-list-map-keys': ['topologyKey', 'whenUnsatisfiable'],
            'x-kubernetes-list-type': 'map',
            'x-kubernetes-patch-merge-key': 'topologyKey',
            'x-kubernetes-patch-strategy': 'merge',
          },
          volumes: {
            description: 'List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes',
            items: {
              description: 'Volume represents a named volume in a pod that may be accessed by any container in the pod.',
              properties: {
                awsElasticBlockStore: {
                  description: 'Represents a Persistent Disk resource in AWS.\n\nAn AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.',
                  properties: {
                    fsType: {
                      description: 'Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore',
                      type: ['string', 'null'],
                    },
                    partition: {
                      description: 'The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    readOnly: {
                      description: 'Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore',
                      type: ['boolean', 'null'],
                    },
                    volumeID: {
                      description: 'Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore',
                      type: 'string',
                    },
                  },
                  required: ['volumeID'],
                  type: ['object', 'null'],
                },
                azureDisk: {
                  description: 'AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.',
                  properties: {
                    cachingMode: {
                      description: 'Host Caching mode: None, Read Only, Read Write.',
                      type: ['string', 'null'],
                    },
                    diskName: {
                      description: 'The Name of the data disk in the blob storage',
                      type: 'string',
                    },
                    diskURI: {
                      description: 'The URI the data disk in the blob storage',
                      type: 'string',
                    },
                    fsType: {
                      description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                      type: ['string', 'null'],
                    },
                    kind: {
                      description: 'Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared',
                      type: ['string', 'null'],
                    },
                    readOnly: {
                      description: 'Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                      type: ['boolean', 'null'],
                    },
                  },
                  required: ['diskName', 'diskURI'],
                  type: ['object', 'null'],
                },
                azureFile: {
                  description: 'AzureFile represents an Azure File Service mount on the host and bind mount to the pod.',
                  properties: {
                    readOnly: {
                      description: 'Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                      type: ['boolean', 'null'],
                    },
                    secretName: {
                      description: 'the name of secret that contains Azure Storage Account Name and Key',
                      type: 'string',
                    },
                    shareName: {
                      description: 'Share Name',
                      type: 'string',
                    },
                  },
                  required: ['secretName', 'shareName'],
                  type: ['object', 'null'],
                },
                cephfs: {
                  description: 'Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.',
                  properties: {
                    monitors: {
                      description: 'Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it',
                      items: {
                        type: ['string', 'null'],
                      },
                      type: 'array',
                    },
                    path: {
                      description: 'Optional: Used as the mounted root, rather than the full Ceph tree, default is /',
                      type: ['string', 'null'],
                    },
                    readOnly: {
                      description: 'Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it',
                      type: ['boolean', 'null'],
                    },
                    secretFile: {
                      description: 'Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it',
                      type: ['string', 'null'],
                    },
                    secretRef: {
                      description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                      properties: {
                        name: {
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                          type: ['string', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                    user: {
                      description: 'Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it',
                      type: ['string', 'null'],
                    },
                  },
                  required: ['monitors'],
                  type: ['object', 'null'],
                },
                cinder: {
                  description: 'Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.',
                  properties: {
                    fsType: {
                      description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md',
                      type: ['string', 'null'],
                    },
                    readOnly: {
                      description: 'Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md',
                      type: ['boolean', 'null'],
                    },
                    secretRef: {
                      description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                      properties: {
                        name: {
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                          type: ['string', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                    volumeID: {
                      description: 'volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md',
                      type: 'string',
                    },
                  },
                  required: ['volumeID'],
                  type: ['object', 'null'],
                },
                configMap: {
                  description: "Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.",
                  properties: {
                    defaultMode: {
                      description: 'Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    items: {
                      description:
                        "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                      items: {
                        description: 'Maps a string key to a path within a volume.',
                        properties: {
                          key: {
                            description: 'The key to project.',
                            type: 'string',
                          },
                          mode: {
                            description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                            format: 'int32',
                            type: ['integer', 'null'],
                          },
                          path: {
                            description: "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                            type: 'string',
                          },
                        },
                        required: ['key', 'path'],
                        type: ['object', 'null'],
                      },
                      type: ['array', 'null'],
                    },
                    name: {
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                      type: ['string', 'null'],
                    },
                    optional: {
                      description: 'Specify whether the ConfigMap or its keys must be defined',
                      type: ['boolean', 'null'],
                    },
                  },
                  type: ['object', 'null'],
                },
                csi: {
                  description: 'Represents a source location of a volume to mount, managed by an external CSI driver',
                  properties: {
                    driver: {
                      description: 'Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.',
                      type: 'string',
                    },
                    fsType: {
                      description: 'Filesystem type to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.',
                      type: ['string', 'null'],
                    },
                    nodePublishSecretRef: {
                      description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                      properties: {
                        name: {
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                          type: ['string', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                    readOnly: {
                      description: 'Specifies a read-only configuration for the volume. Defaults to false (read/write).',
                      type: ['boolean', 'null'],
                    },
                    volumeAttributes: {
                      additionalProperties: {
                        type: ['string', 'null'],
                      },
                      description: "VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.",
                      type: ['object', 'null'],
                    },
                  },
                  required: ['driver'],
                  type: ['object', 'null'],
                },
                downwardAPI: {
                  description: 'DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.',
                  properties: {
                    defaultMode: {
                      description: 'Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    items: {
                      description: 'Items is a list of downward API volume file',
                      items: {
                        description: 'DownwardAPIVolumeFile represents information to create the file containing the pod field',
                        properties: {
                          fieldRef: {
                            description: 'ObjectFieldSelector selects an APIVersioned field of an object.',
                            properties: {
                              apiVersion: {
                                description: 'Version of the schema the FieldPath is written in terms of, defaults to "v1".',
                                type: ['string', 'null'],
                              },
                              fieldPath: {
                                description: 'Path of the field to select in the specified API version.',
                                type: 'string',
                              },
                            },
                            required: ['fieldPath'],
                            type: ['object', 'null'],
                          },
                          mode: {
                            description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                            format: 'int32',
                            type: ['integer', 'null'],
                          },
                          path: {
                            description: "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
                            type: 'string',
                          },
                          resourceFieldRef: {
                            description: 'ResourceFieldSelector represents container resources (cpu, memory) and their output format',
                            properties: {
                              containerName: {
                                description: 'Container name: required for volumes, optional for env vars',
                                type: ['string', 'null'],
                              },
                              divisor: {
                                oneOf: [
                                  {
                                    type: ['string', 'null'],
                                  },
                                  {
                                    type: ['number', 'null'],
                                  },
                                ],
                              },
                              resource: {
                                description: 'Required: resource to select',
                                type: 'string',
                              },
                            },
                            required: ['resource'],
                            type: ['object', 'null'],
                          },
                        },
                        required: ['path'],
                        type: ['object', 'null'],
                      },
                      type: ['array', 'null'],
                    },
                  },
                  type: ['object', 'null'],
                },
                emptyDir: {
                  description: 'Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.',
                  properties: {
                    medium: {
                      description: 'What type of storage medium should back this directory. The default is "" which means to use the node\'s default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir',
                      type: ['string', 'null'],
                    },
                    sizeLimit: {
                      oneOf: [
                        {
                          type: ['string', 'null'],
                        },
                        {
                          type: ['number', 'null'],
                        },
                      ],
                    },
                  },
                  type: ['object', 'null'],
                },
                fc: {
                  description: 'Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.',
                  properties: {
                    fsType: {
                      description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                      type: ['string', 'null'],
                    },
                    lun: {
                      description: 'Optional: FC target lun number',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    readOnly: {
                      description: 'Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                      type: ['boolean', 'null'],
                    },
                    targetWWNs: {
                      description: 'Optional: FC target worldwide names (WWNs)',
                      items: {
                        type: ['string', 'null'],
                      },
                      type: ['array', 'null'],
                    },
                    wwids: {
                      description: 'Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.',
                      items: {
                        type: ['string', 'null'],
                      },
                      type: ['array', 'null'],
                    },
                  },
                  type: ['object', 'null'],
                },
                flexVolume: {
                  description: 'FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.',
                  properties: {
                    driver: {
                      description: 'Driver is the name of the driver to use for this volume.',
                      type: 'string',
                    },
                    fsType: {
                      description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.',
                      type: ['string', 'null'],
                    },
                    options: {
                      additionalProperties: {
                        type: ['string', 'null'],
                      },
                      description: 'Optional: Extra command options if any.',
                      type: ['object', 'null'],
                    },
                    readOnly: {
                      description: 'Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                      type: ['boolean', 'null'],
                    },
                    secretRef: {
                      description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                      properties: {
                        name: {
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                          type: ['string', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                  },
                  required: ['driver'],
                  type: ['object', 'null'],
                },
                flocker: {
                  description: 'Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.',
                  properties: {
                    datasetName: {
                      description: 'Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated',
                      type: ['string', 'null'],
                    },
                    datasetUUID: {
                      description: 'UUID of the dataset. This is unique identifier of a Flocker dataset',
                      type: ['string', 'null'],
                    },
                  },
                  type: ['object', 'null'],
                },
                gcePersistentDisk: {
                  description: 'Represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.',
                  properties: {
                    fsType: {
                      description: 'Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
                      type: ['string', 'null'],
                    },
                    partition: {
                      description: 'The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    pdName: {
                      description: 'Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
                      type: 'string',
                    },
                    readOnly: {
                      description: 'ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
                      type: ['boolean', 'null'],
                    },
                  },
                  required: ['pdName'],
                  type: ['object', 'null'],
                },
                gitRepo: {
                  description: "Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.\n\nDEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.",
                  properties: {
                    directory: {
                      description: "Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.",
                      type: ['string', 'null'],
                    },
                    repository: {
                      description: 'Repository URL',
                      type: 'string',
                    },
                    revision: {
                      description: 'Commit hash for the specified revision.',
                      type: ['string', 'null'],
                    },
                  },
                  required: ['repository'],
                  type: ['object', 'null'],
                },
                glusterfs: {
                  description: 'Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.',
                  properties: {
                    endpoints: {
                      description: 'EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod',
                      type: 'string',
                    },
                    path: {
                      description: 'Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod',
                      type: 'string',
                    },
                    readOnly: {
                      description: 'ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod',
                      type: ['boolean', 'null'],
                    },
                  },
                  required: ['endpoints', 'path'],
                  type: ['object', 'null'],
                },
                hostPath: {
                  description: 'Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.',
                  properties: {
                    path: {
                      description: 'Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath',
                      type: 'string',
                    },
                    type: {
                      description: 'Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath',
                      type: ['string', 'null'],
                    },
                  },
                  required: ['path'],
                  type: ['object', 'null'],
                },
                iscsi: {
                  description: 'Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.',
                  properties: {
                    chapAuthDiscovery: {
                      description: 'whether support iSCSI Discovery CHAP authentication',
                      type: ['boolean', 'null'],
                    },
                    chapAuthSession: {
                      description: 'whether support iSCSI Session CHAP authentication',
                      type: ['boolean', 'null'],
                    },
                    fsType: {
                      description: 'Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi',
                      type: ['string', 'null'],
                    },
                    initiatorName: {
                      description: 'Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.',
                      type: ['string', 'null'],
                    },
                    iqn: {
                      description: 'Target iSCSI Qualified Name.',
                      type: 'string',
                    },
                    iscsiInterface: {
                      description: "iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
                      type: ['string', 'null'],
                    },
                    lun: {
                      description: 'iSCSI Target Lun number.',
                      format: 'int32',
                      type: 'integer',
                    },
                    portals: {
                      description: 'iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).',
                      items: {
                        type: ['string', 'null'],
                      },
                      type: ['array', 'null'],
                    },
                    readOnly: {
                      description: 'ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.',
                      type: ['boolean', 'null'],
                    },
                    secretRef: {
                      description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                      properties: {
                        name: {
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                          type: ['string', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                    targetPortal: {
                      description: 'iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).',
                      type: 'string',
                    },
                  },
                  required: ['targetPortal', 'iqn', 'lun'],
                  type: ['object', 'null'],
                },
                name: {
                  description: "Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                  type: 'string',
                },
                nfs: {
                  description: 'Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.',
                  properties: {
                    path: {
                      description: 'Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs',
                      type: 'string',
                    },
                    readOnly: {
                      description: 'ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs',
                      type: ['boolean', 'null'],
                    },
                    server: {
                      description: 'Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs',
                      type: 'string',
                    },
                  },
                  required: ['server', 'path'],
                  type: ['object', 'null'],
                },
                persistentVolumeClaim: {
                  description: "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).",
                  properties: {
                    claimName: {
                      description: 'ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims',
                      type: 'string',
                    },
                    readOnly: {
                      description: 'Will force the ReadOnly setting in VolumeMounts. Default false.',
                      type: ['boolean', 'null'],
                    },
                  },
                  required: ['claimName'],
                  type: ['object', 'null'],
                },
                photonPersistentDisk: {
                  description: 'Represents a Photon Controller persistent disk resource.',
                  properties: {
                    fsType: {
                      description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                      type: ['string', 'null'],
                    },
                    pdID: {
                      description: 'ID that identifies Photon Controller persistent disk',
                      type: 'string',
                    },
                  },
                  required: ['pdID'],
                  type: ['object', 'null'],
                },
                portworxVolume: {
                  description: 'PortworxVolumeSource represents a Portworx volume resource.',
                  properties: {
                    fsType: {
                      description: 'FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.',
                      type: ['string', 'null'],
                    },
                    readOnly: {
                      description: 'Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                      type: ['boolean', 'null'],
                    },
                    volumeID: {
                      description: 'VolumeID uniquely identifies a Portworx volume',
                      type: 'string',
                    },
                  },
                  required: ['volumeID'],
                  type: ['object', 'null'],
                },
                projected: {
                  description: 'Represents a projected volume source',
                  properties: {
                    defaultMode: {
                      description: 'Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    sources: {
                      description: 'list of volume projections',
                      items: {
                        description: 'Projection that may be projected along with other supported volume types',
                        properties: {
                          configMap: {
                            description: "Adapts a ConfigMap into a projected volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.",
                            properties: {
                              items: {
                                description:
                                  "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                                items: {
                                  description: 'Maps a string key to a path within a volume.',
                                  properties: {
                                    key: {
                                      description: 'The key to project.',
                                      type: 'string',
                                    },
                                    mode: {
                                      description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                      format: 'int32',
                                      type: ['integer', 'null'],
                                    },
                                    path: {
                                      description: "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                                      type: 'string',
                                    },
                                  },
                                  required: ['key', 'path'],
                                  type: ['object', 'null'],
                                },
                                type: ['array', 'null'],
                              },
                              name: {
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                type: ['string', 'null'],
                              },
                              optional: {
                                description: 'Specify whether the ConfigMap or its keys must be defined',
                                type: ['boolean', 'null'],
                              },
                            },
                            type: ['object', 'null'],
                          },
                          downwardAPI: {
                            description: 'Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.',
                            properties: {
                              items: {
                                description: 'Items is a list of DownwardAPIVolume file',
                                items: {
                                  description: 'DownwardAPIVolumeFile represents information to create the file containing the pod field',
                                  properties: {
                                    fieldRef: {
                                      description: 'ObjectFieldSelector selects an APIVersioned field of an object.',
                                      properties: {
                                        apiVersion: {
                                          description: 'Version of the schema the FieldPath is written in terms of, defaults to "v1".',
                                          type: ['string', 'null'],
                                        },
                                        fieldPath: {
                                          description: 'Path of the field to select in the specified API version.',
                                          type: 'string',
                                        },
                                      },
                                      required: ['fieldPath'],
                                      type: ['object', 'null'],
                                    },
                                    mode: {
                                      description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                      format: 'int32',
                                      type: ['integer', 'null'],
                                    },
                                    path: {
                                      description: "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
                                      type: 'string',
                                    },
                                    resourceFieldRef: {
                                      description: 'ResourceFieldSelector represents container resources (cpu, memory) and their output format',
                                      properties: {
                                        containerName: {
                                          description: 'Container name: required for volumes, optional for env vars',
                                          type: ['string', 'null'],
                                        },
                                        divisor: {
                                          oneOf: [
                                            {
                                              type: ['string', 'null'],
                                            },
                                            {
                                              type: ['number', 'null'],
                                            },
                                          ],
                                        },
                                        resource: {
                                          description: 'Required: resource to select',
                                          type: 'string',
                                        },
                                      },
                                      required: ['resource'],
                                      type: ['object', 'null'],
                                    },
                                  },
                                  required: ['path'],
                                  type: ['object', 'null'],
                                },
                                type: ['array', 'null'],
                              },
                            },
                            type: ['object', 'null'],
                          },
                          secret: {
                            description: "Adapts a secret into a projected volume.\n\nThe contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.",
                            properties: {
                              items: {
                                description:
                                  "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                                items: {
                                  description: 'Maps a string key to a path within a volume.',
                                  properties: {
                                    key: {
                                      description: 'The key to project.',
                                      type: 'string',
                                    },
                                    mode: {
                                      description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                      format: 'int32',
                                      type: ['integer', 'null'],
                                    },
                                    path: {
                                      description: "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                                      type: 'string',
                                    },
                                  },
                                  required: ['key', 'path'],
                                  type: ['object', 'null'],
                                },
                                type: ['array', 'null'],
                              },
                              name: {
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                type: ['string', 'null'],
                              },
                              optional: {
                                description: 'Specify whether the Secret or its key must be defined',
                                type: ['boolean', 'null'],
                              },
                            },
                            type: ['object', 'null'],
                          },
                          serviceAccountToken: {
                            description: 'ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).',
                            properties: {
                              audience: {
                                description: 'Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.',
                                type: ['string', 'null'],
                              },
                              expirationSeconds: {
                                description: 'ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.',
                                format: 'int64',
                                type: ['integer', 'null'],
                              },
                              path: {
                                description: 'Path is the path relative to the mount point of the file to project the token into.',
                                type: 'string',
                              },
                            },
                            required: ['path'],
                            type: ['object', 'null'],
                          },
                        },
                        type: ['object', 'null'],
                      },
                      type: 'array',
                    },
                  },
                  required: ['sources'],
                  type: ['object', 'null'],
                },
                quobyte: {
                  description: 'Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.',
                  properties: {
                    group: {
                      description: 'Group to map volume access to Default is no group',
                      type: ['string', 'null'],
                    },
                    readOnly: {
                      description: 'ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.',
                      type: ['boolean', 'null'],
                    },
                    registry: {
                      description: 'Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes',
                      type: 'string',
                    },
                    tenant: {
                      description: 'Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin',
                      type: ['string', 'null'],
                    },
                    user: {
                      description: 'User to map volume access to Defaults to serivceaccount user',
                      type: ['string', 'null'],
                    },
                    volume: {
                      description: 'Volume is a string that references an already created Quobyte volume by name.',
                      type: 'string',
                    },
                  },
                  required: ['registry', 'volume'],
                  type: ['object', 'null'],
                },
                rbd: {
                  description: 'Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.',
                  properties: {
                    fsType: {
                      description: 'Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd',
                      type: ['string', 'null'],
                    },
                    image: {
                      description: 'The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it',
                      type: 'string',
                    },
                    keyring: {
                      description: 'Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it',
                      type: ['string', 'null'],
                    },
                    monitors: {
                      description: 'A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it',
                      items: {
                        type: ['string', 'null'],
                      },
                      type: 'array',
                    },
                    pool: {
                      description: 'The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it',
                      type: ['string', 'null'],
                    },
                    readOnly: {
                      description: 'ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it',
                      type: ['boolean', 'null'],
                    },
                    secretRef: {
                      description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                      properties: {
                        name: {
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                          type: ['string', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                    user: {
                      description: 'The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it',
                      type: ['string', 'null'],
                    },
                  },
                  required: ['monitors', 'image'],
                  type: ['object', 'null'],
                },
                scaleIO: {
                  description: 'ScaleIOVolumeSource represents a persistent ScaleIO volume',
                  properties: {
                    fsType: {
                      description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".',
                      type: ['string', 'null'],
                    },
                    gateway: {
                      description: 'The host address of the ScaleIO API Gateway.',
                      type: 'string',
                    },
                    protectionDomain: {
                      description: 'The name of the ScaleIO Protection Domain for the configured storage.',
                      type: ['string', 'null'],
                    },
                    readOnly: {
                      description: 'Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                      type: ['boolean', 'null'],
                    },
                    secretRef: {
                      description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                      properties: {
                        name: {
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                          type: ['string', 'null'],
                        },
                      },
                      type: 'object',
                    },
                    sslEnabled: {
                      description: 'Flag to enable/disable SSL communication with Gateway, default false',
                      type: ['boolean', 'null'],
                    },
                    storageMode: {
                      description: 'Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.',
                      type: ['string', 'null'],
                    },
                    storagePool: {
                      description: 'The ScaleIO Storage Pool associated with the protection domain.',
                      type: ['string', 'null'],
                    },
                    system: {
                      description: 'The name of the storage system as configured in ScaleIO.',
                      type: 'string',
                    },
                    volumeName: {
                      description: 'The name of a volume already created in the ScaleIO system that is associated with this volume source.',
                      type: ['string', 'null'],
                    },
                  },
                  required: ['gateway', 'system', 'secretRef'],
                  type: ['object', 'null'],
                },
                secret: {
                  description: "Adapts a Secret into a volume.\n\nThe contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.",
                  properties: {
                    defaultMode: {
                      description: 'Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                      format: 'int32',
                      type: ['integer', 'null'],
                    },
                    items: {
                      description:
                        "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                      items: {
                        description: 'Maps a string key to a path within a volume.',
                        properties: {
                          key: {
                            description: 'The key to project.',
                            type: 'string',
                          },
                          mode: {
                            description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                            format: 'int32',
                            type: ['integer', 'null'],
                          },
                          path: {
                            description: "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                            type: 'string',
                          },
                        },
                        required: ['key', 'path'],
                        type: ['object', 'null'],
                      },
                      type: ['array', 'null'],
                    },
                    optional: {
                      description: 'Specify whether the Secret or its keys must be defined',
                      type: ['boolean', 'null'],
                    },
                    secretName: {
                      description: "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
                      type: ['string', 'null'],
                    },
                  },
                  type: ['object', 'null'],
                },
                storageos: {
                  description: 'Represents a StorageOS persistent volume resource.',
                  properties: {
                    fsType: {
                      description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                      type: ['string', 'null'],
                    },
                    readOnly: {
                      description: 'Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                      type: ['boolean', 'null'],
                    },
                    secretRef: {
                      description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                      properties: {
                        name: {
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                          type: ['string', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                    volumeName: {
                      description: 'VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.',
                      type: ['string', 'null'],
                    },
                    volumeNamespace: {
                      description: 'VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod\'s namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.',
                      type: ['string', 'null'],
                    },
                  },
                  type: ['object', 'null'],
                },
                vsphereVolume: {
                  description: 'Represents a vSphere volume resource.',
                  properties: {
                    fsType: {
                      description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                      type: ['string', 'null'],
                    },
                    storagePolicyID: {
                      description: 'Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.',
                      type: ['string', 'null'],
                    },
                    storagePolicyName: {
                      description: 'Storage Policy Based Management (SPBM) profile name.',
                      type: ['string', 'null'],
                    },
                    volumePath: {
                      description: 'Path that identifies vSphere volume vmdk',
                      type: 'string',
                    },
                  },
                  required: ['volumePath'],
                  type: ['object', 'null'],
                },
              },
              required: ['name'],
              type: ['object', 'null'],
            },
            type: ['array', 'null'],
            'x-kubernetes-patch-merge-key': 'name',
            'x-kubernetes-patch-strategy': 'merge,retainKeys',
          },
        },
        required: ['containers'],
        type: ['object', 'null'],
      },
      status: {
        description: 'PodStatus represents information about the status of a pod. Status may trail the actual state of a system, especially if the node that hosts the pod cannot contact the control plane.',
        properties: {
          conditions: {
            description: 'Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions',
            items: {
              description: 'PodCondition contains details for the current condition of this pod.',
              properties: {
                lastProbeTime: {
                  description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                  format: 'date-time',
                  type: ['string', 'null'],
                },
                lastTransitionTime: {
                  description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                  format: 'date-time',
                  type: ['string', 'null'],
                },
                message: {
                  description: 'Human-readable message indicating details about last transition.',
                  type: ['string', 'null'],
                },
                reason: {
                  description: "Unique, one-word, CamelCase reason for the condition's last transition.",
                  type: ['string', 'null'],
                },
                status: {
                  description: 'Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions',
                  type: 'string',
                },
                type: {
                  description: 'Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions',
                  type: 'string',
                },
              },
              required: ['type', 'status'],
              type: ['object', 'null'],
            },
            type: ['array', 'null'],
            'x-kubernetes-patch-merge-key': 'type',
            'x-kubernetes-patch-strategy': 'merge',
          },
          containerStatuses: {
            description: 'The list has one entry per container in the manifest. Each entry is currently the output of `docker inspect`. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status',
            items: {
              description: 'ContainerStatus contains details for the current status of this container.',
              properties: {
                containerID: {
                  description: "Container's ID in the format 'docker://<container_id>'.",
                  type: ['string', 'null'],
                },
                image: {
                  description: 'The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images',
                  type: 'string',
                },
                imageID: {
                  description: "ImageID of the container's image.",
                  type: 'string',
                },
                lastState: {
                  description: 'ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.',
                  properties: {
                    running: {
                      description: 'ContainerStateRunning is a running state of a container.',
                      properties: {
                        startedAt: {
                          description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                          format: 'date-time',
                          type: ['string', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                    terminated: {
                      description: 'ContainerStateTerminated is a terminated state of a container.',
                      properties: {
                        containerID: {
                          description: "Container's ID in the format 'docker://<container_id>'",
                          type: ['string', 'null'],
                        },
                        exitCode: {
                          description: 'Exit status from the last termination of the container',
                          format: 'int32',
                          type: 'integer',
                        },
                        finishedAt: {
                          description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                          format: 'date-time',
                          type: ['string', 'null'],
                        },
                        message: {
                          description: 'Message regarding the last termination of the container',
                          type: ['string', 'null'],
                        },
                        reason: {
                          description: '(brief) reason from the last termination of the container',
                          type: ['string', 'null'],
                        },
                        signal: {
                          description: 'Signal from the last termination of the container',
                          format: 'int32',
                          type: ['integer', 'null'],
                        },
                        startedAt: {
                          description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                          format: 'date-time',
                          type: ['string', 'null'],
                        },
                      },
                      required: ['exitCode'],
                      type: ['object', 'null'],
                    },
                    waiting: {
                      description: 'ContainerStateWaiting is a waiting state of a container.',
                      properties: {
                        message: {
                          description: 'Message regarding why the container is not yet running.',
                          type: ['string', 'null'],
                        },
                        reason: {
                          description: '(brief) reason the container is not yet running.',
                          type: ['string', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                  },
                  type: ['object', 'null'],
                },
                name: {
                  description: 'This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.',
                  type: 'string',
                },
                ready: {
                  description: 'Specifies whether the container has passed its readiness probe.',
                  type: 'boolean',
                },
                restartCount: {
                  description: 'The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.',
                  format: 'int32',
                  type: 'integer',
                },
                started: {
                  description: 'Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.',
                  type: ['boolean', 'null'],
                },
                state: {
                  description: 'ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.',
                  properties: {
                    running: {
                      description: 'ContainerStateRunning is a running state of a container.',
                      properties: {
                        startedAt: {
                          description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                          format: 'date-time',
                          type: ['string', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                    terminated: {
                      description: 'ContainerStateTerminated is a terminated state of a container.',
                      properties: {
                        containerID: {
                          description: "Container's ID in the format 'docker://<container_id>'",
                          type: ['string', 'null'],
                        },
                        exitCode: {
                          description: 'Exit status from the last termination of the container',
                          format: 'int32',
                          type: 'integer',
                        },
                        finishedAt: {
                          description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                          format: 'date-time',
                          type: ['string', 'null'],
                        },
                        message: {
                          description: 'Message regarding the last termination of the container',
                          type: ['string', 'null'],
                        },
                        reason: {
                          description: '(brief) reason from the last termination of the container',
                          type: ['string', 'null'],
                        },
                        signal: {
                          description: 'Signal from the last termination of the container',
                          format: 'int32',
                          type: ['integer', 'null'],
                        },
                        startedAt: {
                          description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                          format: 'date-time',
                          type: ['string', 'null'],
                        },
                      },
                      required: ['exitCode'],
                      type: ['object', 'null'],
                    },
                    waiting: {
                      description: 'ContainerStateWaiting is a waiting state of a container.',
                      properties: {
                        message: {
                          description: 'Message regarding why the container is not yet running.',
                          type: ['string', 'null'],
                        },
                        reason: {
                          description: '(brief) reason the container is not yet running.',
                          type: ['string', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                  },
                  type: ['object', 'null'],
                },
              },
              required: ['name', 'ready', 'restartCount', 'image', 'imageID'],
              type: ['object', 'null'],
            },
            type: ['array', 'null'],
          },
          ephemeralContainerStatuses: {
            description: 'Status for any ephemeral containers that have run in this pod. This field is alpha-level and is only populated by servers that enable the EphemeralContainers feature.',
            items: {
              description: 'ContainerStatus contains details for the current status of this container.',
              properties: {
                containerID: {
                  description: "Container's ID in the format 'docker://<container_id>'.",
                  type: ['string', 'null'],
                },
                image: {
                  description: 'The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images',
                  type: 'string',
                },
                imageID: {
                  description: "ImageID of the container's image.",
                  type: 'string',
                },
                lastState: {
                  description: 'ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.',
                  properties: {
                    running: {
                      description: 'ContainerStateRunning is a running state of a container.',
                      properties: {
                        startedAt: {
                          description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                          format: 'date-time',
                          type: ['string', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                    terminated: {
                      description: 'ContainerStateTerminated is a terminated state of a container.',
                      properties: {
                        containerID: {
                          description: "Container's ID in the format 'docker://<container_id>'",
                          type: ['string', 'null'],
                        },
                        exitCode: {
                          description: 'Exit status from the last termination of the container',
                          format: 'int32',
                          type: 'integer',
                        },
                        finishedAt: {
                          description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                          format: 'date-time',
                          type: ['string', 'null'],
                        },
                        message: {
                          description: 'Message regarding the last termination of the container',
                          type: ['string', 'null'],
                        },
                        reason: {
                          description: '(brief) reason from the last termination of the container',
                          type: ['string', 'null'],
                        },
                        signal: {
                          description: 'Signal from the last termination of the container',
                          format: 'int32',
                          type: ['integer', 'null'],
                        },
                        startedAt: {
                          description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                          format: 'date-time',
                          type: ['string', 'null'],
                        },
                      },
                      required: ['exitCode'],
                      type: ['object', 'null'],
                    },
                    waiting: {
                      description: 'ContainerStateWaiting is a waiting state of a container.',
                      properties: {
                        message: {
                          description: 'Message regarding why the container is not yet running.',
                          type: ['string', 'null'],
                        },
                        reason: {
                          description: '(brief) reason the container is not yet running.',
                          type: ['string', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                  },
                  type: ['object', 'null'],
                },
                name: {
                  description: 'This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.',
                  type: 'string',
                },
                ready: {
                  description: 'Specifies whether the container has passed its readiness probe.',
                  type: 'boolean',
                },
                restartCount: {
                  description: 'The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.',
                  format: 'int32',
                  type: 'integer',
                },
                started: {
                  description: 'Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.',
                  type: ['boolean', 'null'],
                },
                state: {
                  description: 'ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.',
                  properties: {
                    running: {
                      description: 'ContainerStateRunning is a running state of a container.',
                      properties: {
                        startedAt: {
                          description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                          format: 'date-time',
                          type: ['string', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                    terminated: {
                      description: 'ContainerStateTerminated is a terminated state of a container.',
                      properties: {
                        containerID: {
                          description: "Container's ID in the format 'docker://<container_id>'",
                          type: ['string', 'null'],
                        },
                        exitCode: {
                          description: 'Exit status from the last termination of the container',
                          format: 'int32',
                          type: 'integer',
                        },
                        finishedAt: {
                          description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                          format: 'date-time',
                          type: ['string', 'null'],
                        },
                        message: {
                          description: 'Message regarding the last termination of the container',
                          type: ['string', 'null'],
                        },
                        reason: {
                          description: '(brief) reason from the last termination of the container',
                          type: ['string', 'null'],
                        },
                        signal: {
                          description: 'Signal from the last termination of the container',
                          format: 'int32',
                          type: ['integer', 'null'],
                        },
                        startedAt: {
                          description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                          format: 'date-time',
                          type: ['string', 'null'],
                        },
                      },
                      required: ['exitCode'],
                      type: ['object', 'null'],
                    },
                    waiting: {
                      description: 'ContainerStateWaiting is a waiting state of a container.',
                      properties: {
                        message: {
                          description: 'Message regarding why the container is not yet running.',
                          type: ['string', 'null'],
                        },
                        reason: {
                          description: '(brief) reason the container is not yet running.',
                          type: ['string', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                  },
                  type: ['object', 'null'],
                },
              },
              required: ['name', 'ready', 'restartCount', 'image', 'imageID'],
              type: ['object', 'null'],
            },
            type: ['array', 'null'],
          },
          hostIP: {
            description: 'IP address of the host to which the pod is assigned. Empty if not yet scheduled.',
            type: ['string', 'null'],
          },
          initContainerStatuses: {
            description: 'The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status',
            items: {
              description: 'ContainerStatus contains details for the current status of this container.',
              properties: {
                containerID: {
                  description: "Container's ID in the format 'docker://<container_id>'.",
                  type: ['string', 'null'],
                },
                image: {
                  description: 'The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images',
                  type: 'string',
                },
                imageID: {
                  description: "ImageID of the container's image.",
                  type: 'string',
                },
                lastState: {
                  description: 'ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.',
                  properties: {
                    running: {
                      description: 'ContainerStateRunning is a running state of a container.',
                      properties: {
                        startedAt: {
                          description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                          format: 'date-time',
                          type: ['string', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                    terminated: {
                      description: 'ContainerStateTerminated is a terminated state of a container.',
                      properties: {
                        containerID: {
                          description: "Container's ID in the format 'docker://<container_id>'",
                          type: ['string', 'null'],
                        },
                        exitCode: {
                          description: 'Exit status from the last termination of the container',
                          format: 'int32',
                          type: 'integer',
                        },
                        finishedAt: {
                          description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                          format: 'date-time',
                          type: ['string', 'null'],
                        },
                        message: {
                          description: 'Message regarding the last termination of the container',
                          type: ['string', 'null'],
                        },
                        reason: {
                          description: '(brief) reason from the last termination of the container',
                          type: ['string', 'null'],
                        },
                        signal: {
                          description: 'Signal from the last termination of the container',
                          format: 'int32',
                          type: ['integer', 'null'],
                        },
                        startedAt: {
                          description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                          format: 'date-time',
                          type: ['string', 'null'],
                        },
                      },
                      required: ['exitCode'],
                      type: ['object', 'null'],
                    },
                    waiting: {
                      description: 'ContainerStateWaiting is a waiting state of a container.',
                      properties: {
                        message: {
                          description: 'Message regarding why the container is not yet running.',
                          type: ['string', 'null'],
                        },
                        reason: {
                          description: '(brief) reason the container is not yet running.',
                          type: ['string', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                  },
                  type: ['object', 'null'],
                },
                name: {
                  description: 'This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.',
                  type: 'string',
                },
                ready: {
                  description: 'Specifies whether the container has passed its readiness probe.',
                  type: 'boolean',
                },
                restartCount: {
                  description: 'The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.',
                  format: 'int32',
                  type: 'integer',
                },
                started: {
                  description: 'Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.',
                  type: ['boolean', 'null'],
                },
                state: {
                  description: 'ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.',
                  properties: {
                    running: {
                      description: 'ContainerStateRunning is a running state of a container.',
                      properties: {
                        startedAt: {
                          description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                          format: 'date-time',
                          type: ['string', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                    terminated: {
                      description: 'ContainerStateTerminated is a terminated state of a container.',
                      properties: {
                        containerID: {
                          description: "Container's ID in the format 'docker://<container_id>'",
                          type: ['string', 'null'],
                        },
                        exitCode: {
                          description: 'Exit status from the last termination of the container',
                          format: 'int32',
                          type: 'integer',
                        },
                        finishedAt: {
                          description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                          format: 'date-time',
                          type: ['string', 'null'],
                        },
                        message: {
                          description: 'Message regarding the last termination of the container',
                          type: ['string', 'null'],
                        },
                        reason: {
                          description: '(brief) reason from the last termination of the container',
                          type: ['string', 'null'],
                        },
                        signal: {
                          description: 'Signal from the last termination of the container',
                          format: 'int32',
                          type: ['integer', 'null'],
                        },
                        startedAt: {
                          description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                          format: 'date-time',
                          type: ['string', 'null'],
                        },
                      },
                      required: ['exitCode'],
                      type: ['object', 'null'],
                    },
                    waiting: {
                      description: 'ContainerStateWaiting is a waiting state of a container.',
                      properties: {
                        message: {
                          description: 'Message regarding why the container is not yet running.',
                          type: ['string', 'null'],
                        },
                        reason: {
                          description: '(brief) reason the container is not yet running.',
                          type: ['string', 'null'],
                        },
                      },
                      type: ['object', 'null'],
                    },
                  },
                  type: ['object', 'null'],
                },
              },
              required: ['name', 'ready', 'restartCount', 'image', 'imageID'],
              type: ['object', 'null'],
            },
            type: ['array', 'null'],
          },
          message: {
            description: 'A human readable message indicating details about why the pod is in this condition.',
            type: ['string', 'null'],
          },
          nominatedNodeName: {
            description:
              'nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.',
            type: ['string', 'null'],
          },
          phase: {
            description:
              "The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:\n\nPending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.\n\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase",
            type: ['string', 'null'],
          },
          podIP: {
            description: 'IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.',
            type: ['string', 'null'],
          },
          podIPs: {
            description: 'podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.',
            items: {
              description: 'IP address information for entries in the (plural) PodIPs field. Each entry includes:\n   IP: An IP address allocated to the pod. Routable at least within the cluster.',
              properties: {
                ip: {
                  description: 'ip is an IP address (IPv4 or IPv6) assigned to the pod',
                  type: ['string', 'null'],
                },
              },
              type: ['object', 'null'],
            },
            type: ['array', 'null'],
            'x-kubernetes-patch-merge-key': 'ip',
            'x-kubernetes-patch-strategy': 'merge',
          },
          qosClass: {
            description: 'The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md',
            type: ['string', 'null'],
          },
          reason: {
            description: "A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'",
            type: ['string', 'null'],
          },
          startTime: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            format: 'date-time',
            type: ['string', 'null'],
          },
        },
        type: ['object', 'null'],
      },
    },
    type: 'object',
    'x-kubernetes-group-version-kind': [
      {
        group: '',
        kind: 'Pod',
        version: 'v1',
      },
    ],
    $schema: 'http://json-schema.org/schema#',
  })
  .setIn([referenceForModel(k8sModels.ReplicaSetModel), 'default'], {
    description: 'ReplicaSet ensures that a specified number of pod replicas are running at any given time.',
    properties: {
      apiVersion: {
        description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
        type: ['string', 'null'],
        enum: ['apps/v1'],
      },
      kind: {
        description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
        type: ['string', 'null'],
        enum: ['ReplicaSet'],
      },
      metadata: {
        description: 'ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.',
        properties: {
          annotations: {
            description: 'Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations',
            type: 'object',
            additionalProperties: {
              type: ['string', 'null'],
            },
          },
          clusterName: {
            description: 'The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.',
            type: ['string', 'null'],
          },
          creationTimestamp: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            type: ['string', 'null'],
            format: 'date-time',
          },
          deletionGracePeriodSeconds: {
            description: 'Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.',
            type: 'integer',
            format: 'int64',
          },
          deletionTimestamp: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            type: ['string', 'null'],
            format: 'date-time',
          },
          finalizers: {
            description: 'Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.',
            type: ['array', 'null'],
            items: {
              type: ['string', 'null'],
            },
            'x-kubernetes-patch-strategy': 'merge',
          },
          generateName: {
            description:
              'GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency',
            type: ['string', 'null'],
          },
          generation: {
            description: 'A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.',
            type: 'integer',
            format: 'int64',
          },
          initializers: {
            description: 'Initializers tracks the progress of initialization.',
            required: ['pending'],
            properties: {
              pending: {
                description: 'Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.',
                type: 'array',
                items: {
                  description: 'Initializer is information about an initializer that has not yet completed.',
                  required: ['name'],
                  properties: {
                    name: {
                      description: 'name of the process that is responsible for initializing this object.',
                      type: 'string',
                    },
                  },
                  additionalProperties: false,
                },
                'x-kubernetes-patch-merge-key': 'name',
                'x-kubernetes-patch-strategy': 'merge',
              },
              result: {
                description: "Status is a return value for calls that don't return other objects.",
                properties: {
                  apiVersion: {
                    description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
                    type: ['string', 'null'],
                    enum: ['v1'],
                  },
                  code: {
                    description: 'Suggested HTTP return code for this status, 0 if not set.',
                    type: 'integer',
                    format: 'int32',
                  },
                  details: {
                    description: 'StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.',
                    properties: {
                      causes: {
                        description: 'The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.',
                        type: ['array', 'null'],
                        items: {
                          description: 'StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.',
                          properties: {
                            field: {
                              description: 'The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  "name" - the field "name" on the current resource\n  "items[0].name" - the field "name" on the first array entry in "items"',
                              type: ['string', 'null'],
                            },
                            message: {
                              description: 'A human-readable description of the cause of the error.  This field may be presented as-is to a reader.',
                              type: ['string', 'null'],
                            },
                            reason: {
                              description: 'A machine-readable description of the cause of the error. If this value is empty there is no information available.',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                      },
                      group: {
                        description: 'The group attribute of the resource associated with the status StatusReason.',
                        type: ['string', 'null'],
                      },
                      kind: {
                        description: 'The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                        type: ['string', 'null'],
                      },
                      name: {
                        description: 'The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).',
                        type: ['string', 'null'],
                      },
                      retryAfterSeconds: {
                        description: 'If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.',
                        type: 'integer',
                        format: 'int32',
                      },
                      uid: {
                        description: 'UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                        type: ['string', 'null'],
                      },
                    },
                    additionalProperties: false,
                  },
                  kind: {
                    description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                    type: ['string', 'null'],
                    enum: ['Status'],
                  },
                  message: {
                    description: 'A human-readable description of the status of this operation.',
                    type: ['string', 'null'],
                  },
                  metadata: {
                    description: 'ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.',
                    properties: {
                      continue: {
                        description:
                          'continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response.',
                        type: ['string', 'null'],
                      },
                      resourceVersion: {
                        description: "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
                        type: ['string', 'null'],
                      },
                      selfLink: {
                        description: 'selfLink is a URL representing this object. Populated by the system. Read-only.',
                        type: ['string', 'null'],
                      },
                    },
                    additionalProperties: false,
                  },
                  reason: {
                    description: 'A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.',
                    type: ['string', 'null'],
                  },
                  status: {
                    description: 'Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status',
                    type: ['string', 'null'],
                  },
                },
                'x-kubernetes-group-version-kind': [
                  {
                    group: '',
                    kind: 'Status',
                    version: 'v1',
                  },
                ],
                additionalProperties: false,
              },
            },
            additionalProperties: false,
          },
          labels: {
            description: 'Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels',
            type: 'object',
            additionalProperties: {
              type: ['string', 'null'],
            },
          },
          name: {
            description: 'Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
            type: ['string', 'null'],
          },
          namespace: {
            description: 'Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces',
            type: ['string', 'null'],
          },
          ownerReferences: {
            description: 'List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.',
            type: ['array', 'null'],
            items: {
              description: 'OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.',
              required: ['apiVersion', 'kind', 'name', 'uid'],
              properties: {
                apiVersion: {
                  description: 'API version of the referent.',
                  type: 'string',
                },
                blockOwnerDeletion: {
                  description: 'If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.',
                  type: 'boolean',
                },
                controller: {
                  description: 'If true, this reference points to the managing controller.',
                  type: 'boolean',
                },
                kind: {
                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                  type: 'string',
                },
                name: {
                  description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
                  type: 'string',
                },
                uid: {
                  description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                  type: 'string',
                },
              },
              additionalProperties: false,
            },
            'x-kubernetes-patch-merge-key': 'uid',
            'x-kubernetes-patch-strategy': 'merge',
          },
          resourceVersion: {
            description:
              'An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency',
            type: ['string', 'null'],
          },
          selfLink: {
            description: 'SelfLink is a URL representing this object. Populated by the system. Read-only.',
            type: ['string', 'null'],
          },
          uid: {
            description: 'UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
            type: ['string', 'null'],
          },
        },
        additionalProperties: false,
      },
      spec: {
        description: 'ReplicaSetSpec is the specification of a ReplicaSet.',
        required: ['selector'],
        properties: {
          minReadySeconds: {
            description: 'Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)',
            type: 'integer',
            format: 'int32',
          },
          replicas: {
            description: 'Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller',
            type: 'integer',
            format: 'int32',
          },
          selector: {
            description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
            properties: {
              matchExpressions: {
                description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                type: ['array', 'null'],
                items: {
                  description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                  required: ['key', 'operator'],
                  properties: {
                    key: {
                      description: 'key is the label key that the selector applies to.',
                      type: 'string',
                      'x-kubernetes-patch-merge-key': 'key',
                      'x-kubernetes-patch-strategy': 'merge',
                    },
                    operator: {
                      description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                      type: 'string',
                    },
                    values: {
                      description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                      type: ['array', 'null'],
                      items: {
                        type: ['string', 'null'],
                      },
                    },
                  },
                  additionalProperties: false,
                },
              },
              matchLabels: {
                description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                type: 'object',
                additionalProperties: {
                  type: ['string', 'null'],
                },
              },
            },
            additionalProperties: false,
          },
          template: {
            description: 'PodTemplateSpec describes the data a pod should have when created from a template',
            properties: {
              metadata: {
                description: 'ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.',
                properties: {
                  annotations: {
                    description: 'Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations',
                    type: 'object',
                    additionalProperties: {
                      type: ['string', 'null'],
                    },
                  },
                  clusterName: {
                    description: 'The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.',
                    type: ['string', 'null'],
                  },
                  creationTimestamp: {
                    description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                    type: ['string', 'null'],
                    format: 'date-time',
                  },
                  deletionGracePeriodSeconds: {
                    description: 'Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.',
                    type: 'integer',
                    format: 'int64',
                  },
                  deletionTimestamp: {
                    description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                    type: ['string', 'null'],
                    format: 'date-time',
                  },
                  finalizers: {
                    description: 'Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.',
                    type: ['array', 'null'],
                    items: {
                      type: ['string', 'null'],
                    },
                    'x-kubernetes-patch-strategy': 'merge',
                  },
                  generateName: {
                    description:
                      'GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency',
                    type: ['string', 'null'],
                  },
                  generation: {
                    description: 'A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.',
                    type: 'integer',
                    format: 'int64',
                  },
                  initializers: {
                    description: 'Initializers tracks the progress of initialization.',
                    required: ['pending'],
                    properties: {
                      pending: {
                        description: 'Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.',
                        type: 'array',
                        items: {
                          description: 'Initializer is information about an initializer that has not yet completed.',
                          required: ['name'],
                          properties: {
                            name: {
                              description: 'name of the process that is responsible for initializing this object.',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        'x-kubernetes-patch-merge-key': 'name',
                        'x-kubernetes-patch-strategy': 'merge',
                      },
                      result: {
                        description: "Status is a return value for calls that don't return other objects.",
                        properties: {
                          apiVersion: {
                            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
                            type: ['string', 'null'],
                            enum: ['v1'],
                          },
                          code: {
                            description: 'Suggested HTTP return code for this status, 0 if not set.',
                            type: 'integer',
                            format: 'int32',
                          },
                          details: {
                            description: 'StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.',
                            properties: {
                              causes: {
                                description: 'The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.',
                                type: ['array', 'null'],
                                items: {
                                  description: 'StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.',
                                  properties: {
                                    field: {
                                      description: 'The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  "name" - the field "name" on the current resource\n  "items[0].name" - the field "name" on the first array entry in "items"',
                                      type: ['string', 'null'],
                                    },
                                    message: {
                                      description: 'A human-readable description of the cause of the error.  This field may be presented as-is to a reader.',
                                      type: ['string', 'null'],
                                    },
                                    reason: {
                                      description: 'A machine-readable description of the cause of the error. If this value is empty there is no information available.',
                                      type: ['string', 'null'],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                              },
                              group: {
                                description: 'The group attribute of the resource associated with the status StatusReason.',
                                type: ['string', 'null'],
                              },
                              kind: {
                                description: 'The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                                type: ['string', 'null'],
                              },
                              name: {
                                description: 'The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).',
                                type: ['string', 'null'],
                              },
                              retryAfterSeconds: {
                                description: 'If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.',
                                type: 'integer',
                                format: 'int32',
                              },
                              uid: {
                                description: 'UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                                type: ['string', 'null'],
                              },
                            },
                            additionalProperties: false,
                          },
                          kind: {
                            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                            type: ['string', 'null'],
                            enum: ['Status'],
                          },
                          message: {
                            description: 'A human-readable description of the status of this operation.',
                            type: ['string', 'null'],
                          },
                          metadata: {
                            description: 'ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.',
                            properties: {
                              continue: {
                                description:
                                  'continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response.',
                                type: ['string', 'null'],
                              },
                              resourceVersion: {
                                description: "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
                                type: ['string', 'null'],
                              },
                              selfLink: {
                                description: 'selfLink is a URL representing this object. Populated by the system. Read-only.',
                                type: ['string', 'null'],
                              },
                            },
                            additionalProperties: false,
                          },
                          reason: {
                            description: 'A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.',
                            type: ['string', 'null'],
                          },
                          status: {
                            description: 'Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status',
                            type: ['string', 'null'],
                          },
                        },
                        'x-kubernetes-group-version-kind': [
                          {
                            group: '',
                            kind: 'Status',
                            version: 'v1',
                          },
                        ],
                        additionalProperties: false,
                      },
                    },
                    additionalProperties: false,
                  },
                  labels: {
                    description: 'Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels',
                    type: 'object',
                    additionalProperties: {
                      type: ['string', 'null'],
                    },
                  },
                  name: {
                    description: 'Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
                    type: ['string', 'null'],
                  },
                  namespace: {
                    description: 'Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces',
                    type: ['string', 'null'],
                  },
                  ownerReferences: {
                    description: 'List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.',
                    type: ['array', 'null'],
                    items: {
                      description: 'OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.',
                      required: ['apiVersion', 'kind', 'name', 'uid'],
                      properties: {
                        apiVersion: {
                          description: 'API version of the referent.',
                          type: 'string',
                        },
                        blockOwnerDeletion: {
                          description: 'If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.',
                          type: 'boolean',
                        },
                        controller: {
                          description: 'If true, this reference points to the managing controller.',
                          type: 'boolean',
                        },
                        kind: {
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                          type: 'string',
                        },
                        name: {
                          description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
                          type: 'string',
                        },
                        uid: {
                          description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                          type: 'string',
                        },
                      },
                      additionalProperties: false,
                    },
                    'x-kubernetes-patch-merge-key': 'uid',
                    'x-kubernetes-patch-strategy': 'merge',
                  },
                  resourceVersion: {
                    description:
                      'An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency',
                    type: ['string', 'null'],
                  },
                  selfLink: {
                    description: 'SelfLink is a URL representing this object. Populated by the system. Read-only.',
                    type: ['string', 'null'],
                  },
                  uid: {
                    description: 'UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                    type: ['string', 'null'],
                  },
                },
                additionalProperties: false,
              },
              spec: {
                description: 'PodSpec is a description of a pod.',
                required: ['containers'],
                properties: {
                  activeDeadlineSeconds: {
                    description: 'Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.',
                    type: 'integer',
                    format: 'int64',
                  },
                  affinity: {
                    description: 'Affinity is a group of affinity scheduling rules.',
                    properties: {
                      nodeAffinity: {
                        description: 'Node affinity is a group of node affinity scheduling rules.',
                        properties: {
                          preferredDuringSchedulingIgnoredDuringExecution: {
                            description:
                              'The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.',
                            type: ['array', 'null'],
                            items: {
                              description: "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
                              required: ['weight', 'preference'],
                              properties: {
                                preference: {
                                  description: 'A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.',
                                  properties: {
                                    matchExpressions: {
                                      description: "A list of node selector requirements by node's labels.",
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                        required: ['key', 'operator'],
                                        properties: {
                                          key: {
                                            description: 'The label key that the selector applies to.',
                                            type: 'string',
                                          },
                                          operator: {
                                            description: "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                            type: 'string',
                                          },
                                          values: {
                                            description: 'An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
                                            type: ['array', 'null'],
                                            items: {
                                              type: ['string', 'null'],
                                            },
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    matchFields: {
                                      description: "A list of node selector requirements by node's fields.",
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                        required: ['key', 'operator'],
                                        properties: {
                                          key: {
                                            description: 'The label key that the selector applies to.',
                                            type: 'string',
                                          },
                                          operator: {
                                            description: "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                            type: 'string',
                                          },
                                          values: {
                                            description: 'An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
                                            type: ['array', 'null'],
                                            items: {
                                              type: ['string', 'null'],
                                            },
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                weight: {
                                  description: 'Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.',
                                  type: 'integer',
                                  format: 'int32',
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          requiredDuringSchedulingIgnoredDuringExecution: {
                            description: 'A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.',
                            required: ['nodeSelectorTerms'],
                            properties: {
                              nodeSelectorTerms: {
                                description: 'Required. A list of node selector terms. The terms are ORed.',
                                type: 'array',
                                items: {
                                  description: 'A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.',
                                  properties: {
                                    matchExpressions: {
                                      description: "A list of node selector requirements by node's labels.",
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                        required: ['key', 'operator'],
                                        properties: {
                                          key: {
                                            description: 'The label key that the selector applies to.',
                                            type: 'string',
                                          },
                                          operator: {
                                            description: "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                            type: 'string',
                                          },
                                          values: {
                                            description: 'An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
                                            type: ['array', 'null'],
                                            items: {
                                              type: ['string', 'null'],
                                            },
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    matchFields: {
                                      description: "A list of node selector requirements by node's fields.",
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                        required: ['key', 'operator'],
                                        properties: {
                                          key: {
                                            description: 'The label key that the selector applies to.',
                                            type: 'string',
                                          },
                                          operator: {
                                            description: "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                            type: 'string',
                                          },
                                          values: {
                                            description: 'An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
                                            type: ['array', 'null'],
                                            items: {
                                              type: ['string', 'null'],
                                            },
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                              },
                            },
                            additionalProperties: false,
                          },
                        },
                        additionalProperties: false,
                      },
                      podAffinity: {
                        description: 'Pod affinity is a group of inter pod affinity scheduling rules.',
                        properties: {
                          preferredDuringSchedulingIgnoredDuringExecution: {
                            description:
                              'The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.',
                            type: ['array', 'null'],
                            items: {
                              description: 'The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)',
                              required: ['weight', 'podAffinityTerm'],
                              properties: {
                                podAffinityTerm: {
                                  description: 'Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running',
                                  required: ['topologyKey'],
                                  properties: {
                                    labelSelector: {
                                      description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
                                      properties: {
                                        matchExpressions: {
                                          description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                                          type: ['array', 'null'],
                                          items: {
                                            description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                            required: ['key', 'operator'],
                                            properties: {
                                              key: {
                                                description: 'key is the label key that the selector applies to.',
                                                type: 'string',
                                                'x-kubernetes-patch-merge-key': 'key',
                                                'x-kubernetes-patch-strategy': 'merge',
                                              },
                                              operator: {
                                                description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                type: 'string',
                                              },
                                              values: {
                                                description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                                                type: ['array', 'null'],
                                                items: {
                                                  type: ['string', 'null'],
                                                },
                                              },
                                            },
                                            additionalProperties: false,
                                          },
                                        },
                                        matchLabels: {
                                          description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                                          type: 'object',
                                          additionalProperties: {
                                            type: ['string', 'null'],
                                          },
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                    namespaces: {
                                      description: 'namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod\'s namespace"',
                                      type: ['array', 'null'],
                                      items: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                    topologyKey: {
                                      description: 'This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
                                      type: 'string',
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                weight: {
                                  description: 'weight associated with matching the corresponding podAffinityTerm, in the range 1-100.',
                                  type: 'integer',
                                  format: 'int32',
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          requiredDuringSchedulingIgnoredDuringExecution: {
                            description:
                              'If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.',
                            type: ['array', 'null'],
                            items: {
                              description: 'Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running',
                              required: ['topologyKey'],
                              properties: {
                                labelSelector: {
                                  description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
                                  properties: {
                                    matchExpressions: {
                                      description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                        required: ['key', 'operator'],
                                        properties: {
                                          key: {
                                            description: 'key is the label key that the selector applies to.',
                                            type: 'string',
                                            'x-kubernetes-patch-merge-key': 'key',
                                            'x-kubernetes-patch-strategy': 'merge',
                                          },
                                          operator: {
                                            description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                            type: 'string',
                                          },
                                          values: {
                                            description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                                            type: ['array', 'null'],
                                            items: {
                                              type: ['string', 'null'],
                                            },
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    matchLabels: {
                                      description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                                      type: 'object',
                                      additionalProperties: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                namespaces: {
                                  description: 'namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod\'s namespace"',
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                                topologyKey: {
                                  description: 'This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
                                  type: 'string',
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                        },
                        additionalProperties: false,
                      },
                      podAntiAffinity: {
                        description: 'Pod anti affinity is a group of inter pod anti affinity scheduling rules.',
                        properties: {
                          preferredDuringSchedulingIgnoredDuringExecution: {
                            description:
                              'The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.',
                            type: ['array', 'null'],
                            items: {
                              description: 'The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)',
                              required: ['weight', 'podAffinityTerm'],
                              properties: {
                                podAffinityTerm: {
                                  description: 'Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running',
                                  required: ['topologyKey'],
                                  properties: {
                                    labelSelector: {
                                      description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
                                      properties: {
                                        matchExpressions: {
                                          description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                                          type: ['array', 'null'],
                                          items: {
                                            description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                            required: ['key', 'operator'],
                                            properties: {
                                              key: {
                                                description: 'key is the label key that the selector applies to.',
                                                type: 'string',
                                                'x-kubernetes-patch-merge-key': 'key',
                                                'x-kubernetes-patch-strategy': 'merge',
                                              },
                                              operator: {
                                                description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                type: 'string',
                                              },
                                              values: {
                                                description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                                                type: ['array', 'null'],
                                                items: {
                                                  type: ['string', 'null'],
                                                },
                                              },
                                            },
                                            additionalProperties: false,
                                          },
                                        },
                                        matchLabels: {
                                          description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                                          type: 'object',
                                          additionalProperties: {
                                            type: ['string', 'null'],
                                          },
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                    namespaces: {
                                      description: 'namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod\'s namespace"',
                                      type: ['array', 'null'],
                                      items: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                    topologyKey: {
                                      description: 'This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
                                      type: 'string',
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                weight: {
                                  description: 'weight associated with matching the corresponding podAffinityTerm, in the range 1-100.',
                                  type: 'integer',
                                  format: 'int32',
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          requiredDuringSchedulingIgnoredDuringExecution: {
                            description:
                              'If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.',
                            type: ['array', 'null'],
                            items: {
                              description: 'Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running',
                              required: ['topologyKey'],
                              properties: {
                                labelSelector: {
                                  description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
                                  properties: {
                                    matchExpressions: {
                                      description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                        required: ['key', 'operator'],
                                        properties: {
                                          key: {
                                            description: 'key is the label key that the selector applies to.',
                                            type: 'string',
                                            'x-kubernetes-patch-merge-key': 'key',
                                            'x-kubernetes-patch-strategy': 'merge',
                                          },
                                          operator: {
                                            description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                            type: 'string',
                                          },
                                          values: {
                                            description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                                            type: ['array', 'null'],
                                            items: {
                                              type: ['string', 'null'],
                                            },
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    matchLabels: {
                                      description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                                      type: 'object',
                                      additionalProperties: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                namespaces: {
                                  description: 'namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod\'s namespace"',
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                                topologyKey: {
                                  description: 'This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
                                  type: 'string',
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                        },
                        additionalProperties: false,
                      },
                    },
                    additionalProperties: false,
                  },
                  automountServiceAccountToken: {
                    description: 'AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.',
                    type: 'boolean',
                  },
                  containers: {
                    description: 'List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.',
                    type: 'array',
                    items: {
                      description: 'A single application container that you want to run within a pod.',
                      required: ['name'],
                      properties: {
                        args: {
                          description:
                            "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                          type: ['array', 'null'],
                          items: {
                            type: ['string', 'null'],
                          },
                        },
                        command: {
                          description:
                            "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                          type: ['array', 'null'],
                          items: {
                            type: ['string', 'null'],
                          },
                        },
                        env: {
                          description: 'List of environment variables to set in the container. Cannot be updated.',
                          type: ['array', 'null'],
                          items: {
                            description: 'EnvVar represents an environment variable present in a Container.',
                            required: ['name'],
                            properties: {
                              name: {
                                description: 'Name of the environment variable. Must be a C_IDENTIFIER.',
                                type: 'string',
                              },
                              value: {
                                description: 'Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".',
                                type: ['string', 'null'],
                              },
                              valueFrom: {
                                description: 'EnvVarSource represents a source for the value of an EnvVar.',
                                properties: {
                                  configMapKeyRef: {
                                    description: 'Selects a key from a ConfigMap.',
                                    required: ['key'],
                                    properties: {
                                      key: {
                                        description: 'The key to select.',
                                        type: 'string',
                                      },
                                      name: {
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                        type: ['string', 'null'],
                                      },
                                      optional: {
                                        description: "Specify whether the ConfigMap or it's key must be defined",
                                        type: 'boolean',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  fieldRef: {
                                    description: 'ObjectFieldSelector selects an APIVersioned field of an object.',
                                    required: ['fieldPath'],
                                    properties: {
                                      apiVersion: {
                                        description: 'Version of the schema the FieldPath is written in terms of, defaults to "v1".',
                                        type: ['string', 'null'],
                                      },
                                      fieldPath: {
                                        description: 'Path of the field to select in the specified API version.',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  resourceFieldRef: {
                                    description: 'ResourceFieldSelector represents container resources (cpu, memory) and their output format',
                                    required: ['resource'],
                                    properties: {
                                      containerName: {
                                        description: 'Container name: required for volumes, optional for env vars',
                                        type: ['string', 'null'],
                                      },
                                      divisor: {
                                        oneOf: [
                                          {
                                            type: ['string', 'null'],
                                          },
                                          {
                                            type: 'integer',
                                          },
                                        ],
                                      },
                                      resource: {
                                        description: 'Required: resource to select',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  secretKeyRef: {
                                    description: 'SecretKeySelector selects a key of a Secret.',
                                    required: ['key'],
                                    properties: {
                                      key: {
                                        description: 'The key of the secret to select from.  Must be a valid secret key.',
                                        type: 'string',
                                      },
                                      name: {
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                        type: ['string', 'null'],
                                      },
                                      optional: {
                                        description: "Specify whether the Secret or it's key must be defined",
                                        type: 'boolean',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                additionalProperties: false,
                              },
                            },
                            additionalProperties: false,
                          },
                          'x-kubernetes-patch-merge-key': 'name',
                          'x-kubernetes-patch-strategy': 'merge',
                        },
                        envFrom: {
                          description: 'List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.',
                          type: ['array', 'null'],
                          items: {
                            description: 'EnvFromSource represents the source of a set of ConfigMaps',
                            properties: {
                              configMapRef: {
                                description: "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
                                properties: {
                                  name: {
                                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                    type: ['string', 'null'],
                                  },
                                  optional: {
                                    description: 'Specify whether the ConfigMap must be defined',
                                    type: 'boolean',
                                  },
                                },
                                additionalProperties: false,
                              },
                              prefix: {
                                description: 'An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.',
                                type: ['string', 'null'],
                              },
                              secretRef: {
                                description: "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
                                properties: {
                                  name: {
                                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                    type: ['string', 'null'],
                                  },
                                  optional: {
                                    description: 'Specify whether the Secret must be defined',
                                    type: 'boolean',
                                  },
                                },
                                additionalProperties: false,
                              },
                            },
                            additionalProperties: false,
                          },
                        },
                        image: {
                          description: 'Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.',
                          type: ['string', 'null'],
                        },
                        imagePullPolicy: {
                          description: 'Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images',
                          type: ['string', 'null'],
                        },
                        lifecycle: {
                          description: 'Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.',
                          properties: {
                            postStart: {
                              description: 'Handler defines a specific action that should be taken',
                              properties: {
                                exec: {
                                  description: 'ExecAction describes a "run in container" action.',
                                  properties: {
                                    command: {
                                      description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                      type: ['array', 'null'],
                                      items: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                httpGet: {
                                  description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                                  required: ['port'],
                                  properties: {
                                    host: {
                                      description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                      type: ['string', 'null'],
                                    },
                                    httpHeaders: {
                                      description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                        required: ['name', 'value'],
                                        properties: {
                                          name: {
                                            description: 'The header field name',
                                            type: 'string',
                                          },
                                          value: {
                                            description: 'The header field value',
                                            type: 'string',
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    path: {
                                      description: 'Path to access on the HTTP server.',
                                      type: ['string', 'null'],
                                    },
                                    port: {
                                      oneOf: [
                                        {
                                          type: ['string', 'null'],
                                        },
                                        {
                                          type: 'integer',
                                        },
                                      ],
                                    },
                                    scheme: {
                                      description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                      type: ['string', 'null'],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                tcpSocket: {
                                  description: 'TCPSocketAction describes an action based on opening a socket',
                                  required: ['port'],
                                  properties: {
                                    host: {
                                      description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                      type: ['string', 'null'],
                                    },
                                    port: {
                                      oneOf: [
                                        {
                                          type: ['string', 'null'],
                                        },
                                        {
                                          type: 'integer',
                                        },
                                      ],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                              },
                              additionalProperties: false,
                            },
                            preStop: {
                              description: 'Handler defines a specific action that should be taken',
                              properties: {
                                exec: {
                                  description: 'ExecAction describes a "run in container" action.',
                                  properties: {
                                    command: {
                                      description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                      type: ['array', 'null'],
                                      items: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                httpGet: {
                                  description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                                  required: ['port'],
                                  properties: {
                                    host: {
                                      description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                      type: ['string', 'null'],
                                    },
                                    httpHeaders: {
                                      description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                        required: ['name', 'value'],
                                        properties: {
                                          name: {
                                            description: 'The header field name',
                                            type: 'string',
                                          },
                                          value: {
                                            description: 'The header field value',
                                            type: 'string',
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    path: {
                                      description: 'Path to access on the HTTP server.',
                                      type: ['string', 'null'],
                                    },
                                    port: {
                                      oneOf: [
                                        {
                                          type: ['string', 'null'],
                                        },
                                        {
                                          type: 'integer',
                                        },
                                      ],
                                    },
                                    scheme: {
                                      description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                      type: ['string', 'null'],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                tcpSocket: {
                                  description: 'TCPSocketAction describes an action based on opening a socket',
                                  required: ['port'],
                                  properties: {
                                    host: {
                                      description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                      type: ['string', 'null'],
                                    },
                                    port: {
                                      oneOf: [
                                        {
                                          type: ['string', 'null'],
                                        },
                                        {
                                          type: 'integer',
                                        },
                                      ],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          additionalProperties: false,
                        },
                        livenessProbe: {
                          description: 'Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.',
                          properties: {
                            exec: {
                              description: 'ExecAction describes a "run in container" action.',
                              properties: {
                                command: {
                                  description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                              },
                              additionalProperties: false,
                            },
                            failureThreshold: {
                              description: 'Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            httpGet: {
                              description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                              required: ['port'],
                              properties: {
                                host: {
                                  description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                  type: ['string', 'null'],
                                },
                                httpHeaders: {
                                  description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                  type: ['array', 'null'],
                                  items: {
                                    description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                    required: ['name', 'value'],
                                    properties: {
                                      name: {
                                        description: 'The header field name',
                                        type: 'string',
                                      },
                                      value: {
                                        description: 'The header field value',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                path: {
                                  description: 'Path to access on the HTTP server.',
                                  type: ['string', 'null'],
                                },
                                port: {
                                  oneOf: [
                                    {
                                      type: ['string', 'null'],
                                    },
                                    {
                                      type: 'integer',
                                    },
                                  ],
                                },
                                scheme: {
                                  description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            initialDelaySeconds: {
                              description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                              type: 'integer',
                              format: 'int32',
                            },
                            periodSeconds: {
                              description: 'How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            successThreshold: {
                              description: 'Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            tcpSocket: {
                              description: 'TCPSocketAction describes an action based on opening a socket',
                              required: ['port'],
                              properties: {
                                host: {
                                  description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                  type: ['string', 'null'],
                                },
                                port: {
                                  oneOf: [
                                    {
                                      type: ['string', 'null'],
                                    },
                                    {
                                      type: 'integer',
                                    },
                                  ],
                                },
                              },
                              additionalProperties: false,
                            },
                            timeoutSeconds: {
                              description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                              type: 'integer',
                              format: 'int32',
                            },
                          },
                          additionalProperties: false,
                        },
                        name: {
                          description: 'Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.',
                          type: 'string',
                        },
                        ports: {
                          description: 'List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.',
                          type: ['array', 'null'],
                          items: {
                            description: 'ContainerPort represents a network port in a single container.',
                            required: ['containerPort'],
                            properties: {
                              containerPort: {
                                description: "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
                                type: 'integer',
                                format: 'int32',
                              },
                              hostIP: {
                                description: 'What host IP to bind the external port to.',
                                type: ['string', 'null'],
                              },
                              hostPort: {
                                description: 'Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.',
                                type: 'integer',
                                format: 'int32',
                              },
                              name: {
                                description: 'If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.',
                                type: ['string', 'null'],
                              },
                              protocol: {
                                description: 'Protocol for port. Must be UDP or TCP. Defaults to "TCP".',
                                type: ['string', 'null'],
                              },
                            },
                            additionalProperties: false,
                          },
                          'x-kubernetes-patch-merge-key': 'containerPort',
                          'x-kubernetes-patch-strategy': 'merge',
                        },
                        readinessProbe: {
                          description: 'Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.',
                          properties: {
                            exec: {
                              description: 'ExecAction describes a "run in container" action.',
                              properties: {
                                command: {
                                  description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                              },
                              additionalProperties: false,
                            },
                            failureThreshold: {
                              description: 'Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            httpGet: {
                              description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                              required: ['port'],
                              properties: {
                                host: {
                                  description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                  type: ['string', 'null'],
                                },
                                httpHeaders: {
                                  description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                  type: ['array', 'null'],
                                  items: {
                                    description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                    required: ['name', 'value'],
                                    properties: {
                                      name: {
                                        description: 'The header field name',
                                        type: 'string',
                                      },
                                      value: {
                                        description: 'The header field value',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                path: {
                                  description: 'Path to access on the HTTP server.',
                                  type: ['string', 'null'],
                                },
                                port: {
                                  oneOf: [
                                    {
                                      type: ['string', 'null'],
                                    },
                                    {
                                      type: 'integer',
                                    },
                                  ],
                                },
                                scheme: {
                                  description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            initialDelaySeconds: {
                              description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                              type: 'integer',
                              format: 'int32',
                            },
                            periodSeconds: {
                              description: 'How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            successThreshold: {
                              description: 'Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            tcpSocket: {
                              description: 'TCPSocketAction describes an action based on opening a socket',
                              required: ['port'],
                              properties: {
                                host: {
                                  description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                  type: ['string', 'null'],
                                },
                                port: {
                                  oneOf: [
                                    {
                                      type: ['string', 'null'],
                                    },
                                    {
                                      type: 'integer',
                                    },
                                  ],
                                },
                              },
                              additionalProperties: false,
                            },
                            timeoutSeconds: {
                              description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                              type: 'integer',
                              format: 'int32',
                            },
                          },
                          additionalProperties: false,
                        },
                        resources: {
                          description: 'ResourceRequirements describes the compute resource requirements.',
                          properties: {
                            limits: {
                              description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/',
                              type: 'object',
                              additionalProperties: {
                                oneOf: [
                                  {
                                    type: ['string', 'null'],
                                  },
                                  {
                                    type: 'integer',
                                  },
                                ],
                              },
                            },
                            requests: {
                              description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/',
                              type: 'object',
                              additionalProperties: {
                                oneOf: [
                                  {
                                    type: ['string', 'null'],
                                  },
                                  {
                                    type: 'integer',
                                  },
                                ],
                              },
                            },
                          },
                          additionalProperties: false,
                        },
                        securityContext: {
                          description: 'SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.',
                          properties: {
                            allowPrivilegeEscalation: {
                              description: 'AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN',
                              type: 'boolean',
                            },
                            capabilities: {
                              description: 'Adds and removes POSIX capabilities from running containers.',
                              properties: {
                                add: {
                                  description: 'Added capabilities',
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                                drop: {
                                  description: 'Removed capabilities',
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                              },
                              additionalProperties: false,
                            },
                            privileged: {
                              description: 'Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.',
                              type: 'boolean',
                            },
                            readOnlyRootFilesystem: {
                              description: 'Whether this container has a read-only root filesystem. Default is false.',
                              type: 'boolean',
                            },
                            runAsGroup: {
                              description: 'The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                              type: 'integer',
                              format: 'int64',
                            },
                            runAsNonRoot: {
                              description: 'Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                              type: 'boolean',
                            },
                            runAsUser: {
                              description: 'The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                              type: 'integer',
                              format: 'int64',
                            },
                            seLinuxOptions: {
                              description: 'SELinuxOptions are the labels to be applied to the container',
                              properties: {
                                level: {
                                  description: 'Level is SELinux level label that applies to the container.',
                                  type: ['string', 'null'],
                                },
                                role: {
                                  description: 'Role is a SELinux role label that applies to the container.',
                                  type: ['string', 'null'],
                                },
                                type: {
                                  description: 'Type is a SELinux type label that applies to the container.',
                                  type: ['string', 'null'],
                                },
                                user: {
                                  description: 'User is a SELinux user label that applies to the container.',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          additionalProperties: false,
                        },
                        stdin: {
                          description: 'Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.',
                          type: 'boolean',
                        },
                        stdinOnce: {
                          description:
                            'Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false',
                          type: 'boolean',
                        },
                        terminationMessagePath: {
                          description: "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                          type: ['string', 'null'],
                        },
                        terminationMessagePolicy: {
                          description: 'Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.',
                          type: ['string', 'null'],
                        },
                        tty: {
                          description: "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                          type: 'boolean',
                        },
                        volumeDevices: {
                          description: 'volumeDevices is the list of block devices to be used by the container. This is an alpha feature and may change in the future.',
                          type: ['array', 'null'],
                          items: {
                            description: 'volumeDevice describes a mapping of a raw block device within a container.',
                            required: ['name', 'devicePath'],
                            properties: {
                              devicePath: {
                                description: 'devicePath is the path inside of the container that the device will be mapped to.',
                                type: 'string',
                              },
                              name: {
                                description: 'name must match the name of a persistentVolumeClaim in the pod',
                                type: 'string',
                              },
                            },
                            additionalProperties: false,
                          },
                          'x-kubernetes-patch-merge-key': 'devicePath',
                          'x-kubernetes-patch-strategy': 'merge',
                        },
                        volumeMounts: {
                          description: "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                          type: ['array', 'null'],
                          items: {
                            description: 'VolumeMount describes a mounting of a Volume within a container.',
                            required: ['name', 'mountPath'],
                            properties: {
                              mountPath: {
                                description: "Path within the container at which the volume should be mounted.  Must not contain ':'.",
                                type: 'string',
                              },
                              mountPropagation: {
                                description: 'mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.',
                                type: ['string', 'null'],
                              },
                              name: {
                                description: 'This must match the Name of a Volume.',
                                type: 'string',
                              },
                              readOnly: {
                                description: 'Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.',
                                type: 'boolean',
                              },
                              subPath: {
                                description: 'Path within the volume from which the container\'s volume should be mounted. Defaults to "" (volume\'s root).',
                                type: ['string', 'null'],
                              },
                            },
                            additionalProperties: false,
                          },
                          'x-kubernetes-patch-merge-key': 'mountPath',
                          'x-kubernetes-patch-strategy': 'merge',
                        },
                        workingDir: {
                          description: "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                          type: ['string', 'null'],
                        },
                      },
                      additionalProperties: false,
                    },
                    'x-kubernetes-patch-merge-key': 'name',
                    'x-kubernetes-patch-strategy': 'merge',
                  },
                  dnsConfig: {
                    description: 'PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.',
                    properties: {
                      nameservers: {
                        description: 'A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.',
                        type: ['array', 'null'],
                        items: {
                          type: ['string', 'null'],
                        },
                      },
                      options: {
                        description: 'A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.',
                        type: ['array', 'null'],
                        items: {
                          description: 'PodDNSConfigOption defines DNS resolver options of a pod.',
                          properties: {
                            name: {
                              description: 'Required.',
                              type: ['string', 'null'],
                            },
                            value: {
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                      },
                      searches: {
                        description: 'A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.',
                        type: ['array', 'null'],
                        items: {
                          type: ['string', 'null'],
                        },
                      },
                    },
                    additionalProperties: false,
                  },
                  dnsPolicy: {
                    description: "Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.",
                    type: ['string', 'null'],
                  },
                  hostAliases: {
                    description: "HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.",
                    type: ['array', 'null'],
                    items: {
                      description: "HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.",
                      properties: {
                        hostnames: {
                          description: 'Hostnames for the above IP address.',
                          type: ['array', 'null'],
                          items: {
                            type: ['string', 'null'],
                          },
                        },
                        ip: {
                          description: 'IP address of the host file entry.',
                          type: ['string', 'null'],
                        },
                      },
                      additionalProperties: false,
                    },
                    'x-kubernetes-patch-merge-key': 'ip',
                    'x-kubernetes-patch-strategy': 'merge',
                  },
                  hostIPC: {
                    description: "Use the host's ipc namespace. Optional: Default to false.",
                    type: 'boolean',
                  },
                  hostNetwork: {
                    description: "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.",
                    type: 'boolean',
                  },
                  hostPID: {
                    description: "Use the host's pid namespace. Optional: Default to false.",
                    type: 'boolean',
                  },
                  hostname: {
                    description: "Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.",
                    type: ['string', 'null'],
                  },
                  imagePullSecrets: {
                    description: 'ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod',
                    type: ['array', 'null'],
                    items: {
                      description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                      properties: {
                        name: {
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                          type: ['string', 'null'],
                        },
                      },
                      additionalProperties: false,
                    },
                    'x-kubernetes-patch-merge-key': 'name',
                    'x-kubernetes-patch-strategy': 'merge',
                  },
                  initContainers: {
                    description:
                      'List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/',
                    type: ['array', 'null'],
                    items: {
                      description: 'A single application container that you want to run within a pod.',
                      required: ['name'],
                      properties: {
                        args: {
                          description:
                            "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                          type: ['array', 'null'],
                          items: {
                            type: ['string', 'null'],
                          },
                        },
                        command: {
                          description:
                            "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                          type: ['array', 'null'],
                          items: {
                            type: ['string', 'null'],
                          },
                        },
                        env: {
                          description: 'List of environment variables to set in the container. Cannot be updated.',
                          type: ['array', 'null'],
                          items: {
                            description: 'EnvVar represents an environment variable present in a Container.',
                            required: ['name'],
                            properties: {
                              name: {
                                description: 'Name of the environment variable. Must be a C_IDENTIFIER.',
                                type: 'string',
                              },
                              value: {
                                description: 'Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".',
                                type: ['string', 'null'],
                              },
                              valueFrom: {
                                description: 'EnvVarSource represents a source for the value of an EnvVar.',
                                properties: {
                                  configMapKeyRef: {
                                    description: 'Selects a key from a ConfigMap.',
                                    required: ['key'],
                                    properties: {
                                      key: {
                                        description: 'The key to select.',
                                        type: 'string',
                                      },
                                      name: {
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                        type: ['string', 'null'],
                                      },
                                      optional: {
                                        description: "Specify whether the ConfigMap or it's key must be defined",
                                        type: 'boolean',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  fieldRef: {
                                    description: 'ObjectFieldSelector selects an APIVersioned field of an object.',
                                    required: ['fieldPath'],
                                    properties: {
                                      apiVersion: {
                                        description: 'Version of the schema the FieldPath is written in terms of, defaults to "v1".',
                                        type: ['string', 'null'],
                                      },
                                      fieldPath: {
                                        description: 'Path of the field to select in the specified API version.',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  resourceFieldRef: {
                                    description: 'ResourceFieldSelector represents container resources (cpu, memory) and their output format',
                                    required: ['resource'],
                                    properties: {
                                      containerName: {
                                        description: 'Container name: required for volumes, optional for env vars',
                                        type: ['string', 'null'],
                                      },
                                      divisor: {
                                        oneOf: [
                                          {
                                            type: ['string', 'null'],
                                          },
                                          {
                                            type: 'integer',
                                          },
                                        ],
                                      },
                                      resource: {
                                        description: 'Required: resource to select',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  secretKeyRef: {
                                    description: 'SecretKeySelector selects a key of a Secret.',
                                    required: ['key'],
                                    properties: {
                                      key: {
                                        description: 'The key of the secret to select from.  Must be a valid secret key.',
                                        type: 'string',
                                      },
                                      name: {
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                        type: ['string', 'null'],
                                      },
                                      optional: {
                                        description: "Specify whether the Secret or it's key must be defined",
                                        type: 'boolean',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                additionalProperties: false,
                              },
                            },
                            additionalProperties: false,
                          },
                          'x-kubernetes-patch-merge-key': 'name',
                          'x-kubernetes-patch-strategy': 'merge',
                        },
                        envFrom: {
                          description: 'List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.',
                          type: ['array', 'null'],
                          items: {
                            description: 'EnvFromSource represents the source of a set of ConfigMaps',
                            properties: {
                              configMapRef: {
                                description: "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
                                properties: {
                                  name: {
                                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                    type: ['string', 'null'],
                                  },
                                  optional: {
                                    description: 'Specify whether the ConfigMap must be defined',
                                    type: 'boolean',
                                  },
                                },
                                additionalProperties: false,
                              },
                              prefix: {
                                description: 'An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.',
                                type: ['string', 'null'],
                              },
                              secretRef: {
                                description: "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
                                properties: {
                                  name: {
                                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                    type: ['string', 'null'],
                                  },
                                  optional: {
                                    description: 'Specify whether the Secret must be defined',
                                    type: 'boolean',
                                  },
                                },
                                additionalProperties: false,
                              },
                            },
                            additionalProperties: false,
                          },
                        },
                        image: {
                          description: 'Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.',
                          type: ['string', 'null'],
                        },
                        imagePullPolicy: {
                          description: 'Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images',
                          type: ['string', 'null'],
                        },
                        lifecycle: {
                          description: 'Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.',
                          properties: {
                            postStart: {
                              description: 'Handler defines a specific action that should be taken',
                              properties: {
                                exec: {
                                  description: 'ExecAction describes a "run in container" action.',
                                  properties: {
                                    command: {
                                      description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                      type: ['array', 'null'],
                                      items: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                httpGet: {
                                  description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                                  required: ['port'],
                                  properties: {
                                    host: {
                                      description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                      type: ['string', 'null'],
                                    },
                                    httpHeaders: {
                                      description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                        required: ['name', 'value'],
                                        properties: {
                                          name: {
                                            description: 'The header field name',
                                            type: 'string',
                                          },
                                          value: {
                                            description: 'The header field value',
                                            type: 'string',
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    path: {
                                      description: 'Path to access on the HTTP server.',
                                      type: ['string', 'null'],
                                    },
                                    port: {
                                      oneOf: [
                                        {
                                          type: ['string', 'null'],
                                        },
                                        {
                                          type: 'integer',
                                        },
                                      ],
                                    },
                                    scheme: {
                                      description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                      type: ['string', 'null'],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                tcpSocket: {
                                  description: 'TCPSocketAction describes an action based on opening a socket',
                                  required: ['port'],
                                  properties: {
                                    host: {
                                      description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                      type: ['string', 'null'],
                                    },
                                    port: {
                                      oneOf: [
                                        {
                                          type: ['string', 'null'],
                                        },
                                        {
                                          type: 'integer',
                                        },
                                      ],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                              },
                              additionalProperties: false,
                            },
                            preStop: {
                              description: 'Handler defines a specific action that should be taken',
                              properties: {
                                exec: {
                                  description: 'ExecAction describes a "run in container" action.',
                                  properties: {
                                    command: {
                                      description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                      type: ['array', 'null'],
                                      items: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                httpGet: {
                                  description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                                  required: ['port'],
                                  properties: {
                                    host: {
                                      description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                      type: ['string', 'null'],
                                    },
                                    httpHeaders: {
                                      description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                        required: ['name', 'value'],
                                        properties: {
                                          name: {
                                            description: 'The header field name',
                                            type: 'string',
                                          },
                                          value: {
                                            description: 'The header field value',
                                            type: 'string',
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    path: {
                                      description: 'Path to access on the HTTP server.',
                                      type: ['string', 'null'],
                                    },
                                    port: {
                                      oneOf: [
                                        {
                                          type: ['string', 'null'],
                                        },
                                        {
                                          type: 'integer',
                                        },
                                      ],
                                    },
                                    scheme: {
                                      description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                      type: ['string', 'null'],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                tcpSocket: {
                                  description: 'TCPSocketAction describes an action based on opening a socket',
                                  required: ['port'],
                                  properties: {
                                    host: {
                                      description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                      type: ['string', 'null'],
                                    },
                                    port: {
                                      oneOf: [
                                        {
                                          type: ['string', 'null'],
                                        },
                                        {
                                          type: 'integer',
                                        },
                                      ],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          additionalProperties: false,
                        },
                        livenessProbe: {
                          description: 'Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.',
                          properties: {
                            exec: {
                              description: 'ExecAction describes a "run in container" action.',
                              properties: {
                                command: {
                                  description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                              },
                              additionalProperties: false,
                            },
                            failureThreshold: {
                              description: 'Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            httpGet: {
                              description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                              required: ['port'],
                              properties: {
                                host: {
                                  description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                  type: ['string', 'null'],
                                },
                                httpHeaders: {
                                  description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                  type: ['array', 'null'],
                                  items: {
                                    description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                    required: ['name', 'value'],
                                    properties: {
                                      name: {
                                        description: 'The header field name',
                                        type: 'string',
                                      },
                                      value: {
                                        description: 'The header field value',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                path: {
                                  description: 'Path to access on the HTTP server.',
                                  type: ['string', 'null'],
                                },
                                port: {
                                  oneOf: [
                                    {
                                      type: ['string', 'null'],
                                    },
                                    {
                                      type: 'integer',
                                    },
                                  ],
                                },
                                scheme: {
                                  description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            initialDelaySeconds: {
                              description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                              type: 'integer',
                              format: 'int32',
                            },
                            periodSeconds: {
                              description: 'How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            successThreshold: {
                              description: 'Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            tcpSocket: {
                              description: 'TCPSocketAction describes an action based on opening a socket',
                              required: ['port'],
                              properties: {
                                host: {
                                  description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                  type: ['string', 'null'],
                                },
                                port: {
                                  oneOf: [
                                    {
                                      type: ['string', 'null'],
                                    },
                                    {
                                      type: 'integer',
                                    },
                                  ],
                                },
                              },
                              additionalProperties: false,
                            },
                            timeoutSeconds: {
                              description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                              type: 'integer',
                              format: 'int32',
                            },
                          },
                          additionalProperties: false,
                        },
                        name: {
                          description: 'Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.',
                          type: 'string',
                        },
                        ports: {
                          description: 'List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.',
                          type: ['array', 'null'],
                          items: {
                            description: 'ContainerPort represents a network port in a single container.',
                            required: ['containerPort'],
                            properties: {
                              containerPort: {
                                description: "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
                                type: 'integer',
                                format: 'int32',
                              },
                              hostIP: {
                                description: 'What host IP to bind the external port to.',
                                type: ['string', 'null'],
                              },
                              hostPort: {
                                description: 'Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.',
                                type: 'integer',
                                format: 'int32',
                              },
                              name: {
                                description: 'If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.',
                                type: ['string', 'null'],
                              },
                              protocol: {
                                description: 'Protocol for port. Must be UDP or TCP. Defaults to "TCP".',
                                type: ['string', 'null'],
                              },
                            },
                            additionalProperties: false,
                          },
                          'x-kubernetes-patch-merge-key': 'containerPort',
                          'x-kubernetes-patch-strategy': 'merge',
                        },
                        readinessProbe: {
                          description: 'Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.',
                          properties: {
                            exec: {
                              description: 'ExecAction describes a "run in container" action.',
                              properties: {
                                command: {
                                  description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                              },
                              additionalProperties: false,
                            },
                            failureThreshold: {
                              description: 'Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            httpGet: {
                              description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                              required: ['port'],
                              properties: {
                                host: {
                                  description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                  type: ['string', 'null'],
                                },
                                httpHeaders: {
                                  description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                  type: ['array', 'null'],
                                  items: {
                                    description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                    required: ['name', 'value'],
                                    properties: {
                                      name: {
                                        description: 'The header field name',
                                        type: 'string',
                                      },
                                      value: {
                                        description: 'The header field value',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                path: {
                                  description: 'Path to access on the HTTP server.',
                                  type: ['string', 'null'],
                                },
                                port: {
                                  oneOf: [
                                    {
                                      type: ['string', 'null'],
                                    },
                                    {
                                      type: 'integer',
                                    },
                                  ],
                                },
                                scheme: {
                                  description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            initialDelaySeconds: {
                              description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                              type: 'integer',
                              format: 'int32',
                            },
                            periodSeconds: {
                              description: 'How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            successThreshold: {
                              description: 'Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            tcpSocket: {
                              description: 'TCPSocketAction describes an action based on opening a socket',
                              required: ['port'],
                              properties: {
                                host: {
                                  description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                  type: ['string', 'null'],
                                },
                                port: {
                                  oneOf: [
                                    {
                                      type: ['string', 'null'],
                                    },
                                    {
                                      type: 'integer',
                                    },
                                  ],
                                },
                              },
                              additionalProperties: false,
                            },
                            timeoutSeconds: {
                              description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                              type: 'integer',
                              format: 'int32',
                            },
                          },
                          additionalProperties: false,
                        },
                        resources: {
                          description: 'ResourceRequirements describes the compute resource requirements.',
                          properties: {
                            limits: {
                              description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/',
                              type: 'object',
                              additionalProperties: {
                                oneOf: [
                                  {
                                    type: ['string', 'null'],
                                  },
                                  {
                                    type: 'integer',
                                  },
                                ],
                              },
                            },
                            requests: {
                              description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/',
                              type: 'object',
                              additionalProperties: {
                                oneOf: [
                                  {
                                    type: ['string', 'null'],
                                  },
                                  {
                                    type: 'integer',
                                  },
                                ],
                              },
                            },
                          },
                          additionalProperties: false,
                        },
                        securityContext: {
                          description: 'SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.',
                          properties: {
                            allowPrivilegeEscalation: {
                              description: 'AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN',
                              type: 'boolean',
                            },
                            capabilities: {
                              description: 'Adds and removes POSIX capabilities from running containers.',
                              properties: {
                                add: {
                                  description: 'Added capabilities',
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                                drop: {
                                  description: 'Removed capabilities',
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                              },
                              additionalProperties: false,
                            },
                            privileged: {
                              description: 'Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.',
                              type: 'boolean',
                            },
                            readOnlyRootFilesystem: {
                              description: 'Whether this container has a read-only root filesystem. Default is false.',
                              type: 'boolean',
                            },
                            runAsGroup: {
                              description: 'The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                              type: 'integer',
                              format: 'int64',
                            },
                            runAsNonRoot: {
                              description: 'Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                              type: 'boolean',
                            },
                            runAsUser: {
                              description: 'The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                              type: 'integer',
                              format: 'int64',
                            },
                            seLinuxOptions: {
                              description: 'SELinuxOptions are the labels to be applied to the container',
                              properties: {
                                level: {
                                  description: 'Level is SELinux level label that applies to the container.',
                                  type: ['string', 'null'],
                                },
                                role: {
                                  description: 'Role is a SELinux role label that applies to the container.',
                                  type: ['string', 'null'],
                                },
                                type: {
                                  description: 'Type is a SELinux type label that applies to the container.',
                                  type: ['string', 'null'],
                                },
                                user: {
                                  description: 'User is a SELinux user label that applies to the container.',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          additionalProperties: false,
                        },
                        stdin: {
                          description: 'Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.',
                          type: 'boolean',
                        },
                        stdinOnce: {
                          description:
                            'Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false',
                          type: 'boolean',
                        },
                        terminationMessagePath: {
                          description: "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                          type: ['string', 'null'],
                        },
                        terminationMessagePolicy: {
                          description: 'Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.',
                          type: ['string', 'null'],
                        },
                        tty: {
                          description: "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                          type: 'boolean',
                        },
                        volumeDevices: {
                          description: 'volumeDevices is the list of block devices to be used by the container. This is an alpha feature and may change in the future.',
                          type: ['array', 'null'],
                          items: {
                            description: 'volumeDevice describes a mapping of a raw block device within a container.',
                            required: ['name', 'devicePath'],
                            properties: {
                              devicePath: {
                                description: 'devicePath is the path inside of the container that the device will be mapped to.',
                                type: 'string',
                              },
                              name: {
                                description: 'name must match the name of a persistentVolumeClaim in the pod',
                                type: 'string',
                              },
                            },
                            additionalProperties: false,
                          },
                          'x-kubernetes-patch-merge-key': 'devicePath',
                          'x-kubernetes-patch-strategy': 'merge',
                        },
                        volumeMounts: {
                          description: "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                          type: ['array', 'null'],
                          items: {
                            description: 'VolumeMount describes a mounting of a Volume within a container.',
                            required: ['name', 'mountPath'],
                            properties: {
                              mountPath: {
                                description: "Path within the container at which the volume should be mounted.  Must not contain ':'.",
                                type: 'string',
                              },
                              mountPropagation: {
                                description: 'mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.',
                                type: ['string', 'null'],
                              },
                              name: {
                                description: 'This must match the Name of a Volume.',
                                type: 'string',
                              },
                              readOnly: {
                                description: 'Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.',
                                type: 'boolean',
                              },
                              subPath: {
                                description: 'Path within the volume from which the container\'s volume should be mounted. Defaults to "" (volume\'s root).',
                                type: ['string', 'null'],
                              },
                            },
                            additionalProperties: false,
                          },
                          'x-kubernetes-patch-merge-key': 'mountPath',
                          'x-kubernetes-patch-strategy': 'merge',
                        },
                        workingDir: {
                          description: "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                          type: ['string', 'null'],
                        },
                      },
                      additionalProperties: false,
                    },
                    'x-kubernetes-patch-merge-key': 'name',
                    'x-kubernetes-patch-strategy': 'merge',
                  },
                  nodeName: {
                    description: 'NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.',
                    type: ['string', 'null'],
                  },
                  nodeSelector: {
                    description: "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
                    type: 'object',
                    additionalProperties: {
                      type: ['string', 'null'],
                    },
                  },
                  priority: {
                    description: 'The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.',
                    type: 'integer',
                    format: 'int32',
                  },
                  priorityClassName: {
                    description: 'If specified, indicates the pod\'s priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.',
                    type: ['string', 'null'],
                  },
                  readinessGates: {
                    description: 'If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://github.com/kubernetes/community/blob/master/keps/sig-network/0007-pod-ready%2B%2B.md',
                    type: ['array', 'null'],
                    items: {
                      description: 'PodReadinessGate contains the reference to a pod condition',
                      required: ['conditionType'],
                      properties: {
                        conditionType: {
                          description: "ConditionType refers to a condition in the pod's condition list with matching type.",
                          type: 'string',
                        },
                      },
                      additionalProperties: false,
                    },
                  },
                  restartPolicy: {
                    description: 'Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy',
                    type: ['string', 'null'],
                  },
                  schedulerName: {
                    description: 'If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.',
                    type: ['string', 'null'],
                  },
                  securityContext: {
                    description: 'PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.',
                    properties: {
                      fsGroup: {
                        description: "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume.",
                        type: 'integer',
                        format: 'int64',
                      },
                      runAsGroup: {
                        description: 'The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.',
                        type: 'integer',
                        format: 'int64',
                      },
                      runAsNonRoot: {
                        description: 'Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                        type: 'boolean',
                      },
                      runAsUser: {
                        description: 'The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.',
                        type: 'integer',
                        format: 'int64',
                      },
                      seLinuxOptions: {
                        description: 'SELinuxOptions are the labels to be applied to the container',
                        properties: {
                          level: {
                            description: 'Level is SELinux level label that applies to the container.',
                            type: ['string', 'null'],
                          },
                          role: {
                            description: 'Role is a SELinux role label that applies to the container.',
                            type: ['string', 'null'],
                          },
                          type: {
                            description: 'Type is a SELinux type label that applies to the container.',
                            type: ['string', 'null'],
                          },
                          user: {
                            description: 'User is a SELinux user label that applies to the container.',
                            type: ['string', 'null'],
                          },
                        },
                        additionalProperties: false,
                      },
                      supplementalGroups: {
                        description: "A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.",
                        type: ['array', 'null'],
                        items: {
                          type: 'integer',
                          format: 'int64',
                        },
                      },
                      sysctls: {
                        description: 'Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.',
                        type: ['array', 'null'],
                        items: {
                          description: 'Sysctl defines a kernel parameter to be set',
                          required: ['name', 'value'],
                          properties: {
                            name: {
                              description: 'Name of a property to set',
                              type: 'string',
                            },
                            value: {
                              description: 'Value of a property to set',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                      },
                    },
                    additionalProperties: false,
                  },
                  serviceAccount: {
                    description: 'DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.',
                    type: ['string', 'null'],
                  },
                  serviceAccountName: {
                    description: 'ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/',
                    type: ['string', 'null'],
                  },
                  shareProcessNamespace: {
                    description: 'Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false. This field is alpha-level and is honored only by servers that enable the PodShareProcessNamespace feature.',
                    type: 'boolean',
                  },
                  subdomain: {
                    description: 'If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.',
                    type: ['string', 'null'],
                  },
                  terminationGracePeriodSeconds: {
                    description:
                      'Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.',
                    type: 'integer',
                    format: 'int64',
                  },
                  tolerations: {
                    description: "If specified, the pod's tolerations.",
                    type: ['array', 'null'],
                    items: {
                      description: 'The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.',
                      properties: {
                        effect: {
                          description: 'Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.',
                          type: ['string', 'null'],
                        },
                        key: {
                          description: 'Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.',
                          type: ['string', 'null'],
                        },
                        operator: {
                          description: "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                          type: ['string', 'null'],
                        },
                        tolerationSeconds: {
                          description: 'TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.',
                          type: 'integer',
                          format: 'int64',
                        },
                        value: {
                          description: 'Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.',
                          type: ['string', 'null'],
                        },
                      },
                      additionalProperties: false,
                    },
                  },
                  volumes: {
                    description: 'List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes',
                    type: ['array', 'null'],
                    items: {
                      description: 'Volume represents a named volume in a pod that may be accessed by any container in the pod.',
                      required: ['name'],
                      properties: {
                        awsElasticBlockStore: {
                          description: 'Represents a Persistent Disk resource in AWS.\n\nAn AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.',
                          required: ['volumeID'],
                          properties: {
                            fsType: {
                              description: 'Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore',
                              type: ['string', 'null'],
                            },
                            partition: {
                              description: 'The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).',
                              type: 'integer',
                              format: 'int32',
                            },
                            readOnly: {
                              description: 'Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore',
                              type: 'boolean',
                            },
                            volumeID: {
                              description: 'Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        azureDisk: {
                          description: 'AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.',
                          required: ['diskName', 'diskURI'],
                          properties: {
                            cachingMode: {
                              description: 'Host Caching mode: None, Read Only, Read Write.',
                              type: ['string', 'null'],
                            },
                            diskName: {
                              description: 'The Name of the data disk in the blob storage',
                              type: 'string',
                            },
                            diskURI: {
                              description: 'The URI the data disk in the blob storage',
                              type: 'string',
                            },
                            fsType: {
                              description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                              type: ['string', 'null'],
                            },
                            kind: {
                              description: 'Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared',
                              type: ['string', 'null'],
                            },
                            readOnly: {
                              description: 'Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                              type: 'boolean',
                            },
                          },
                          additionalProperties: false,
                        },
                        azureFile: {
                          description: 'AzureFile represents an Azure File Service mount on the host and bind mount to the pod.',
                          required: ['secretName', 'shareName'],
                          properties: {
                            readOnly: {
                              description: 'Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                              type: 'boolean',
                            },
                            secretName: {
                              description: 'the name of secret that contains Azure Storage Account Name and Key',
                              type: 'string',
                            },
                            shareName: {
                              description: 'Share Name',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        cephfs: {
                          description: 'Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.',
                          required: ['monitors'],
                          properties: {
                            monitors: {
                              description: 'Required: Monitors is a collection of Ceph monitors More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it',
                              type: 'array',
                              items: {
                                type: ['string', 'null'],
                              },
                            },
                            path: {
                              description: 'Optional: Used as the mounted root, rather than the full Ceph tree, default is /',
                              type: ['string', 'null'],
                            },
                            readOnly: {
                              description: 'Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it',
                              type: 'boolean',
                            },
                            secretFile: {
                              description: 'Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it',
                              type: ['string', 'null'],
                            },
                            secretRef: {
                              description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                              properties: {
                                name: {
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            user: {
                              description: 'Optional: User is the rados user name, default is admin More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                        cinder: {
                          description: 'Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.',
                          required: ['volumeID'],
                          properties: {
                            fsType: {
                              description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md',
                              type: ['string', 'null'],
                            },
                            readOnly: {
                              description: 'Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md',
                              type: 'boolean',
                            },
                            secretRef: {
                              description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                              properties: {
                                name: {
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            volumeID: {
                              description: 'volume id used to identify the volume in cinder More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        configMap: {
                          description: "Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.",
                          properties: {
                            defaultMode: {
                              description: 'Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                              type: 'integer',
                              format: 'int32',
                            },
                            items: {
                              description:
                                "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                              type: ['array', 'null'],
                              items: {
                                description: 'Maps a string key to a path within a volume.',
                                required: ['key', 'path'],
                                properties: {
                                  key: {
                                    description: 'The key to project.',
                                    type: 'string',
                                  },
                                  mode: {
                                    description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                    type: 'integer',
                                    format: 'int32',
                                  },
                                  path: {
                                    description: "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                                    type: 'string',
                                  },
                                },
                                additionalProperties: false,
                              },
                            },
                            name: {
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                              type: ['string', 'null'],
                            },
                            optional: {
                              description: "Specify whether the ConfigMap or it's keys must be defined",
                              type: 'boolean',
                            },
                          },
                          additionalProperties: false,
                        },
                        downwardAPI: {
                          description: 'DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.',
                          properties: {
                            defaultMode: {
                              description: 'Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                              type: 'integer',
                              format: 'int32',
                            },
                            items: {
                              description: 'Items is a list of downward API volume file',
                              type: ['array', 'null'],
                              items: {
                                description: 'DownwardAPIVolumeFile represents information to create the file containing the pod field',
                                required: ['path'],
                                properties: {
                                  fieldRef: {
                                    description: 'ObjectFieldSelector selects an APIVersioned field of an object.',
                                    required: ['fieldPath'],
                                    properties: {
                                      apiVersion: {
                                        description: 'Version of the schema the FieldPath is written in terms of, defaults to "v1".',
                                        type: ['string', 'null'],
                                      },
                                      fieldPath: {
                                        description: 'Path of the field to select in the specified API version.',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  mode: {
                                    description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                    type: 'integer',
                                    format: 'int32',
                                  },
                                  path: {
                                    description: "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
                                    type: 'string',
                                  },
                                  resourceFieldRef: {
                                    description: 'ResourceFieldSelector represents container resources (cpu, memory) and their output format',
                                    required: ['resource'],
                                    properties: {
                                      containerName: {
                                        description: 'Container name: required for volumes, optional for env vars',
                                        type: ['string', 'null'],
                                      },
                                      divisor: {
                                        oneOf: [
                                          {
                                            type: ['string', 'null'],
                                          },
                                          {
                                            type: 'integer',
                                          },
                                        ],
                                      },
                                      resource: {
                                        description: 'Required: resource to select',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                additionalProperties: false,
                              },
                            },
                          },
                          additionalProperties: false,
                        },
                        emptyDir: {
                          description: 'Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.',
                          properties: {
                            medium: {
                              description: 'What type of storage medium should back this directory. The default is "" which means to use the node\'s default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir',
                              type: ['string', 'null'],
                            },
                            sizeLimit: {
                              oneOf: [
                                {
                                  type: ['string', 'null'],
                                },
                                {
                                  type: 'integer',
                                },
                              ],
                            },
                          },
                          additionalProperties: false,
                        },
                        fc: {
                          description: 'Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.',
                          properties: {
                            fsType: {
                              description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                              type: ['string', 'null'],
                            },
                            lun: {
                              description: 'Optional: FC target lun number',
                              type: 'integer',
                              format: 'int32',
                            },
                            readOnly: {
                              description: 'Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                              type: 'boolean',
                            },
                            targetWWNs: {
                              description: 'Optional: FC target worldwide names (WWNs)',
                              type: ['array', 'null'],
                              items: {
                                type: ['string', 'null'],
                              },
                            },
                            wwids: {
                              description: 'Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.',
                              type: ['array', 'null'],
                              items: {
                                type: ['string', 'null'],
                              },
                            },
                          },
                          additionalProperties: false,
                        },
                        flexVolume: {
                          description: 'FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.',
                          required: ['driver'],
                          properties: {
                            driver: {
                              description: 'Driver is the name of the driver to use for this volume.',
                              type: 'string',
                            },
                            fsType: {
                              description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.',
                              type: ['string', 'null'],
                            },
                            options: {
                              description: 'Optional: Extra command options if any.',
                              type: 'object',
                              additionalProperties: {
                                type: ['string', 'null'],
                              },
                            },
                            readOnly: {
                              description: 'Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                              type: 'boolean',
                            },
                            secretRef: {
                              description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                              properties: {
                                name: {
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          additionalProperties: false,
                        },
                        flocker: {
                          description: 'Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.',
                          properties: {
                            datasetName: {
                              description: 'Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated',
                              type: ['string', 'null'],
                            },
                            datasetUUID: {
                              description: 'UUID of the dataset. This is unique identifier of a Flocker dataset',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                        gcePersistentDisk: {
                          description: 'Represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.',
                          required: ['pdName'],
                          properties: {
                            fsType: {
                              description: 'Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
                              type: ['string', 'null'],
                            },
                            partition: {
                              description: 'The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
                              type: 'integer',
                              format: 'int32',
                            },
                            pdName: {
                              description: 'Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
                              type: 'string',
                            },
                            readOnly: {
                              description: 'ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
                              type: 'boolean',
                            },
                          },
                          additionalProperties: false,
                        },
                        gitRepo: {
                          description: "Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.\n\nDEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.",
                          required: ['repository'],
                          properties: {
                            directory: {
                              description: "Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.",
                              type: ['string', 'null'],
                            },
                            repository: {
                              description: 'Repository URL',
                              type: 'string',
                            },
                            revision: {
                              description: 'Commit hash for the specified revision.',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                        glusterfs: {
                          description: 'Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.',
                          required: ['endpoints', 'path'],
                          properties: {
                            endpoints: {
                              description: 'EndpointsName is the endpoint name that details Glusterfs topology. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod',
                              type: 'string',
                            },
                            path: {
                              description: 'Path is the Glusterfs volume path. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod',
                              type: 'string',
                            },
                            readOnly: {
                              description: 'ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod',
                              type: 'boolean',
                            },
                          },
                          additionalProperties: false,
                        },
                        hostPath: {
                          description: 'Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.',
                          required: ['path'],
                          properties: {
                            path: {
                              description: 'Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath',
                              type: 'string',
                            },
                            type: {
                              description: 'Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                        iscsi: {
                          description: 'Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.',
                          required: ['targetPortal', 'iqn', 'lun'],
                          properties: {
                            chapAuthDiscovery: {
                              description: 'whether support iSCSI Discovery CHAP authentication',
                              type: 'boolean',
                            },
                            chapAuthSession: {
                              description: 'whether support iSCSI Session CHAP authentication',
                              type: 'boolean',
                            },
                            fsType: {
                              description: 'Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi',
                              type: ['string', 'null'],
                            },
                            initiatorName: {
                              description: 'Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.',
                              type: ['string', 'null'],
                            },
                            iqn: {
                              description: 'Target iSCSI Qualified Name.',
                              type: 'string',
                            },
                            iscsiInterface: {
                              description: "iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
                              type: ['string', 'null'],
                            },
                            lun: {
                              description: 'iSCSI Target Lun number.',
                              type: 'integer',
                              format: 'int32',
                            },
                            portals: {
                              description: 'iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).',
                              type: ['array', 'null'],
                              items: {
                                type: ['string', 'null'],
                              },
                            },
                            readOnly: {
                              description: 'ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.',
                              type: 'boolean',
                            },
                            secretRef: {
                              description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                              properties: {
                                name: {
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            targetPortal: {
                              description: 'iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        name: {
                          description: "Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                          type: 'string',
                        },
                        nfs: {
                          description: 'Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.',
                          required: ['server', 'path'],
                          properties: {
                            path: {
                              description: 'Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs',
                              type: 'string',
                            },
                            readOnly: {
                              description: 'ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs',
                              type: 'boolean',
                            },
                            server: {
                              description: 'Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        persistentVolumeClaim: {
                          description: "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).",
                          required: ['claimName'],
                          properties: {
                            claimName: {
                              description: 'ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims',
                              type: 'string',
                            },
                            readOnly: {
                              description: 'Will force the ReadOnly setting in VolumeMounts. Default false.',
                              type: 'boolean',
                            },
                          },
                          additionalProperties: false,
                        },
                        photonPersistentDisk: {
                          description: 'Represents a Photon Controller persistent disk resource.',
                          required: ['pdID'],
                          properties: {
                            fsType: {
                              description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                              type: ['string', 'null'],
                            },
                            pdID: {
                              description: 'ID that identifies Photon Controller persistent disk',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        portworxVolume: {
                          description: 'PortworxVolumeSource represents a Portworx volume resource.',
                          required: ['volumeID'],
                          properties: {
                            fsType: {
                              description: 'FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.',
                              type: ['string', 'null'],
                            },
                            readOnly: {
                              description: 'Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                              type: 'boolean',
                            },
                            volumeID: {
                              description: 'VolumeID uniquely identifies a Portworx volume',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        projected: {
                          description: 'Represents a projected volume source',
                          required: ['sources'],
                          properties: {
                            defaultMode: {
                              description: 'Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                              type: 'integer',
                              format: 'int32',
                            },
                            sources: {
                              description: 'list of volume projections',
                              type: 'array',
                              items: {
                                description: 'Projection that may be projected along with other supported volume types',
                                properties: {
                                  configMap: {
                                    description: "Adapts a ConfigMap into a projected volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.",
                                    properties: {
                                      items: {
                                        description:
                                          "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                                        type: ['array', 'null'],
                                        items: {
                                          description: 'Maps a string key to a path within a volume.',
                                          required: ['key', 'path'],
                                          properties: {
                                            key: {
                                              description: 'The key to project.',
                                              type: 'string',
                                            },
                                            mode: {
                                              description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                              type: 'integer',
                                              format: 'int32',
                                            },
                                            path: {
                                              description: "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                                              type: 'string',
                                            },
                                          },
                                          additionalProperties: false,
                                        },
                                      },
                                      name: {
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                        type: ['string', 'null'],
                                      },
                                      optional: {
                                        description: "Specify whether the ConfigMap or it's keys must be defined",
                                        type: 'boolean',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  downwardAPI: {
                                    description: 'Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.',
                                    properties: {
                                      items: {
                                        description: 'Items is a list of DownwardAPIVolume file',
                                        type: ['array', 'null'],
                                        items: {
                                          description: 'DownwardAPIVolumeFile represents information to create the file containing the pod field',
                                          required: ['path'],
                                          properties: {
                                            fieldRef: {
                                              description: 'ObjectFieldSelector selects an APIVersioned field of an object.',
                                              required: ['fieldPath'],
                                              properties: {
                                                apiVersion: {
                                                  description: 'Version of the schema the FieldPath is written in terms of, defaults to "v1".',
                                                  type: ['string', 'null'],
                                                },
                                                fieldPath: {
                                                  description: 'Path of the field to select in the specified API version.',
                                                  type: 'string',
                                                },
                                              },
                                              additionalProperties: false,
                                            },
                                            mode: {
                                              description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                              type: 'integer',
                                              format: 'int32',
                                            },
                                            path: {
                                              description: "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
                                              type: 'string',
                                            },
                                            resourceFieldRef: {
                                              description: 'ResourceFieldSelector represents container resources (cpu, memory) and their output format',
                                              required: ['resource'],
                                              properties: {
                                                containerName: {
                                                  description: 'Container name: required for volumes, optional for env vars',
                                                  type: ['string', 'null'],
                                                },
                                                divisor: {
                                                  oneOf: [
                                                    {
                                                      type: ['string', 'null'],
                                                    },
                                                    {
                                                      type: 'integer',
                                                    },
                                                  ],
                                                },
                                                resource: {
                                                  description: 'Required: resource to select',
                                                  type: 'string',
                                                },
                                              },
                                              additionalProperties: false,
                                            },
                                          },
                                          additionalProperties: false,
                                        },
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  secret: {
                                    description: "Adapts a secret into a projected volume.\n\nThe contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.",
                                    properties: {
                                      items: {
                                        description:
                                          "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                                        type: ['array', 'null'],
                                        items: {
                                          description: 'Maps a string key to a path within a volume.',
                                          required: ['key', 'path'],
                                          properties: {
                                            key: {
                                              description: 'The key to project.',
                                              type: 'string',
                                            },
                                            mode: {
                                              description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                              type: 'integer',
                                              format: 'int32',
                                            },
                                            path: {
                                              description: "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                                              type: 'string',
                                            },
                                          },
                                          additionalProperties: false,
                                        },
                                      },
                                      name: {
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                        type: ['string', 'null'],
                                      },
                                      optional: {
                                        description: 'Specify whether the Secret or its key must be defined',
                                        type: 'boolean',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  serviceAccountToken: {
                                    description: 'ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).',
                                    required: ['path'],
                                    properties: {
                                      audience: {
                                        description: 'Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.',
                                        type: ['string', 'null'],
                                      },
                                      expirationSeconds: {
                                        description: 'ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.',
                                        type: 'integer',
                                        format: 'int64',
                                      },
                                      path: {
                                        description: 'Path is the path relative to the mount point of the file to project the token into.',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                additionalProperties: false,
                              },
                            },
                          },
                          additionalProperties: false,
                        },
                        quobyte: {
                          description: 'Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.',
                          required: ['registry', 'volume'],
                          properties: {
                            group: {
                              description: 'Group to map volume access to Default is no group',
                              type: ['string', 'null'],
                            },
                            readOnly: {
                              description: 'ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.',
                              type: 'boolean',
                            },
                            registry: {
                              description: 'Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes',
                              type: 'string',
                            },
                            user: {
                              description: 'User to map volume access to Defaults to serivceaccount user',
                              type: ['string', 'null'],
                            },
                            volume: {
                              description: 'Volume is a string that references an already created Quobyte volume by name.',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        rbd: {
                          description: 'Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.',
                          required: ['monitors', 'image'],
                          properties: {
                            fsType: {
                              description: 'Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd',
                              type: ['string', 'null'],
                            },
                            image: {
                              description: 'The rados image name. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                              type: 'string',
                            },
                            keyring: {
                              description: 'Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                              type: ['string', 'null'],
                            },
                            monitors: {
                              description: 'A collection of Ceph monitors. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                              type: 'array',
                              items: {
                                type: ['string', 'null'],
                              },
                            },
                            pool: {
                              description: 'The rados pool name. Default is rbd. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                              type: ['string', 'null'],
                            },
                            readOnly: {
                              description: 'ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                              type: 'boolean',
                            },
                            secretRef: {
                              description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                              properties: {
                                name: {
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            user: {
                              description: 'The rados user name. Default is admin. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                        scaleIO: {
                          description: 'ScaleIOVolumeSource represents a persistent ScaleIO volume',
                          required: ['gateway', 'system', 'secretRef'],
                          properties: {
                            fsType: {
                              description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                              type: ['string', 'null'],
                            },
                            gateway: {
                              description: 'The host address of the ScaleIO API Gateway.',
                              type: 'string',
                            },
                            protectionDomain: {
                              description: 'The name of the ScaleIO Protection Domain for the configured storage.',
                              type: ['string', 'null'],
                            },
                            readOnly: {
                              description: 'Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                              type: 'boolean',
                            },
                            secretRef: {
                              description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                              properties: {
                                name: {
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            sslEnabled: {
                              description: 'Flag to enable/disable SSL communication with Gateway, default false',
                              type: 'boolean',
                            },
                            storageMode: {
                              description: 'Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.',
                              type: ['string', 'null'],
                            },
                            storagePool: {
                              description: 'The ScaleIO Storage Pool associated with the protection domain.',
                              type: ['string', 'null'],
                            },
                            system: {
                              description: 'The name of the storage system as configured in ScaleIO.',
                              type: 'string',
                            },
                            volumeName: {
                              description: 'The name of a volume already created in the ScaleIO system that is associated with this volume source.',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                        secret: {
                          description: "Adapts a Secret into a volume.\n\nThe contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.",
                          properties: {
                            defaultMode: {
                              description: 'Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                              type: 'integer',
                              format: 'int32',
                            },
                            items: {
                              description:
                                "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                              type: ['array', 'null'],
                              items: {
                                description: 'Maps a string key to a path within a volume.',
                                required: ['key', 'path'],
                                properties: {
                                  key: {
                                    description: 'The key to project.',
                                    type: 'string',
                                  },
                                  mode: {
                                    description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                    type: 'integer',
                                    format: 'int32',
                                  },
                                  path: {
                                    description: "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                                    type: 'string',
                                  },
                                },
                                additionalProperties: false,
                              },
                            },
                            optional: {
                              description: "Specify whether the Secret or it's keys must be defined",
                              type: 'boolean',
                            },
                            secretName: {
                              description: "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                        storageos: {
                          description: 'Represents a StorageOS persistent volume resource.',
                          properties: {
                            fsType: {
                              description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                              type: ['string', 'null'],
                            },
                            readOnly: {
                              description: 'Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                              type: 'boolean',
                            },
                            secretRef: {
                              description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                              properties: {
                                name: {
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            volumeName: {
                              description: 'VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.',
                              type: ['string', 'null'],
                            },
                            volumeNamespace: {
                              description: 'VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod\'s namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                        vsphereVolume: {
                          description: 'Represents a vSphere volume resource.',
                          required: ['volumePath'],
                          properties: {
                            fsType: {
                              description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                              type: ['string', 'null'],
                            },
                            storagePolicyID: {
                              description: 'Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.',
                              type: ['string', 'null'],
                            },
                            storagePolicyName: {
                              description: 'Storage Policy Based Management (SPBM) profile name.',
                              type: ['string', 'null'],
                            },
                            volumePath: {
                              description: 'Path that identifies vSphere volume vmdk',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                      },
                      additionalProperties: false,
                    },
                    'x-kubernetes-patch-merge-key': 'name',
                    'x-kubernetes-patch-strategy': 'merge,retainKeys',
                  },
                },
                additionalProperties: false,
              },
            },
            additionalProperties: false,
          },
        },
        additionalProperties: false,
      },
      status: {
        description: 'ReplicaSetStatus represents the current status of a ReplicaSet.',
        required: ['replicas'],
        properties: {
          availableReplicas: {
            description: 'The number of available replicas (ready for at least minReadySeconds) for this replica set.',
            type: 'integer',
            format: 'int32',
          },
          conditions: {
            description: "Represents the latest available observations of a replica set's current state.",
            type: ['array', 'null'],
            items: {
              description: 'ReplicaSetCondition describes the state of a replica set at a certain point.',
              required: ['type', 'status'],
              properties: {
                lastTransitionTime: {
                  description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                  type: ['string', 'null'],
                  format: 'date-time',
                },
                message: {
                  description: 'A human readable message indicating details about the transition.',
                  type: ['string', 'null'],
                },
                reason: {
                  description: "The reason for the condition's last transition.",
                  type: ['string', 'null'],
                },
                status: {
                  description: 'Status of the condition, one of True, False, Unknown.',
                  type: 'string',
                },
                type: {
                  description: 'Type of replica set condition.',
                  type: 'string',
                },
              },
              additionalProperties: false,
            },
            'x-kubernetes-patch-merge-key': 'type',
            'x-kubernetes-patch-strategy': 'merge',
          },
          fullyLabeledReplicas: {
            description: 'The number of pods that have labels matching the labels of the pod template of the replicaset.',
            type: 'integer',
            format: 'int32',
          },
          observedGeneration: {
            description: 'ObservedGeneration reflects the generation of the most recently observed ReplicaSet.',
            type: 'integer',
            format: 'int64',
          },
          readyReplicas: {
            description: 'The number of ready replicas for this replica set.',
            type: 'integer',
            format: 'int32',
          },
          replicas: {
            description: 'Replicas is the most recently oberved number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller',
            type: 'integer',
            format: 'int32',
          },
        },
        additionalProperties: false,
      },
    },
    'x-kubernetes-group-version-kind': [
      {
        group: 'apps',
        kind: 'ReplicaSet',
        version: 'v1',
      },
    ],
    additionalProperties: false,
    $schema: 'http://json-schema.org/schema#',
    type: 'object',
  })
  .setIn([referenceForModel(k8sModels.HorizontalPodAutoscalerModel), 'default'], {
    description: 'HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified.',
    properties: {
      apiVersion: {
        description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
        type: ['string', 'null'],
        enum: ['autoscaling/v2beta1'],
      },
      kind: {
        description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
        type: ['string', 'null'],
        enum: ['HorizontalPodAutoscaler'],
      },
      metadata: {
        description: 'ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.',
        properties: {
          annotations: {
            description: 'Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations',
            type: 'object',
            additionalProperties: {
              type: ['string', 'null'],
            },
          },
          clusterName: {
            description: 'The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.',
            type: ['string', 'null'],
          },
          creationTimestamp: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            type: ['string', 'null'],
            format: 'date-time',
          },
          deletionGracePeriodSeconds: {
            description: 'Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.',
            type: 'integer',
            format: 'int64',
          },
          deletionTimestamp: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            type: ['string', 'null'],
            format: 'date-time',
          },
          finalizers: {
            description: 'Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.',
            type: ['array', 'null'],
            items: {
              type: ['string', 'null'],
            },
            'x-kubernetes-patch-strategy': 'merge',
          },
          generateName: {
            description:
              'GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency',
            type: ['string', 'null'],
          },
          generation: {
            description: 'A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.',
            type: 'integer',
            format: 'int64',
          },
          initializers: {
            description: 'Initializers tracks the progress of initialization.',
            required: ['pending'],
            properties: {
              pending: {
                description: 'Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.',
                type: 'array',
                items: {
                  description: 'Initializer is information about an initializer that has not yet completed.',
                  required: ['name'],
                  properties: {
                    name: {
                      description: 'name of the process that is responsible for initializing this object.',
                      type: 'string',
                    },
                  },
                  additionalProperties: false,
                },
                'x-kubernetes-patch-merge-key': 'name',
                'x-kubernetes-patch-strategy': 'merge',
              },
              result: {
                description: "Status is a return value for calls that don't return other objects.",
                properties: {
                  apiVersion: {
                    description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
                    type: ['string', 'null'],
                    enum: ['v1'],
                  },
                  code: {
                    description: 'Suggested HTTP return code for this status, 0 if not set.',
                    type: 'integer',
                    format: 'int32',
                  },
                  details: {
                    description: 'StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.',
                    properties: {
                      causes: {
                        description: 'The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.',
                        type: ['array', 'null'],
                        items: {
                          description: 'StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.',
                          properties: {
                            field: {
                              description: 'The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  "name" - the field "name" on the current resource\n  "items[0].name" - the field "name" on the first array entry in "items"',
                              type: ['string', 'null'],
                            },
                            message: {
                              description: 'A human-readable description of the cause of the error.  This field may be presented as-is to a reader.',
                              type: ['string', 'null'],
                            },
                            reason: {
                              description: 'A machine-readable description of the cause of the error. If this value is empty there is no information available.',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                      },
                      group: {
                        description: 'The group attribute of the resource associated with the status StatusReason.',
                        type: ['string', 'null'],
                      },
                      kind: {
                        description: 'The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                        type: ['string', 'null'],
                      },
                      name: {
                        description: 'The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).',
                        type: ['string', 'null'],
                      },
                      retryAfterSeconds: {
                        description: 'If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.',
                        type: 'integer',
                        format: 'int32',
                      },
                      uid: {
                        description: 'UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                        type: ['string', 'null'],
                      },
                    },
                    additionalProperties: false,
                  },
                  kind: {
                    description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                    type: ['string', 'null'],
                    enum: ['Status'],
                  },
                  message: {
                    description: 'A human-readable description of the status of this operation.',
                    type: ['string', 'null'],
                  },
                  metadata: {
                    description: 'ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.',
                    properties: {
                      continue: {
                        description:
                          'continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response.',
                        type: ['string', 'null'],
                      },
                      resourceVersion: {
                        description: "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
                        type: ['string', 'null'],
                      },
                      selfLink: {
                        description: 'selfLink is a URL representing this object. Populated by the system. Read-only.',
                        type: ['string', 'null'],
                      },
                    },
                    additionalProperties: false,
                  },
                  reason: {
                    description: 'A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.',
                    type: ['string', 'null'],
                  },
                  status: {
                    description: 'Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status',
                    type: ['string', 'null'],
                  },
                },
                'x-kubernetes-group-version-kind': [
                  {
                    group: '',
                    kind: 'Status',
                    version: 'v1',
                  },
                ],
                additionalProperties: false,
              },
            },
            additionalProperties: false,
          },
          labels: {
            description: 'Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels',
            type: 'object',
            additionalProperties: {
              type: ['string', 'null'],
            },
          },
          name: {
            description: 'Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
            type: ['string', 'null'],
          },
          namespace: {
            description: 'Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces',
            type: ['string', 'null'],
          },
          ownerReferences: {
            description: 'List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.',
            type: ['array', 'null'],
            items: {
              description: 'OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.',
              required: ['apiVersion', 'kind', 'name', 'uid'],
              properties: {
                apiVersion: {
                  description: 'API version of the referent.',
                  type: 'string',
                },
                blockOwnerDeletion: {
                  description: 'If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.',
                  type: 'boolean',
                },
                controller: {
                  description: 'If true, this reference points to the managing controller.',
                  type: 'boolean',
                },
                kind: {
                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                  type: 'string',
                },
                name: {
                  description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
                  type: 'string',
                },
                uid: {
                  description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                  type: 'string',
                },
              },
              additionalProperties: false,
            },
            'x-kubernetes-patch-merge-key': 'uid',
            'x-kubernetes-patch-strategy': 'merge',
          },
          resourceVersion: {
            description:
              'An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency',
            type: ['string', 'null'],
          },
          selfLink: {
            description: 'SelfLink is a URL representing this object. Populated by the system. Read-only.',
            type: ['string', 'null'],
          },
          uid: {
            description: 'UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
            type: ['string', 'null'],
          },
        },
        additionalProperties: false,
      },
      spec: {
        description: 'HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler.',
        required: ['scaleTargetRef', 'maxReplicas'],
        properties: {
          maxReplicas: {
            description: 'maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.',
            type: 'integer',
            format: 'int32',
          },
          metrics: {
            description:
              'metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used).  The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods.  Ergo, metrics used must decrease as the pod count is increased, and vice-versa.  See the individual metric source types for more information about how each type of metric must respond.',
            type: ['array', 'null'],
            items: {
              description: 'MetricSpec specifies how to scale based on a single metric (only `type` and one other matching field should be set at once).',
              required: ['type'],
              properties: {
                external: {
                  description: 'ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster). Exactly one "target" type should be set.',
                  required: ['metricName'],
                  properties: {
                    metricName: {
                      description: 'metricName is the name of the metric in question.',
                      type: 'string',
                    },
                    metricSelector: {
                      description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
                      properties: {
                        matchExpressions: {
                          description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                          type: ['array', 'null'],
                          items: {
                            description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                            required: ['key', 'operator'],
                            properties: {
                              key: {
                                description: 'key is the label key that the selector applies to.',
                                type: 'string',
                                'x-kubernetes-patch-merge-key': 'key',
                                'x-kubernetes-patch-strategy': 'merge',
                              },
                              operator: {
                                description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                type: 'string',
                              },
                              values: {
                                description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                                type: ['array', 'null'],
                                items: {
                                  type: ['string', 'null'],
                                },
                              },
                            },
                            additionalProperties: false,
                          },
                        },
                        matchLabels: {
                          description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                          type: 'object',
                          additionalProperties: {
                            type: ['string', 'null'],
                          },
                        },
                      },
                      additionalProperties: false,
                    },
                    targetAverageValue: {
                      oneOf: [
                        {
                          type: ['string', 'null'],
                        },
                        {
                          type: 'integer',
                        },
                      ],
                    },
                    targetValue: {
                      oneOf: [
                        {
                          type: ['string', 'null'],
                        },
                        {
                          type: 'integer',
                        },
                      ],
                    },
                  },
                  additionalProperties: false,
                },
                object: {
                  description: 'ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).',
                  required: ['target', 'metricName', 'targetValue'],
                  properties: {
                    metricName: {
                      description: 'metricName is the name of the metric in question.',
                      type: 'string',
                    },
                    target: {
                      description: 'CrossVersionObjectReference contains enough information to let you identify the referred resource.',
                      required: ['kind', 'name'],
                      properties: {
                        apiVersion: {
                          description: 'API version of the referent',
                          type: ['string', 'null'],
                        },
                        kind: {
                          description: 'Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"',
                          type: 'string',
                        },
                        name: {
                          description: 'Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names',
                          type: 'string',
                        },
                      },
                      additionalProperties: false,
                    },
                    targetValue: {
                      oneOf: [
                        {
                          type: ['string', 'null'],
                        },
                        {
                          type: 'integer',
                        },
                      ],
                    },
                  },
                  additionalProperties: false,
                },
                pods: {
                  description: 'PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.',
                  required: ['metricName', 'targetAverageValue'],
                  properties: {
                    metricName: {
                      description: 'metricName is the name of the metric in question',
                      type: 'string',
                    },
                    targetAverageValue: {
                      oneOf: [
                        {
                          type: ['string', 'null'],
                        },
                        {
                          type: 'integer',
                        },
                      ],
                    },
                  },
                  additionalProperties: false,
                },
                resource: {
                  description: 'ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.  Only one "target" type should be set.',
                  required: ['name'],
                  properties: {
                    name: {
                      description: 'name is the name of the resource in question.',
                      type: 'string',
                    },
                    targetAverageUtilization: {
                      description: 'targetAverageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.',
                      type: 'integer',
                      format: 'int32',
                    },
                    targetAverageValue: {
                      oneOf: [
                        {
                          type: ['string', 'null'],
                        },
                        {
                          type: 'integer',
                        },
                      ],
                    },
                  },
                  additionalProperties: false,
                },
                type: {
                  description: 'type is the type of metric source.  It should be one of "Object", "Pods" or "Resource", each mapping to a matching field in the object.',
                  type: 'string',
                },
              },
              additionalProperties: false,
            },
          },
          minReplicas: {
            description: 'minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down. It defaults to 1 pod.',
            type: 'integer',
            format: 'int32',
          },
          scaleTargetRef: {
            description: 'CrossVersionObjectReference contains enough information to let you identify the referred resource.',
            required: ['kind', 'name'],
            properties: {
              apiVersion: {
                description: 'API version of the referent',
                type: ['string', 'null'],
              },
              kind: {
                description: 'Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"',
                type: 'string',
              },
              name: {
                description: 'Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names',
                type: 'string',
              },
            },
            additionalProperties: false,
          },
        },
        additionalProperties: false,
      },
      status: {
        description: 'HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler.',
        required: ['currentReplicas', 'desiredReplicas', 'currentMetrics', 'conditions'],
        properties: {
          conditions: {
            description: 'conditions is the set of conditions required for this autoscaler to scale its target, and indicates whether or not those conditions are met.',
            type: 'array',
            items: {
              description: 'HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a certain point.',
              required: ['type', 'status'],
              properties: {
                lastTransitionTime: {
                  description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                  type: ['string', 'null'],
                  format: 'date-time',
                },
                message: {
                  description: 'message is a human-readable explanation containing details about the transition',
                  type: ['string', 'null'],
                },
                reason: {
                  description: "reason is the reason for the condition's last transition.",
                  type: ['string', 'null'],
                },
                status: {
                  description: 'status is the status of the condition (True, False, Unknown)',
                  type: 'string',
                },
                type: {
                  description: 'type describes the current condition',
                  type: 'string',
                },
              },
              additionalProperties: false,
            },
          },
          currentMetrics: {
            description: 'currentMetrics is the last read state of the metrics used by this autoscaler.',
            type: 'array',
            items: {
              description: 'MetricStatus describes the last-read state of a single metric.',
              required: ['type'],
              properties: {
                external: {
                  description: 'ExternalMetricStatus indicates the current value of a global metric not associated with any Kubernetes object.',
                  required: ['metricName', 'currentValue'],
                  properties: {
                    currentAverageValue: {
                      oneOf: [
                        {
                          type: ['string', 'null'],
                        },
                        {
                          type: 'integer',
                        },
                      ],
                    },
                    currentValue: {
                      oneOf: [
                        {
                          type: ['string', 'null'],
                        },
                        {
                          type: 'integer',
                        },
                      ],
                    },
                    metricName: {
                      description: 'metricName is the name of a metric used for autoscaling in metric system.',
                      type: 'string',
                    },
                    metricSelector: {
                      description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
                      properties: {
                        matchExpressions: {
                          description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                          type: ['array', 'null'],
                          items: {
                            description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                            required: ['key', 'operator'],
                            properties: {
                              key: {
                                description: 'key is the label key that the selector applies to.',
                                type: 'string',
                                'x-kubernetes-patch-merge-key': 'key',
                                'x-kubernetes-patch-strategy': 'merge',
                              },
                              operator: {
                                description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                type: 'string',
                              },
                              values: {
                                description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                                type: ['array', 'null'],
                                items: {
                                  type: ['string', 'null'],
                                },
                              },
                            },
                            additionalProperties: false,
                          },
                        },
                        matchLabels: {
                          description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                          type: 'object',
                          additionalProperties: {
                            type: ['string', 'null'],
                          },
                        },
                      },
                      additionalProperties: false,
                    },
                  },
                  additionalProperties: false,
                },
                object: {
                  description: 'ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).',
                  required: ['target', 'metricName', 'currentValue'],
                  properties: {
                    currentValue: {
                      oneOf: [
                        {
                          type: ['string', 'null'],
                        },
                        {
                          type: 'integer',
                        },
                      ],
                    },
                    metricName: {
                      description: 'metricName is the name of the metric in question.',
                      type: 'string',
                    },
                    target: {
                      description: 'CrossVersionObjectReference contains enough information to let you identify the referred resource.',
                      required: ['kind', 'name'],
                      properties: {
                        apiVersion: {
                          description: 'API version of the referent',
                          type: ['string', 'null'],
                        },
                        kind: {
                          description: 'Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"',
                          type: 'string',
                        },
                        name: {
                          description: 'Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names',
                          type: 'string',
                        },
                      },
                      additionalProperties: false,
                    },
                  },
                  additionalProperties: false,
                },
                pods: {
                  description: 'PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second).',
                  required: ['metricName', 'currentAverageValue'],
                  properties: {
                    currentAverageValue: {
                      oneOf: [
                        {
                          type: ['string', 'null'],
                        },
                        {
                          type: 'integer',
                        },
                      ],
                    },
                    metricName: {
                      description: 'metricName is the name of the metric in question',
                      type: 'string',
                    },
                  },
                  additionalProperties: false,
                },
                resource: {
                  description: 'ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.',
                  required: ['name', 'currentAverageValue'],
                  properties: {
                    currentAverageUtilization: {
                      description: 'currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.  It will only be present if `targetAverageValue` was set in the corresponding metric specification.',
                      type: 'integer',
                      format: 'int32',
                    },
                    currentAverageValue: {
                      oneOf: [
                        {
                          type: ['string', 'null'],
                        },
                        {
                          type: 'integer',
                        },
                      ],
                    },
                    name: {
                      description: 'name is the name of the resource in question.',
                      type: 'string',
                    },
                  },
                  additionalProperties: false,
                },
                type: {
                  description: 'type is the type of metric source.  It will be one of "Object", "Pods" or "Resource", each corresponds to a matching field in the object.',
                  type: 'string',
                },
              },
              additionalProperties: false,
            },
          },
          currentReplicas: {
            description: 'currentReplicas is current number of replicas of pods managed by this autoscaler, as last seen by the autoscaler.',
            type: 'integer',
            format: 'int32',
          },
          desiredReplicas: {
            description: 'desiredReplicas is the desired number of replicas of pods managed by this autoscaler, as last calculated by the autoscaler.',
            type: 'integer',
            format: 'int32',
          },
          lastScaleTime: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            type: ['string', 'null'],
            format: 'date-time',
          },
          observedGeneration: {
            description: 'observedGeneration is the most recent generation observed by this autoscaler.',
            type: 'integer',
            format: 'int64',
          },
        },
        additionalProperties: false,
      },
    },
    'x-kubernetes-group-version-kind': [
      {
        group: 'autoscaling',
        kind: 'HorizontalPodAutoscaler',
        version: 'v2beta1',
      },
    ],
    additionalProperties: false,
    $schema: 'http://json-schema.org/schema#',
    type: 'object',
  })
  .setIn([referenceForModel(k8sModels.DaemonSetModel), 'default'], {
    description: 'DaemonSet represents the configuration of a daemon set.',
    properties: {
      apiVersion: {
        description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
        type: ['string', 'null'],
        enum: ['apps/v1'],
      },
      kind: {
        description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
        type: ['string', 'null'],
        enum: ['DaemonSet'],
      },
      metadata: {
        description: 'ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.',
        properties: {
          annotations: {
            description: 'Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations',
            type: 'object',
            additionalProperties: {
              type: ['string', 'null'],
            },
          },
          clusterName: {
            description: 'The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.',
            type: ['string', 'null'],
          },
          creationTimestamp: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            type: ['string', 'null'],
            format: 'date-time',
          },
          deletionGracePeriodSeconds: {
            description: 'Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.',
            type: 'integer',
            format: 'int64',
          },
          deletionTimestamp: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            type: ['string', 'null'],
            format: 'date-time',
          },
          finalizers: {
            description: 'Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.',
            type: ['array', 'null'],
            items: {
              type: ['string', 'null'],
            },
            'x-kubernetes-patch-strategy': 'merge',
          },
          generateName: {
            description:
              'GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency',
            type: ['string', 'null'],
          },
          generation: {
            description: 'A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.',
            type: 'integer',
            format: 'int64',
          },
          initializers: {
            description: 'Initializers tracks the progress of initialization.',
            required: ['pending'],
            properties: {
              pending: {
                description: 'Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.',
                type: 'array',
                items: {
                  description: 'Initializer is information about an initializer that has not yet completed.',
                  required: ['name'],
                  properties: {
                    name: {
                      description: 'name of the process that is responsible for initializing this object.',
                      type: 'string',
                    },
                  },
                  additionalProperties: false,
                },
                'x-kubernetes-patch-merge-key': 'name',
                'x-kubernetes-patch-strategy': 'merge',
              },
              result: {
                description: "Status is a return value for calls that don't return other objects.",
                properties: {
                  apiVersion: {
                    description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
                    type: ['string', 'null'],
                    enum: ['v1'],
                  },
                  code: {
                    description: 'Suggested HTTP return code for this status, 0 if not set.',
                    type: 'integer',
                    format: 'int32',
                  },
                  details: {
                    description: 'StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.',
                    properties: {
                      causes: {
                        description: 'The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.',
                        type: ['array', 'null'],
                        items: {
                          description: 'StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.',
                          properties: {
                            field: {
                              description: 'The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  "name" - the field "name" on the current resource\n  "items[0].name" - the field "name" on the first array entry in "items"',
                              type: ['string', 'null'],
                            },
                            message: {
                              description: 'A human-readable description of the cause of the error.  This field may be presented as-is to a reader.',
                              type: ['string', 'null'],
                            },
                            reason: {
                              description: 'A machine-readable description of the cause of the error. If this value is empty there is no information available.',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                      },
                      group: {
                        description: 'The group attribute of the resource associated with the status StatusReason.',
                        type: ['string', 'null'],
                      },
                      kind: {
                        description: 'The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                        type: ['string', 'null'],
                      },
                      name: {
                        description: 'The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).',
                        type: ['string', 'null'],
                      },
                      retryAfterSeconds: {
                        description: 'If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.',
                        type: 'integer',
                        format: 'int32',
                      },
                      uid: {
                        description: 'UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                        type: ['string', 'null'],
                      },
                    },
                    additionalProperties: false,
                  },
                  kind: {
                    description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                    type: ['string', 'null'],
                    enum: ['Status'],
                  },
                  message: {
                    description: 'A human-readable description of the status of this operation.',
                    type: ['string', 'null'],
                  },
                  metadata: {
                    description: 'ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.',
                    properties: {
                      continue: {
                        description:
                          'continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response.',
                        type: ['string', 'null'],
                      },
                      resourceVersion: {
                        description: "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
                        type: ['string', 'null'],
                      },
                      selfLink: {
                        description: 'selfLink is a URL representing this object. Populated by the system. Read-only.',
                        type: ['string', 'null'],
                      },
                    },
                    additionalProperties: false,
                  },
                  reason: {
                    description: 'A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.',
                    type: ['string', 'null'],
                  },
                  status: {
                    description: 'Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status',
                    type: ['string', 'null'],
                  },
                },
                'x-kubernetes-group-version-kind': [
                  {
                    group: '',
                    kind: 'Status',
                    version: 'v1',
                  },
                ],
                additionalProperties: false,
              },
            },
            additionalProperties: false,
          },
          labels: {
            description: 'Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels',
            type: 'object',
            additionalProperties: {
              type: ['string', 'null'],
            },
          },
          name: {
            description: 'Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
            type: ['string', 'null'],
          },
          namespace: {
            description: 'Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces',
            type: ['string', 'null'],
          },
          ownerReferences: {
            description: 'List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.',
            type: ['array', 'null'],
            items: {
              description: 'OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.',
              required: ['apiVersion', 'kind', 'name', 'uid'],
              properties: {
                apiVersion: {
                  description: 'API version of the referent.',
                  type: 'string',
                },
                blockOwnerDeletion: {
                  description: 'If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.',
                  type: 'boolean',
                },
                controller: {
                  description: 'If true, this reference points to the managing controller.',
                  type: 'boolean',
                },
                kind: {
                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                  type: 'string',
                },
                name: {
                  description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
                  type: 'string',
                },
                uid: {
                  description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                  type: 'string',
                },
              },
              additionalProperties: false,
            },
            'x-kubernetes-patch-merge-key': 'uid',
            'x-kubernetes-patch-strategy': 'merge',
          },
          resourceVersion: {
            description:
              'An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency',
            type: ['string', 'null'],
          },
          selfLink: {
            description: 'SelfLink is a URL representing this object. Populated by the system. Read-only.',
            type: ['string', 'null'],
          },
          uid: {
            description: 'UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
            type: ['string', 'null'],
          },
        },
        additionalProperties: false,
      },
      spec: {
        description: 'DaemonSetSpec is the specification of a daemon set.',
        required: ['selector', 'template'],
        properties: {
          minReadySeconds: {
            description: 'The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).',
            type: 'integer',
            format: 'int32',
          },
          revisionHistoryLimit: {
            description: 'The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.',
            type: 'integer',
            format: 'int32',
          },
          selector: {
            description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
            properties: {
              matchExpressions: {
                description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                type: ['array', 'null'],
                items: {
                  description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                  required: ['key', 'operator'],
                  properties: {
                    key: {
                      description: 'key is the label key that the selector applies to.',
                      type: 'string',
                      'x-kubernetes-patch-merge-key': 'key',
                      'x-kubernetes-patch-strategy': 'merge',
                    },
                    operator: {
                      description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                      type: 'string',
                    },
                    values: {
                      description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                      type: ['array', 'null'],
                      items: {
                        type: ['string', 'null'],
                      },
                    },
                  },
                  additionalProperties: false,
                },
              },
              matchLabels: {
                description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                type: 'object',
                additionalProperties: {
                  type: ['string', 'null'],
                },
              },
            },
            additionalProperties: false,
          },
          template: {
            description: 'PodTemplateSpec describes the data a pod should have when created from a template',
            properties: {
              metadata: {
                description: 'ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.',
                properties: {
                  annotations: {
                    description: 'Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations',
                    type: 'object',
                    additionalProperties: {
                      type: ['string', 'null'],
                    },
                  },
                  clusterName: {
                    description: 'The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.',
                    type: ['string', 'null'],
                  },
                  creationTimestamp: {
                    description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                    type: ['string', 'null'],
                    format: 'date-time',
                  },
                  deletionGracePeriodSeconds: {
                    description: 'Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.',
                    type: 'integer',
                    format: 'int64',
                  },
                  deletionTimestamp: {
                    description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                    type: ['string', 'null'],
                    format: 'date-time',
                  },
                  finalizers: {
                    description: 'Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.',
                    type: ['array', 'null'],
                    items: {
                      type: ['string', 'null'],
                    },
                    'x-kubernetes-patch-strategy': 'merge',
                  },
                  generateName: {
                    description:
                      'GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency',
                    type: ['string', 'null'],
                  },
                  generation: {
                    description: 'A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.',
                    type: 'integer',
                    format: 'int64',
                  },
                  initializers: {
                    description: 'Initializers tracks the progress of initialization.',
                    required: ['pending'],
                    properties: {
                      pending: {
                        description: 'Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.',
                        type: 'array',
                        items: {
                          description: 'Initializer is information about an initializer that has not yet completed.',
                          required: ['name'],
                          properties: {
                            name: {
                              description: 'name of the process that is responsible for initializing this object.',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        'x-kubernetes-patch-merge-key': 'name',
                        'x-kubernetes-patch-strategy': 'merge',
                      },
                      result: {
                        description: "Status is a return value for calls that don't return other objects.",
                        properties: {
                          apiVersion: {
                            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
                            type: ['string', 'null'],
                            enum: ['v1'],
                          },
                          code: {
                            description: 'Suggested HTTP return code for this status, 0 if not set.',
                            type: 'integer',
                            format: 'int32',
                          },
                          details: {
                            description: 'StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.',
                            properties: {
                              causes: {
                                description: 'The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.',
                                type: ['array', 'null'],
                                items: {
                                  description: 'StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.',
                                  properties: {
                                    field: {
                                      description: 'The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  "name" - the field "name" on the current resource\n  "items[0].name" - the field "name" on the first array entry in "items"',
                                      type: ['string', 'null'],
                                    },
                                    message: {
                                      description: 'A human-readable description of the cause of the error.  This field may be presented as-is to a reader.',
                                      type: ['string', 'null'],
                                    },
                                    reason: {
                                      description: 'A machine-readable description of the cause of the error. If this value is empty there is no information available.',
                                      type: ['string', 'null'],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                              },
                              group: {
                                description: 'The group attribute of the resource associated with the status StatusReason.',
                                type: ['string', 'null'],
                              },
                              kind: {
                                description: 'The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                                type: ['string', 'null'],
                              },
                              name: {
                                description: 'The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).',
                                type: ['string', 'null'],
                              },
                              retryAfterSeconds: {
                                description: 'If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.',
                                type: 'integer',
                                format: 'int32',
                              },
                              uid: {
                                description: 'UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                                type: ['string', 'null'],
                              },
                            },
                            additionalProperties: false,
                          },
                          kind: {
                            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                            type: ['string', 'null'],
                            enum: ['Status'],
                          },
                          message: {
                            description: 'A human-readable description of the status of this operation.',
                            type: ['string', 'null'],
                          },
                          metadata: {
                            description: 'ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.',
                            properties: {
                              continue: {
                                description:
                                  'continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response.',
                                type: ['string', 'null'],
                              },
                              resourceVersion: {
                                description: "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
                                type: ['string', 'null'],
                              },
                              selfLink: {
                                description: 'selfLink is a URL representing this object. Populated by the system. Read-only.',
                                type: ['string', 'null'],
                              },
                            },
                            additionalProperties: false,
                          },
                          reason: {
                            description: 'A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.',
                            type: ['string', 'null'],
                          },
                          status: {
                            description: 'Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status',
                            type: ['string', 'null'],
                          },
                        },
                        'x-kubernetes-group-version-kind': [
                          {
                            group: '',
                            kind: 'Status',
                            version: 'v1',
                          },
                        ],
                        additionalProperties: false,
                      },
                    },
                    additionalProperties: false,
                  },
                  labels: {
                    description: 'Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels',
                    type: 'object',
                    additionalProperties: {
                      type: ['string', 'null'],
                    },
                  },
                  name: {
                    description: 'Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
                    type: ['string', 'null'],
                  },
                  namespace: {
                    description: 'Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces',
                    type: ['string', 'null'],
                  },
                  ownerReferences: {
                    description: 'List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.',
                    type: ['array', 'null'],
                    items: {
                      description: 'OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.',
                      required: ['apiVersion', 'kind', 'name', 'uid'],
                      properties: {
                        apiVersion: {
                          description: 'API version of the referent.',
                          type: 'string',
                        },
                        blockOwnerDeletion: {
                          description: 'If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.',
                          type: 'boolean',
                        },
                        controller: {
                          description: 'If true, this reference points to the managing controller.',
                          type: 'boolean',
                        },
                        kind: {
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                          type: 'string',
                        },
                        name: {
                          description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
                          type: 'string',
                        },
                        uid: {
                          description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                          type: 'string',
                        },
                      },
                      additionalProperties: false,
                    },
                    'x-kubernetes-patch-merge-key': 'uid',
                    'x-kubernetes-patch-strategy': 'merge',
                  },
                  resourceVersion: {
                    description:
                      'An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency',
                    type: ['string', 'null'],
                  },
                  selfLink: {
                    description: 'SelfLink is a URL representing this object. Populated by the system. Read-only.',
                    type: ['string', 'null'],
                  },
                  uid: {
                    description: 'UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                    type: ['string', 'null'],
                  },
                },
                additionalProperties: false,
              },
              spec: {
                description: 'PodSpec is a description of a pod.',
                required: ['containers'],
                properties: {
                  activeDeadlineSeconds: {
                    description: 'Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.',
                    type: 'integer',
                    format: 'int64',
                  },
                  affinity: {
                    description: 'Affinity is a group of affinity scheduling rules.',
                    properties: {
                      nodeAffinity: {
                        description: 'Node affinity is a group of node affinity scheduling rules.',
                        properties: {
                          preferredDuringSchedulingIgnoredDuringExecution: {
                            description:
                              'The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.',
                            type: ['array', 'null'],
                            items: {
                              description: "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
                              required: ['weight', 'preference'],
                              properties: {
                                preference: {
                                  description: 'A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.',
                                  properties: {
                                    matchExpressions: {
                                      description: "A list of node selector requirements by node's labels.",
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                        required: ['key', 'operator'],
                                        properties: {
                                          key: {
                                            description: 'The label key that the selector applies to.',
                                            type: 'string',
                                          },
                                          operator: {
                                            description: "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                            type: 'string',
                                          },
                                          values: {
                                            description: 'An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
                                            type: ['array', 'null'],
                                            items: {
                                              type: ['string', 'null'],
                                            },
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    matchFields: {
                                      description: "A list of node selector requirements by node's fields.",
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                        required: ['key', 'operator'],
                                        properties: {
                                          key: {
                                            description: 'The label key that the selector applies to.',
                                            type: 'string',
                                          },
                                          operator: {
                                            description: "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                            type: 'string',
                                          },
                                          values: {
                                            description: 'An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
                                            type: ['array', 'null'],
                                            items: {
                                              type: ['string', 'null'],
                                            },
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                weight: {
                                  description: 'Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.',
                                  type: 'integer',
                                  format: 'int32',
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          requiredDuringSchedulingIgnoredDuringExecution: {
                            description: 'A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.',
                            required: ['nodeSelectorTerms'],
                            properties: {
                              nodeSelectorTerms: {
                                description: 'Required. A list of node selector terms. The terms are ORed.',
                                type: 'array',
                                items: {
                                  description: 'A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.',
                                  properties: {
                                    matchExpressions: {
                                      description: "A list of node selector requirements by node's labels.",
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                        required: ['key', 'operator'],
                                        properties: {
                                          key: {
                                            description: 'The label key that the selector applies to.',
                                            type: 'string',
                                          },
                                          operator: {
                                            description: "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                            type: 'string',
                                          },
                                          values: {
                                            description: 'An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
                                            type: ['array', 'null'],
                                            items: {
                                              type: ['string', 'null'],
                                            },
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    matchFields: {
                                      description: "A list of node selector requirements by node's fields.",
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                        required: ['key', 'operator'],
                                        properties: {
                                          key: {
                                            description: 'The label key that the selector applies to.',
                                            type: 'string',
                                          },
                                          operator: {
                                            description: "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                            type: 'string',
                                          },
                                          values: {
                                            description: 'An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
                                            type: ['array', 'null'],
                                            items: {
                                              type: ['string', 'null'],
                                            },
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                              },
                            },
                            additionalProperties: false,
                          },
                        },
                        additionalProperties: false,
                      },
                      podAffinity: {
                        description: 'Pod affinity is a group of inter pod affinity scheduling rules.',
                        properties: {
                          preferredDuringSchedulingIgnoredDuringExecution: {
                            description:
                              'The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.',
                            type: ['array', 'null'],
                            items: {
                              description: 'The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)',
                              required: ['weight', 'podAffinityTerm'],
                              properties: {
                                podAffinityTerm: {
                                  description: 'Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running',
                                  required: ['topologyKey'],
                                  properties: {
                                    labelSelector: {
                                      description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
                                      properties: {
                                        matchExpressions: {
                                          description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                                          type: ['array', 'null'],
                                          items: {
                                            description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                            required: ['key', 'operator'],
                                            properties: {
                                              key: {
                                                description: 'key is the label key that the selector applies to.',
                                                type: 'string',
                                                'x-kubernetes-patch-merge-key': 'key',
                                                'x-kubernetes-patch-strategy': 'merge',
                                              },
                                              operator: {
                                                description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                type: 'string',
                                              },
                                              values: {
                                                description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                                                type: ['array', 'null'],
                                                items: {
                                                  type: ['string', 'null'],
                                                },
                                              },
                                            },
                                            additionalProperties: false,
                                          },
                                        },
                                        matchLabels: {
                                          description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                                          type: 'object',
                                          additionalProperties: {
                                            type: ['string', 'null'],
                                          },
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                    namespaces: {
                                      description: 'namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod\'s namespace"',
                                      type: ['array', 'null'],
                                      items: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                    topologyKey: {
                                      description: 'This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
                                      type: 'string',
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                weight: {
                                  description: 'weight associated with matching the corresponding podAffinityTerm, in the range 1-100.',
                                  type: 'integer',
                                  format: 'int32',
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          requiredDuringSchedulingIgnoredDuringExecution: {
                            description:
                              'If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.',
                            type: ['array', 'null'],
                            items: {
                              description: 'Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running',
                              required: ['topologyKey'],
                              properties: {
                                labelSelector: {
                                  description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
                                  properties: {
                                    matchExpressions: {
                                      description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                        required: ['key', 'operator'],
                                        properties: {
                                          key: {
                                            description: 'key is the label key that the selector applies to.',
                                            type: 'string',
                                            'x-kubernetes-patch-merge-key': 'key',
                                            'x-kubernetes-patch-strategy': 'merge',
                                          },
                                          operator: {
                                            description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                            type: 'string',
                                          },
                                          values: {
                                            description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                                            type: ['array', 'null'],
                                            items: {
                                              type: ['string', 'null'],
                                            },
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    matchLabels: {
                                      description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                                      type: 'object',
                                      additionalProperties: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                namespaces: {
                                  description: 'namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod\'s namespace"',
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                                topologyKey: {
                                  description: 'This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
                                  type: 'string',
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                        },
                        additionalProperties: false,
                      },
                      podAntiAffinity: {
                        description: 'Pod anti affinity is a group of inter pod anti affinity scheduling rules.',
                        properties: {
                          preferredDuringSchedulingIgnoredDuringExecution: {
                            description:
                              'The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.',
                            type: ['array', 'null'],
                            items: {
                              description: 'The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)',
                              required: ['weight', 'podAffinityTerm'],
                              properties: {
                                podAffinityTerm: {
                                  description: 'Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running',
                                  required: ['topologyKey'],
                                  properties: {
                                    labelSelector: {
                                      description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
                                      properties: {
                                        matchExpressions: {
                                          description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                                          type: ['array', 'null'],
                                          items: {
                                            description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                            required: ['key', 'operator'],
                                            properties: {
                                              key: {
                                                description: 'key is the label key that the selector applies to.',
                                                type: 'string',
                                                'x-kubernetes-patch-merge-key': 'key',
                                                'x-kubernetes-patch-strategy': 'merge',
                                              },
                                              operator: {
                                                description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                type: 'string',
                                              },
                                              values: {
                                                description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                                                type: ['array', 'null'],
                                                items: {
                                                  type: ['string', 'null'],
                                                },
                                              },
                                            },
                                            additionalProperties: false,
                                          },
                                        },
                                        matchLabels: {
                                          description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                                          type: 'object',
                                          additionalProperties: {
                                            type: ['string', 'null'],
                                          },
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                    namespaces: {
                                      description: 'namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod\'s namespace"',
                                      type: ['array', 'null'],
                                      items: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                    topologyKey: {
                                      description: 'This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
                                      type: 'string',
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                weight: {
                                  description: 'weight associated with matching the corresponding podAffinityTerm, in the range 1-100.',
                                  type: 'integer',
                                  format: 'int32',
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          requiredDuringSchedulingIgnoredDuringExecution: {
                            description:
                              'If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.',
                            type: ['array', 'null'],
                            items: {
                              description: 'Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running',
                              required: ['topologyKey'],
                              properties: {
                                labelSelector: {
                                  description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
                                  properties: {
                                    matchExpressions: {
                                      description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                        required: ['key', 'operator'],
                                        properties: {
                                          key: {
                                            description: 'key is the label key that the selector applies to.',
                                            type: 'string',
                                            'x-kubernetes-patch-merge-key': 'key',
                                            'x-kubernetes-patch-strategy': 'merge',
                                          },
                                          operator: {
                                            description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                            type: 'string',
                                          },
                                          values: {
                                            description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                                            type: ['array', 'null'],
                                            items: {
                                              type: ['string', 'null'],
                                            },
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    matchLabels: {
                                      description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                                      type: 'object',
                                      additionalProperties: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                namespaces: {
                                  description: 'namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod\'s namespace"',
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                                topologyKey: {
                                  description: 'This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
                                  type: 'string',
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                        },
                        additionalProperties: false,
                      },
                    },
                    additionalProperties: false,
                  },
                  automountServiceAccountToken: {
                    description: 'AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.',
                    type: 'boolean',
                  },
                  containers: {
                    description: 'List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.',
                    type: 'array',
                    items: {
                      description: 'A single application container that you want to run within a pod.',
                      required: ['name'],
                      properties: {
                        args: {
                          description:
                            "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                          type: ['array', 'null'],
                          items: {
                            type: ['string', 'null'],
                          },
                        },
                        command: {
                          description:
                            "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                          type: ['array', 'null'],
                          items: {
                            type: ['string', 'null'],
                          },
                        },
                        env: {
                          description: 'List of environment variables to set in the container. Cannot be updated.',
                          type: ['array', 'null'],
                          items: {
                            description: 'EnvVar represents an environment variable present in a Container.',
                            required: ['name'],
                            properties: {
                              name: {
                                description: 'Name of the environment variable. Must be a C_IDENTIFIER.',
                                type: 'string',
                              },
                              value: {
                                description: 'Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".',
                                type: ['string', 'null'],
                              },
                              valueFrom: {
                                description: 'EnvVarSource represents a source for the value of an EnvVar.',
                                properties: {
                                  configMapKeyRef: {
                                    description: 'Selects a key from a ConfigMap.',
                                    required: ['key'],
                                    properties: {
                                      key: {
                                        description: 'The key to select.',
                                        type: 'string',
                                      },
                                      name: {
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                        type: ['string', 'null'],
                                      },
                                      optional: {
                                        description: "Specify whether the ConfigMap or it's key must be defined",
                                        type: 'boolean',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  fieldRef: {
                                    description: 'ObjectFieldSelector selects an APIVersioned field of an object.',
                                    required: ['fieldPath'],
                                    properties: {
                                      apiVersion: {
                                        description: 'Version of the schema the FieldPath is written in terms of, defaults to "v1".',
                                        type: ['string', 'null'],
                                      },
                                      fieldPath: {
                                        description: 'Path of the field to select in the specified API version.',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  resourceFieldRef: {
                                    description: 'ResourceFieldSelector represents container resources (cpu, memory) and their output format',
                                    required: ['resource'],
                                    properties: {
                                      containerName: {
                                        description: 'Container name: required for volumes, optional for env vars',
                                        type: ['string', 'null'],
                                      },
                                      divisor: {
                                        oneOf: [
                                          {
                                            type: ['string', 'null'],
                                          },
                                          {
                                            type: 'integer',
                                          },
                                        ],
                                      },
                                      resource: {
                                        description: 'Required: resource to select',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  secretKeyRef: {
                                    description: 'SecretKeySelector selects a key of a Secret.',
                                    required: ['key'],
                                    properties: {
                                      key: {
                                        description: 'The key of the secret to select from.  Must be a valid secret key.',
                                        type: 'string',
                                      },
                                      name: {
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                        type: ['string', 'null'],
                                      },
                                      optional: {
                                        description: "Specify whether the Secret or it's key must be defined",
                                        type: 'boolean',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                additionalProperties: false,
                              },
                            },
                            additionalProperties: false,
                          },
                          'x-kubernetes-patch-merge-key': 'name',
                          'x-kubernetes-patch-strategy': 'merge',
                        },
                        envFrom: {
                          description: 'List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.',
                          type: ['array', 'null'],
                          items: {
                            description: 'EnvFromSource represents the source of a set of ConfigMaps',
                            properties: {
                              configMapRef: {
                                description: "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
                                properties: {
                                  name: {
                                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                    type: ['string', 'null'],
                                  },
                                  optional: {
                                    description: 'Specify whether the ConfigMap must be defined',
                                    type: 'boolean',
                                  },
                                },
                                additionalProperties: false,
                              },
                              prefix: {
                                description: 'An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.',
                                type: ['string', 'null'],
                              },
                              secretRef: {
                                description: "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
                                properties: {
                                  name: {
                                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                    type: ['string', 'null'],
                                  },
                                  optional: {
                                    description: 'Specify whether the Secret must be defined',
                                    type: 'boolean',
                                  },
                                },
                                additionalProperties: false,
                              },
                            },
                            additionalProperties: false,
                          },
                        },
                        image: {
                          description: 'Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.',
                          type: ['string', 'null'],
                        },
                        imagePullPolicy: {
                          description: 'Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images',
                          type: ['string', 'null'],
                        },
                        lifecycle: {
                          description: 'Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.',
                          properties: {
                            postStart: {
                              description: 'Handler defines a specific action that should be taken',
                              properties: {
                                exec: {
                                  description: 'ExecAction describes a "run in container" action.',
                                  properties: {
                                    command: {
                                      description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                      type: ['array', 'null'],
                                      items: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                httpGet: {
                                  description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                                  required: ['port'],
                                  properties: {
                                    host: {
                                      description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                      type: ['string', 'null'],
                                    },
                                    httpHeaders: {
                                      description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                        required: ['name', 'value'],
                                        properties: {
                                          name: {
                                            description: 'The header field name',
                                            type: 'string',
                                          },
                                          value: {
                                            description: 'The header field value',
                                            type: 'string',
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    path: {
                                      description: 'Path to access on the HTTP server.',
                                      type: ['string', 'null'],
                                    },
                                    port: {
                                      oneOf: [
                                        {
                                          type: ['string', 'null'],
                                        },
                                        {
                                          type: 'integer',
                                        },
                                      ],
                                    },
                                    scheme: {
                                      description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                      type: ['string', 'null'],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                tcpSocket: {
                                  description: 'TCPSocketAction describes an action based on opening a socket',
                                  required: ['port'],
                                  properties: {
                                    host: {
                                      description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                      type: ['string', 'null'],
                                    },
                                    port: {
                                      oneOf: [
                                        {
                                          type: ['string', 'null'],
                                        },
                                        {
                                          type: 'integer',
                                        },
                                      ],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                              },
                              additionalProperties: false,
                            },
                            preStop: {
                              description: 'Handler defines a specific action that should be taken',
                              properties: {
                                exec: {
                                  description: 'ExecAction describes a "run in container" action.',
                                  properties: {
                                    command: {
                                      description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                      type: ['array', 'null'],
                                      items: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                httpGet: {
                                  description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                                  required: ['port'],
                                  properties: {
                                    host: {
                                      description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                      type: ['string', 'null'],
                                    },
                                    httpHeaders: {
                                      description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                        required: ['name', 'value'],
                                        properties: {
                                          name: {
                                            description: 'The header field name',
                                            type: 'string',
                                          },
                                          value: {
                                            description: 'The header field value',
                                            type: 'string',
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    path: {
                                      description: 'Path to access on the HTTP server.',
                                      type: ['string', 'null'],
                                    },
                                    port: {
                                      oneOf: [
                                        {
                                          type: ['string', 'null'],
                                        },
                                        {
                                          type: 'integer',
                                        },
                                      ],
                                    },
                                    scheme: {
                                      description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                      type: ['string', 'null'],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                tcpSocket: {
                                  description: 'TCPSocketAction describes an action based on opening a socket',
                                  required: ['port'],
                                  properties: {
                                    host: {
                                      description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                      type: ['string', 'null'],
                                    },
                                    port: {
                                      oneOf: [
                                        {
                                          type: ['string', 'null'],
                                        },
                                        {
                                          type: 'integer',
                                        },
                                      ],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          additionalProperties: false,
                        },
                        livenessProbe: {
                          description: 'Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.',
                          properties: {
                            exec: {
                              description: 'ExecAction describes a "run in container" action.',
                              properties: {
                                command: {
                                  description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                              },
                              additionalProperties: false,
                            },
                            failureThreshold: {
                              description: 'Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            httpGet: {
                              description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                              required: ['port'],
                              properties: {
                                host: {
                                  description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                  type: ['string', 'null'],
                                },
                                httpHeaders: {
                                  description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                  type: ['array', 'null'],
                                  items: {
                                    description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                    required: ['name', 'value'],
                                    properties: {
                                      name: {
                                        description: 'The header field name',
                                        type: 'string',
                                      },
                                      value: {
                                        description: 'The header field value',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                path: {
                                  description: 'Path to access on the HTTP server.',
                                  type: ['string', 'null'],
                                },
                                port: {
                                  oneOf: [
                                    {
                                      type: ['string', 'null'],
                                    },
                                    {
                                      type: 'integer',
                                    },
                                  ],
                                },
                                scheme: {
                                  description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            initialDelaySeconds: {
                              description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                              type: 'integer',
                              format: 'int32',
                            },
                            periodSeconds: {
                              description: 'How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            successThreshold: {
                              description: 'Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            tcpSocket: {
                              description: 'TCPSocketAction describes an action based on opening a socket',
                              required: ['port'],
                              properties: {
                                host: {
                                  description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                  type: ['string', 'null'],
                                },
                                port: {
                                  oneOf: [
                                    {
                                      type: ['string', 'null'],
                                    },
                                    {
                                      type: 'integer',
                                    },
                                  ],
                                },
                              },
                              additionalProperties: false,
                            },
                            timeoutSeconds: {
                              description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                              type: 'integer',
                              format: 'int32',
                            },
                          },
                          additionalProperties: false,
                        },
                        name: {
                          description: 'Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.',
                          type: 'string',
                        },
                        ports: {
                          description: 'List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.',
                          type: ['array', 'null'],
                          items: {
                            description: 'ContainerPort represents a network port in a single container.',
                            required: ['containerPort'],
                            properties: {
                              containerPort: {
                                description: "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
                                type: 'integer',
                                format: 'int32',
                              },
                              hostIP: {
                                description: 'What host IP to bind the external port to.',
                                type: ['string', 'null'],
                              },
                              hostPort: {
                                description: 'Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.',
                                type: 'integer',
                                format: 'int32',
                              },
                              name: {
                                description: 'If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.',
                                type: ['string', 'null'],
                              },
                              protocol: {
                                description: 'Protocol for port. Must be UDP or TCP. Defaults to "TCP".',
                                type: ['string', 'null'],
                              },
                            },
                            additionalProperties: false,
                          },
                          'x-kubernetes-patch-merge-key': 'containerPort',
                          'x-kubernetes-patch-strategy': 'merge',
                        },
                        readinessProbe: {
                          description: 'Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.',
                          properties: {
                            exec: {
                              description: 'ExecAction describes a "run in container" action.',
                              properties: {
                                command: {
                                  description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                              },
                              additionalProperties: false,
                            },
                            failureThreshold: {
                              description: 'Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            httpGet: {
                              description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                              required: ['port'],
                              properties: {
                                host: {
                                  description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                  type: ['string', 'null'],
                                },
                                httpHeaders: {
                                  description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                  type: ['array', 'null'],
                                  items: {
                                    description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                    required: ['name', 'value'],
                                    properties: {
                                      name: {
                                        description: 'The header field name',
                                        type: 'string',
                                      },
                                      value: {
                                        description: 'The header field value',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                path: {
                                  description: 'Path to access on the HTTP server.',
                                  type: ['string', 'null'],
                                },
                                port: {
                                  oneOf: [
                                    {
                                      type: ['string', 'null'],
                                    },
                                    {
                                      type: 'integer',
                                    },
                                  ],
                                },
                                scheme: {
                                  description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            initialDelaySeconds: {
                              description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                              type: 'integer',
                              format: 'int32',
                            },
                            periodSeconds: {
                              description: 'How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            successThreshold: {
                              description: 'Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            tcpSocket: {
                              description: 'TCPSocketAction describes an action based on opening a socket',
                              required: ['port'],
                              properties: {
                                host: {
                                  description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                  type: ['string', 'null'],
                                },
                                port: {
                                  oneOf: [
                                    {
                                      type: ['string', 'null'],
                                    },
                                    {
                                      type: 'integer',
                                    },
                                  ],
                                },
                              },
                              additionalProperties: false,
                            },
                            timeoutSeconds: {
                              description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                              type: 'integer',
                              format: 'int32',
                            },
                          },
                          additionalProperties: false,
                        },
                        resources: {
                          description: 'ResourceRequirements describes the compute resource requirements.',
                          properties: {
                            limits: {
                              description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/',
                              type: 'object',
                              additionalProperties: {
                                oneOf: [
                                  {
                                    type: ['string', 'null'],
                                  },
                                  {
                                    type: 'integer',
                                  },
                                ],
                              },
                            },
                            requests: {
                              description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/',
                              type: 'object',
                              additionalProperties: {
                                oneOf: [
                                  {
                                    type: ['string', 'null'],
                                  },
                                  {
                                    type: 'integer',
                                  },
                                ],
                              },
                            },
                          },
                          additionalProperties: false,
                        },
                        securityContext: {
                          description: 'SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.',
                          properties: {
                            allowPrivilegeEscalation: {
                              description: 'AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN',
                              type: 'boolean',
                            },
                            capabilities: {
                              description: 'Adds and removes POSIX capabilities from running containers.',
                              properties: {
                                add: {
                                  description: 'Added capabilities',
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                                drop: {
                                  description: 'Removed capabilities',
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                              },
                              additionalProperties: false,
                            },
                            privileged: {
                              description: 'Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.',
                              type: 'boolean',
                            },
                            readOnlyRootFilesystem: {
                              description: 'Whether this container has a read-only root filesystem. Default is false.',
                              type: 'boolean',
                            },
                            runAsGroup: {
                              description: 'The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                              type: 'integer',
                              format: 'int64',
                            },
                            runAsNonRoot: {
                              description: 'Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                              type: 'boolean',
                            },
                            runAsUser: {
                              description: 'The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                              type: 'integer',
                              format: 'int64',
                            },
                            seLinuxOptions: {
                              description: 'SELinuxOptions are the labels to be applied to the container',
                              properties: {
                                level: {
                                  description: 'Level is SELinux level label that applies to the container.',
                                  type: ['string', 'null'],
                                },
                                role: {
                                  description: 'Role is a SELinux role label that applies to the container.',
                                  type: ['string', 'null'],
                                },
                                type: {
                                  description: 'Type is a SELinux type label that applies to the container.',
                                  type: ['string', 'null'],
                                },
                                user: {
                                  description: 'User is a SELinux user label that applies to the container.',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          additionalProperties: false,
                        },
                        stdin: {
                          description: 'Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.',
                          type: 'boolean',
                        },
                        stdinOnce: {
                          description:
                            'Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false',
                          type: 'boolean',
                        },
                        terminationMessagePath: {
                          description: "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                          type: ['string', 'null'],
                        },
                        terminationMessagePolicy: {
                          description: 'Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.',
                          type: ['string', 'null'],
                        },
                        tty: {
                          description: "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                          type: 'boolean',
                        },
                        volumeDevices: {
                          description: 'volumeDevices is the list of block devices to be used by the container. This is an alpha feature and may change in the future.',
                          type: ['array', 'null'],
                          items: {
                            description: 'volumeDevice describes a mapping of a raw block device within a container.',
                            required: ['name', 'devicePath'],
                            properties: {
                              devicePath: {
                                description: 'devicePath is the path inside of the container that the device will be mapped to.',
                                type: 'string',
                              },
                              name: {
                                description: 'name must match the name of a persistentVolumeClaim in the pod',
                                type: 'string',
                              },
                            },
                            additionalProperties: false,
                          },
                          'x-kubernetes-patch-merge-key': 'devicePath',
                          'x-kubernetes-patch-strategy': 'merge',
                        },
                        volumeMounts: {
                          description: "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                          type: ['array', 'null'],
                          items: {
                            description: 'VolumeMount describes a mounting of a Volume within a container.',
                            required: ['name', 'mountPath'],
                            properties: {
                              mountPath: {
                                description: "Path within the container at which the volume should be mounted.  Must not contain ':'.",
                                type: 'string',
                              },
                              mountPropagation: {
                                description: 'mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.',
                                type: ['string', 'null'],
                              },
                              name: {
                                description: 'This must match the Name of a Volume.',
                                type: 'string',
                              },
                              readOnly: {
                                description: 'Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.',
                                type: 'boolean',
                              },
                              subPath: {
                                description: 'Path within the volume from which the container\'s volume should be mounted. Defaults to "" (volume\'s root).',
                                type: ['string', 'null'],
                              },
                            },
                            additionalProperties: false,
                          },
                          'x-kubernetes-patch-merge-key': 'mountPath',
                          'x-kubernetes-patch-strategy': 'merge',
                        },
                        workingDir: {
                          description: "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                          type: ['string', 'null'],
                        },
                      },
                      additionalProperties: false,
                    },
                    'x-kubernetes-patch-merge-key': 'name',
                    'x-kubernetes-patch-strategy': 'merge',
                  },
                  dnsConfig: {
                    description: 'PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.',
                    properties: {
                      nameservers: {
                        description: 'A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.',
                        type: ['array', 'null'],
                        items: {
                          type: ['string', 'null'],
                        },
                      },
                      options: {
                        description: 'A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.',
                        type: ['array', 'null'],
                        items: {
                          description: 'PodDNSConfigOption defines DNS resolver options of a pod.',
                          properties: {
                            name: {
                              description: 'Required.',
                              type: ['string', 'null'],
                            },
                            value: {
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                      },
                      searches: {
                        description: 'A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.',
                        type: ['array', 'null'],
                        items: {
                          type: ['string', 'null'],
                        },
                      },
                    },
                    additionalProperties: false,
                  },
                  dnsPolicy: {
                    description: "Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.",
                    type: ['string', 'null'],
                  },
                  hostAliases: {
                    description: "HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.",
                    type: ['array', 'null'],
                    items: {
                      description: "HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.",
                      properties: {
                        hostnames: {
                          description: 'Hostnames for the above IP address.',
                          type: ['array', 'null'],
                          items: {
                            type: ['string', 'null'],
                          },
                        },
                        ip: {
                          description: 'IP address of the host file entry.',
                          type: ['string', 'null'],
                        },
                      },
                      additionalProperties: false,
                    },
                    'x-kubernetes-patch-merge-key': 'ip',
                    'x-kubernetes-patch-strategy': 'merge',
                  },
                  hostIPC: {
                    description: "Use the host's ipc namespace. Optional: Default to false.",
                    type: 'boolean',
                  },
                  hostNetwork: {
                    description: "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.",
                    type: 'boolean',
                  },
                  hostPID: {
                    description: "Use the host's pid namespace. Optional: Default to false.",
                    type: 'boolean',
                  },
                  hostname: {
                    description: "Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.",
                    type: ['string', 'null'],
                  },
                  imagePullSecrets: {
                    description: 'ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod',
                    type: ['array', 'null'],
                    items: {
                      description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                      properties: {
                        name: {
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                          type: ['string', 'null'],
                        },
                      },
                      additionalProperties: false,
                    },
                    'x-kubernetes-patch-merge-key': 'name',
                    'x-kubernetes-patch-strategy': 'merge',
                  },
                  initContainers: {
                    description:
                      'List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/',
                    type: ['array', 'null'],
                    items: {
                      description: 'A single application container that you want to run within a pod.',
                      required: ['name'],
                      properties: {
                        args: {
                          description:
                            "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                          type: ['array', 'null'],
                          items: {
                            type: ['string', 'null'],
                          },
                        },
                        command: {
                          description:
                            "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                          type: ['array', 'null'],
                          items: {
                            type: ['string', 'null'],
                          },
                        },
                        env: {
                          description: 'List of environment variables to set in the container. Cannot be updated.',
                          type: ['array', 'null'],
                          items: {
                            description: 'EnvVar represents an environment variable present in a Container.',
                            required: ['name'],
                            properties: {
                              name: {
                                description: 'Name of the environment variable. Must be a C_IDENTIFIER.',
                                type: 'string',
                              },
                              value: {
                                description: 'Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".',
                                type: ['string', 'null'],
                              },
                              valueFrom: {
                                description: 'EnvVarSource represents a source for the value of an EnvVar.',
                                properties: {
                                  configMapKeyRef: {
                                    description: 'Selects a key from a ConfigMap.',
                                    required: ['key'],
                                    properties: {
                                      key: {
                                        description: 'The key to select.',
                                        type: 'string',
                                      },
                                      name: {
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                        type: ['string', 'null'],
                                      },
                                      optional: {
                                        description: "Specify whether the ConfigMap or it's key must be defined",
                                        type: 'boolean',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  fieldRef: {
                                    description: 'ObjectFieldSelector selects an APIVersioned field of an object.',
                                    required: ['fieldPath'],
                                    properties: {
                                      apiVersion: {
                                        description: 'Version of the schema the FieldPath is written in terms of, defaults to "v1".',
                                        type: ['string', 'null'],
                                      },
                                      fieldPath: {
                                        description: 'Path of the field to select in the specified API version.',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  resourceFieldRef: {
                                    description: 'ResourceFieldSelector represents container resources (cpu, memory) and their output format',
                                    required: ['resource'],
                                    properties: {
                                      containerName: {
                                        description: 'Container name: required for volumes, optional for env vars',
                                        type: ['string', 'null'],
                                      },
                                      divisor: {
                                        oneOf: [
                                          {
                                            type: ['string', 'null'],
                                          },
                                          {
                                            type: 'integer',
                                          },
                                        ],
                                      },
                                      resource: {
                                        description: 'Required: resource to select',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  secretKeyRef: {
                                    description: 'SecretKeySelector selects a key of a Secret.',
                                    required: ['key'],
                                    properties: {
                                      key: {
                                        description: 'The key of the secret to select from.  Must be a valid secret key.',
                                        type: 'string',
                                      },
                                      name: {
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                        type: ['string', 'null'],
                                      },
                                      optional: {
                                        description: "Specify whether the Secret or it's key must be defined",
                                        type: 'boolean',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                additionalProperties: false,
                              },
                            },
                            additionalProperties: false,
                          },
                          'x-kubernetes-patch-merge-key': 'name',
                          'x-kubernetes-patch-strategy': 'merge',
                        },
                        envFrom: {
                          description: 'List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.',
                          type: ['array', 'null'],
                          items: {
                            description: 'EnvFromSource represents the source of a set of ConfigMaps',
                            properties: {
                              configMapRef: {
                                description: "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
                                properties: {
                                  name: {
                                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                    type: ['string', 'null'],
                                  },
                                  optional: {
                                    description: 'Specify whether the ConfigMap must be defined',
                                    type: 'boolean',
                                  },
                                },
                                additionalProperties: false,
                              },
                              prefix: {
                                description: 'An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.',
                                type: ['string', 'null'],
                              },
                              secretRef: {
                                description: "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
                                properties: {
                                  name: {
                                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                    type: ['string', 'null'],
                                  },
                                  optional: {
                                    description: 'Specify whether the Secret must be defined',
                                    type: 'boolean',
                                  },
                                },
                                additionalProperties: false,
                              },
                            },
                            additionalProperties: false,
                          },
                        },
                        image: {
                          description: 'Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.',
                          type: ['string', 'null'],
                        },
                        imagePullPolicy: {
                          description: 'Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images',
                          type: ['string', 'null'],
                        },
                        lifecycle: {
                          description: 'Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.',
                          properties: {
                            postStart: {
                              description: 'Handler defines a specific action that should be taken',
                              properties: {
                                exec: {
                                  description: 'ExecAction describes a "run in container" action.',
                                  properties: {
                                    command: {
                                      description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                      type: ['array', 'null'],
                                      items: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                httpGet: {
                                  description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                                  required: ['port'],
                                  properties: {
                                    host: {
                                      description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                      type: ['string', 'null'],
                                    },
                                    httpHeaders: {
                                      description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                        required: ['name', 'value'],
                                        properties: {
                                          name: {
                                            description: 'The header field name',
                                            type: 'string',
                                          },
                                          value: {
                                            description: 'The header field value',
                                            type: 'string',
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    path: {
                                      description: 'Path to access on the HTTP server.',
                                      type: ['string', 'null'],
                                    },
                                    port: {
                                      oneOf: [
                                        {
                                          type: ['string', 'null'],
                                        },
                                        {
                                          type: 'integer',
                                        },
                                      ],
                                    },
                                    scheme: {
                                      description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                      type: ['string', 'null'],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                tcpSocket: {
                                  description: 'TCPSocketAction describes an action based on opening a socket',
                                  required: ['port'],
                                  properties: {
                                    host: {
                                      description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                      type: ['string', 'null'],
                                    },
                                    port: {
                                      oneOf: [
                                        {
                                          type: ['string', 'null'],
                                        },
                                        {
                                          type: 'integer',
                                        },
                                      ],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                              },
                              additionalProperties: false,
                            },
                            preStop: {
                              description: 'Handler defines a specific action that should be taken',
                              properties: {
                                exec: {
                                  description: 'ExecAction describes a "run in container" action.',
                                  properties: {
                                    command: {
                                      description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                      type: ['array', 'null'],
                                      items: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                httpGet: {
                                  description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                                  required: ['port'],
                                  properties: {
                                    host: {
                                      description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                      type: ['string', 'null'],
                                    },
                                    httpHeaders: {
                                      description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                        required: ['name', 'value'],
                                        properties: {
                                          name: {
                                            description: 'The header field name',
                                            type: 'string',
                                          },
                                          value: {
                                            description: 'The header field value',
                                            type: 'string',
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    path: {
                                      description: 'Path to access on the HTTP server.',
                                      type: ['string', 'null'],
                                    },
                                    port: {
                                      oneOf: [
                                        {
                                          type: ['string', 'null'],
                                        },
                                        {
                                          type: 'integer',
                                        },
                                      ],
                                    },
                                    scheme: {
                                      description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                      type: ['string', 'null'],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                tcpSocket: {
                                  description: 'TCPSocketAction describes an action based on opening a socket',
                                  required: ['port'],
                                  properties: {
                                    host: {
                                      description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                      type: ['string', 'null'],
                                    },
                                    port: {
                                      oneOf: [
                                        {
                                          type: ['string', 'null'],
                                        },
                                        {
                                          type: 'integer',
                                        },
                                      ],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          additionalProperties: false,
                        },
                        livenessProbe: {
                          description: 'Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.',
                          properties: {
                            exec: {
                              description: 'ExecAction describes a "run in container" action.',
                              properties: {
                                command: {
                                  description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                              },
                              additionalProperties: false,
                            },
                            failureThreshold: {
                              description: 'Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            httpGet: {
                              description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                              required: ['port'],
                              properties: {
                                host: {
                                  description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                  type: ['string', 'null'],
                                },
                                httpHeaders: {
                                  description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                  type: ['array', 'null'],
                                  items: {
                                    description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                    required: ['name', 'value'],
                                    properties: {
                                      name: {
                                        description: 'The header field name',
                                        type: 'string',
                                      },
                                      value: {
                                        description: 'The header field value',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                path: {
                                  description: 'Path to access on the HTTP server.',
                                  type: ['string', 'null'],
                                },
                                port: {
                                  oneOf: [
                                    {
                                      type: ['string', 'null'],
                                    },
                                    {
                                      type: 'integer',
                                    },
                                  ],
                                },
                                scheme: {
                                  description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            initialDelaySeconds: {
                              description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                              type: 'integer',
                              format: 'int32',
                            },
                            periodSeconds: {
                              description: 'How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            successThreshold: {
                              description: 'Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            tcpSocket: {
                              description: 'TCPSocketAction describes an action based on opening a socket',
                              required: ['port'],
                              properties: {
                                host: {
                                  description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                  type: ['string', 'null'],
                                },
                                port: {
                                  oneOf: [
                                    {
                                      type: ['string', 'null'],
                                    },
                                    {
                                      type: 'integer',
                                    },
                                  ],
                                },
                              },
                              additionalProperties: false,
                            },
                            timeoutSeconds: {
                              description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                              type: 'integer',
                              format: 'int32',
                            },
                          },
                          additionalProperties: false,
                        },
                        name: {
                          description: 'Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.',
                          type: 'string',
                        },
                        ports: {
                          description: 'List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.',
                          type: ['array', 'null'],
                          items: {
                            description: 'ContainerPort represents a network port in a single container.',
                            required: ['containerPort'],
                            properties: {
                              containerPort: {
                                description: "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
                                type: 'integer',
                                format: 'int32',
                              },
                              hostIP: {
                                description: 'What host IP to bind the external port to.',
                                type: ['string', 'null'],
                              },
                              hostPort: {
                                description: 'Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.',
                                type: 'integer',
                                format: 'int32',
                              },
                              name: {
                                description: 'If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.',
                                type: ['string', 'null'],
                              },
                              protocol: {
                                description: 'Protocol for port. Must be UDP or TCP. Defaults to "TCP".',
                                type: ['string', 'null'],
                              },
                            },
                            additionalProperties: false,
                          },
                          'x-kubernetes-patch-merge-key': 'containerPort',
                          'x-kubernetes-patch-strategy': 'merge',
                        },
                        readinessProbe: {
                          description: 'Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.',
                          properties: {
                            exec: {
                              description: 'ExecAction describes a "run in container" action.',
                              properties: {
                                command: {
                                  description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                              },
                              additionalProperties: false,
                            },
                            failureThreshold: {
                              description: 'Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            httpGet: {
                              description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                              required: ['port'],
                              properties: {
                                host: {
                                  description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                  type: ['string', 'null'],
                                },
                                httpHeaders: {
                                  description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                  type: ['array', 'null'],
                                  items: {
                                    description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                    required: ['name', 'value'],
                                    properties: {
                                      name: {
                                        description: 'The header field name',
                                        type: 'string',
                                      },
                                      value: {
                                        description: 'The header field value',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                path: {
                                  description: 'Path to access on the HTTP server.',
                                  type: ['string', 'null'],
                                },
                                port: {
                                  oneOf: [
                                    {
                                      type: ['string', 'null'],
                                    },
                                    {
                                      type: 'integer',
                                    },
                                  ],
                                },
                                scheme: {
                                  description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            initialDelaySeconds: {
                              description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                              type: 'integer',
                              format: 'int32',
                            },
                            periodSeconds: {
                              description: 'How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            successThreshold: {
                              description: 'Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            tcpSocket: {
                              description: 'TCPSocketAction describes an action based on opening a socket',
                              required: ['port'],
                              properties: {
                                host: {
                                  description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                  type: ['string', 'null'],
                                },
                                port: {
                                  oneOf: [
                                    {
                                      type: ['string', 'null'],
                                    },
                                    {
                                      type: 'integer',
                                    },
                                  ],
                                },
                              },
                              additionalProperties: false,
                            },
                            timeoutSeconds: {
                              description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                              type: 'integer',
                              format: 'int32',
                            },
                          },
                          additionalProperties: false,
                        },
                        resources: {
                          description: 'ResourceRequirements describes the compute resource requirements.',
                          properties: {
                            limits: {
                              description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/',
                              type: 'object',
                              additionalProperties: {
                                oneOf: [
                                  {
                                    type: ['string', 'null'],
                                  },
                                  {
                                    type: 'integer',
                                  },
                                ],
                              },
                            },
                            requests: {
                              description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/',
                              type: 'object',
                              additionalProperties: {
                                oneOf: [
                                  {
                                    type: ['string', 'null'],
                                  },
                                  {
                                    type: 'integer',
                                  },
                                ],
                              },
                            },
                          },
                          additionalProperties: false,
                        },
                        securityContext: {
                          description: 'SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.',
                          properties: {
                            allowPrivilegeEscalation: {
                              description: 'AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN',
                              type: 'boolean',
                            },
                            capabilities: {
                              description: 'Adds and removes POSIX capabilities from running containers.',
                              properties: {
                                add: {
                                  description: 'Added capabilities',
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                                drop: {
                                  description: 'Removed capabilities',
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                              },
                              additionalProperties: false,
                            },
                            privileged: {
                              description: 'Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.',
                              type: 'boolean',
                            },
                            readOnlyRootFilesystem: {
                              description: 'Whether this container has a read-only root filesystem. Default is false.',
                              type: 'boolean',
                            },
                            runAsGroup: {
                              description: 'The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                              type: 'integer',
                              format: 'int64',
                            },
                            runAsNonRoot: {
                              description: 'Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                              type: 'boolean',
                            },
                            runAsUser: {
                              description: 'The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                              type: 'integer',
                              format: 'int64',
                            },
                            seLinuxOptions: {
                              description: 'SELinuxOptions are the labels to be applied to the container',
                              properties: {
                                level: {
                                  description: 'Level is SELinux level label that applies to the container.',
                                  type: ['string', 'null'],
                                },
                                role: {
                                  description: 'Role is a SELinux role label that applies to the container.',
                                  type: ['string', 'null'],
                                },
                                type: {
                                  description: 'Type is a SELinux type label that applies to the container.',
                                  type: ['string', 'null'],
                                },
                                user: {
                                  description: 'User is a SELinux user label that applies to the container.',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          additionalProperties: false,
                        },
                        stdin: {
                          description: 'Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.',
                          type: 'boolean',
                        },
                        stdinOnce: {
                          description:
                            'Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false',
                          type: 'boolean',
                        },
                        terminationMessagePath: {
                          description: "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                          type: ['string', 'null'],
                        },
                        terminationMessagePolicy: {
                          description: 'Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.',
                          type: ['string', 'null'],
                        },
                        tty: {
                          description: "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                          type: 'boolean',
                        },
                        volumeDevices: {
                          description: 'volumeDevices is the list of block devices to be used by the container. This is an alpha feature and may change in the future.',
                          type: ['array', 'null'],
                          items: {
                            description: 'volumeDevice describes a mapping of a raw block device within a container.',
                            required: ['name', 'devicePath'],
                            properties: {
                              devicePath: {
                                description: 'devicePath is the path inside of the container that the device will be mapped to.',
                                type: 'string',
                              },
                              name: {
                                description: 'name must match the name of a persistentVolumeClaim in the pod',
                                type: 'string',
                              },
                            },
                            additionalProperties: false,
                          },
                          'x-kubernetes-patch-merge-key': 'devicePath',
                          'x-kubernetes-patch-strategy': 'merge',
                        },
                        volumeMounts: {
                          description: "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                          type: ['array', 'null'],
                          items: {
                            description: 'VolumeMount describes a mounting of a Volume within a container.',
                            required: ['name', 'mountPath'],
                            properties: {
                              mountPath: {
                                description: "Path within the container at which the volume should be mounted.  Must not contain ':'.",
                                type: 'string',
                              },
                              mountPropagation: {
                                description: 'mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.',
                                type: ['string', 'null'],
                              },
                              name: {
                                description: 'This must match the Name of a Volume.',
                                type: 'string',
                              },
                              readOnly: {
                                description: 'Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.',
                                type: 'boolean',
                              },
                              subPath: {
                                description: 'Path within the volume from which the container\'s volume should be mounted. Defaults to "" (volume\'s root).',
                                type: ['string', 'null'],
                              },
                            },
                            additionalProperties: false,
                          },
                          'x-kubernetes-patch-merge-key': 'mountPath',
                          'x-kubernetes-patch-strategy': 'merge',
                        },
                        workingDir: {
                          description: "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                          type: ['string', 'null'],
                        },
                      },
                      additionalProperties: false,
                    },
                    'x-kubernetes-patch-merge-key': 'name',
                    'x-kubernetes-patch-strategy': 'merge',
                  },
                  nodeName: {
                    description: 'NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.',
                    type: ['string', 'null'],
                  },
                  nodeSelector: {
                    description: "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
                    type: 'object',
                    additionalProperties: {
                      type: ['string', 'null'],
                    },
                  },
                  priority: {
                    description: 'The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.',
                    type: 'integer',
                    format: 'int32',
                  },
                  priorityClassName: {
                    description: 'If specified, indicates the pod\'s priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.',
                    type: ['string', 'null'],
                  },
                  readinessGates: {
                    description: 'If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://github.com/kubernetes/community/blob/master/keps/sig-network/0007-pod-ready%2B%2B.md',
                    type: ['array', 'null'],
                    items: {
                      description: 'PodReadinessGate contains the reference to a pod condition',
                      required: ['conditionType'],
                      properties: {
                        conditionType: {
                          description: "ConditionType refers to a condition in the pod's condition list with matching type.",
                          type: 'string',
                        },
                      },
                      additionalProperties: false,
                    },
                  },
                  restartPolicy: {
                    description: 'Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy',
                    type: ['string', 'null'],
                  },
                  schedulerName: {
                    description: 'If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.',
                    type: ['string', 'null'],
                  },
                  securityContext: {
                    description: 'PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.',
                    properties: {
                      fsGroup: {
                        description: "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume.",
                        type: 'integer',
                        format: 'int64',
                      },
                      runAsGroup: {
                        description: 'The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.',
                        type: 'integer',
                        format: 'int64',
                      },
                      runAsNonRoot: {
                        description: 'Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                        type: 'boolean',
                      },
                      runAsUser: {
                        description: 'The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.',
                        type: 'integer',
                        format: 'int64',
                      },
                      seLinuxOptions: {
                        description: 'SELinuxOptions are the labels to be applied to the container',
                        properties: {
                          level: {
                            description: 'Level is SELinux level label that applies to the container.',
                            type: ['string', 'null'],
                          },
                          role: {
                            description: 'Role is a SELinux role label that applies to the container.',
                            type: ['string', 'null'],
                          },
                          type: {
                            description: 'Type is a SELinux type label that applies to the container.',
                            type: ['string', 'null'],
                          },
                          user: {
                            description: 'User is a SELinux user label that applies to the container.',
                            type: ['string', 'null'],
                          },
                        },
                        additionalProperties: false,
                      },
                      supplementalGroups: {
                        description: "A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.",
                        type: ['array', 'null'],
                        items: {
                          type: 'integer',
                          format: 'int64',
                        },
                      },
                      sysctls: {
                        description: 'Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.',
                        type: ['array', 'null'],
                        items: {
                          description: 'Sysctl defines a kernel parameter to be set',
                          required: ['name', 'value'],
                          properties: {
                            name: {
                              description: 'Name of a property to set',
                              type: 'string',
                            },
                            value: {
                              description: 'Value of a property to set',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                      },
                    },
                    additionalProperties: false,
                  },
                  serviceAccount: {
                    description: 'DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.',
                    type: ['string', 'null'],
                  },
                  serviceAccountName: {
                    description: 'ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/',
                    type: ['string', 'null'],
                  },
                  shareProcessNamespace: {
                    description: 'Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false. This field is alpha-level and is honored only by servers that enable the PodShareProcessNamespace feature.',
                    type: 'boolean',
                  },
                  subdomain: {
                    description: 'If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.',
                    type: ['string', 'null'],
                  },
                  terminationGracePeriodSeconds: {
                    description:
                      'Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.',
                    type: 'integer',
                    format: 'int64',
                  },
                  tolerations: {
                    description: "If specified, the pod's tolerations.",
                    type: ['array', 'null'],
                    items: {
                      description: 'The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.',
                      properties: {
                        effect: {
                          description: 'Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.',
                          type: ['string', 'null'],
                        },
                        key: {
                          description: 'Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.',
                          type: ['string', 'null'],
                        },
                        operator: {
                          description: "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                          type: ['string', 'null'],
                        },
                        tolerationSeconds: {
                          description: 'TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.',
                          type: 'integer',
                          format: 'int64',
                        },
                        value: {
                          description: 'Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.',
                          type: ['string', 'null'],
                        },
                      },
                      additionalProperties: false,
                    },
                  },
                  volumes: {
                    description: 'List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes',
                    type: ['array', 'null'],
                    items: {
                      description: 'Volume represents a named volume in a pod that may be accessed by any container in the pod.',
                      required: ['name'],
                      properties: {
                        awsElasticBlockStore: {
                          description: 'Represents a Persistent Disk resource in AWS.\n\nAn AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.',
                          required: ['volumeID'],
                          properties: {
                            fsType: {
                              description: 'Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore',
                              type: ['string', 'null'],
                            },
                            partition: {
                              description: 'The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).',
                              type: 'integer',
                              format: 'int32',
                            },
                            readOnly: {
                              description: 'Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore',
                              type: 'boolean',
                            },
                            volumeID: {
                              description: 'Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        azureDisk: {
                          description: 'AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.',
                          required: ['diskName', 'diskURI'],
                          properties: {
                            cachingMode: {
                              description: 'Host Caching mode: None, Read Only, Read Write.',
                              type: ['string', 'null'],
                            },
                            diskName: {
                              description: 'The Name of the data disk in the blob storage',
                              type: 'string',
                            },
                            diskURI: {
                              description: 'The URI the data disk in the blob storage',
                              type: 'string',
                            },
                            fsType: {
                              description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                              type: ['string', 'null'],
                            },
                            kind: {
                              description: 'Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared',
                              type: ['string', 'null'],
                            },
                            readOnly: {
                              description: 'Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                              type: 'boolean',
                            },
                          },
                          additionalProperties: false,
                        },
                        azureFile: {
                          description: 'AzureFile represents an Azure File Service mount on the host and bind mount to the pod.',
                          required: ['secretName', 'shareName'],
                          properties: {
                            readOnly: {
                              description: 'Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                              type: 'boolean',
                            },
                            secretName: {
                              description: 'the name of secret that contains Azure Storage Account Name and Key',
                              type: 'string',
                            },
                            shareName: {
                              description: 'Share Name',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        cephfs: {
                          description: 'Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.',
                          required: ['monitors'],
                          properties: {
                            monitors: {
                              description: 'Required: Monitors is a collection of Ceph monitors More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it',
                              type: 'array',
                              items: {
                                type: ['string', 'null'],
                              },
                            },
                            path: {
                              description: 'Optional: Used as the mounted root, rather than the full Ceph tree, default is /',
                              type: ['string', 'null'],
                            },
                            readOnly: {
                              description: 'Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it',
                              type: 'boolean',
                            },
                            secretFile: {
                              description: 'Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it',
                              type: ['string', 'null'],
                            },
                            secretRef: {
                              description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                              properties: {
                                name: {
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            user: {
                              description: 'Optional: User is the rados user name, default is admin More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                        cinder: {
                          description: 'Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.',
                          required: ['volumeID'],
                          properties: {
                            fsType: {
                              description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md',
                              type: ['string', 'null'],
                            },
                            readOnly: {
                              description: 'Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md',
                              type: 'boolean',
                            },
                            secretRef: {
                              description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                              properties: {
                                name: {
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            volumeID: {
                              description: 'volume id used to identify the volume in cinder More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        configMap: {
                          description: "Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.",
                          properties: {
                            defaultMode: {
                              description: 'Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                              type: 'integer',
                              format: 'int32',
                            },
                            items: {
                              description:
                                "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                              type: ['array', 'null'],
                              items: {
                                description: 'Maps a string key to a path within a volume.',
                                required: ['key', 'path'],
                                properties: {
                                  key: {
                                    description: 'The key to project.',
                                    type: 'string',
                                  },
                                  mode: {
                                    description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                    type: 'integer',
                                    format: 'int32',
                                  },
                                  path: {
                                    description: "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                                    type: 'string',
                                  },
                                },
                                additionalProperties: false,
                              },
                            },
                            name: {
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                              type: ['string', 'null'],
                            },
                            optional: {
                              description: "Specify whether the ConfigMap or it's keys must be defined",
                              type: 'boolean',
                            },
                          },
                          additionalProperties: false,
                        },
                        downwardAPI: {
                          description: 'DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.',
                          properties: {
                            defaultMode: {
                              description: 'Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                              type: 'integer',
                              format: 'int32',
                            },
                            items: {
                              description: 'Items is a list of downward API volume file',
                              type: ['array', 'null'],
                              items: {
                                description: 'DownwardAPIVolumeFile represents information to create the file containing the pod field',
                                required: ['path'],
                                properties: {
                                  fieldRef: {
                                    description: 'ObjectFieldSelector selects an APIVersioned field of an object.',
                                    required: ['fieldPath'],
                                    properties: {
                                      apiVersion: {
                                        description: 'Version of the schema the FieldPath is written in terms of, defaults to "v1".',
                                        type: ['string', 'null'],
                                      },
                                      fieldPath: {
                                        description: 'Path of the field to select in the specified API version.',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  mode: {
                                    description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                    type: 'integer',
                                    format: 'int32',
                                  },
                                  path: {
                                    description: "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
                                    type: 'string',
                                  },
                                  resourceFieldRef: {
                                    description: 'ResourceFieldSelector represents container resources (cpu, memory) and their output format',
                                    required: ['resource'],
                                    properties: {
                                      containerName: {
                                        description: 'Container name: required for volumes, optional for env vars',
                                        type: ['string', 'null'],
                                      },
                                      divisor: {
                                        oneOf: [
                                          {
                                            type: ['string', 'null'],
                                          },
                                          {
                                            type: 'integer',
                                          },
                                        ],
                                      },
                                      resource: {
                                        description: 'Required: resource to select',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                additionalProperties: false,
                              },
                            },
                          },
                          additionalProperties: false,
                        },
                        emptyDir: {
                          description: 'Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.',
                          properties: {
                            medium: {
                              description: 'What type of storage medium should back this directory. The default is "" which means to use the node\'s default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir',
                              type: ['string', 'null'],
                            },
                            sizeLimit: {
                              oneOf: [
                                {
                                  type: ['string', 'null'],
                                },
                                {
                                  type: 'integer',
                                },
                              ],
                            },
                          },
                          additionalProperties: false,
                        },
                        fc: {
                          description: 'Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.',
                          properties: {
                            fsType: {
                              description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                              type: ['string', 'null'],
                            },
                            lun: {
                              description: 'Optional: FC target lun number',
                              type: 'integer',
                              format: 'int32',
                            },
                            readOnly: {
                              description: 'Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                              type: 'boolean',
                            },
                            targetWWNs: {
                              description: 'Optional: FC target worldwide names (WWNs)',
                              type: ['array', 'null'],
                              items: {
                                type: ['string', 'null'],
                              },
                            },
                            wwids: {
                              description: 'Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.',
                              type: ['array', 'null'],
                              items: {
                                type: ['string', 'null'],
                              },
                            },
                          },
                          additionalProperties: false,
                        },
                        flexVolume: {
                          description: 'FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.',
                          required: ['driver'],
                          properties: {
                            driver: {
                              description: 'Driver is the name of the driver to use for this volume.',
                              type: 'string',
                            },
                            fsType: {
                              description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.',
                              type: ['string', 'null'],
                            },
                            options: {
                              description: 'Optional: Extra command options if any.',
                              type: 'object',
                              additionalProperties: {
                                type: ['string', 'null'],
                              },
                            },
                            readOnly: {
                              description: 'Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                              type: 'boolean',
                            },
                            secretRef: {
                              description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                              properties: {
                                name: {
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          additionalProperties: false,
                        },
                        flocker: {
                          description: 'Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.',
                          properties: {
                            datasetName: {
                              description: 'Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated',
                              type: ['string', 'null'],
                            },
                            datasetUUID: {
                              description: 'UUID of the dataset. This is unique identifier of a Flocker dataset',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                        gcePersistentDisk: {
                          description: 'Represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.',
                          required: ['pdName'],
                          properties: {
                            fsType: {
                              description: 'Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
                              type: ['string', 'null'],
                            },
                            partition: {
                              description: 'The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
                              type: 'integer',
                              format: 'int32',
                            },
                            pdName: {
                              description: 'Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
                              type: 'string',
                            },
                            readOnly: {
                              description: 'ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
                              type: 'boolean',
                            },
                          },
                          additionalProperties: false,
                        },
                        gitRepo: {
                          description: "Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.\n\nDEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.",
                          required: ['repository'],
                          properties: {
                            directory: {
                              description: "Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.",
                              type: ['string', 'null'],
                            },
                            repository: {
                              description: 'Repository URL',
                              type: 'string',
                            },
                            revision: {
                              description: 'Commit hash for the specified revision.',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                        glusterfs: {
                          description: 'Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.',
                          required: ['endpoints', 'path'],
                          properties: {
                            endpoints: {
                              description: 'EndpointsName is the endpoint name that details Glusterfs topology. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod',
                              type: 'string',
                            },
                            path: {
                              description: 'Path is the Glusterfs volume path. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod',
                              type: 'string',
                            },
                            readOnly: {
                              description: 'ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod',
                              type: 'boolean',
                            },
                          },
                          additionalProperties: false,
                        },
                        hostPath: {
                          description: 'Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.',
                          required: ['path'],
                          properties: {
                            path: {
                              description: 'Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath',
                              type: 'string',
                            },
                            type: {
                              description: 'Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                        iscsi: {
                          description: 'Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.',
                          required: ['targetPortal', 'iqn', 'lun'],
                          properties: {
                            chapAuthDiscovery: {
                              description: 'whether support iSCSI Discovery CHAP authentication',
                              type: 'boolean',
                            },
                            chapAuthSession: {
                              description: 'whether support iSCSI Session CHAP authentication',
                              type: 'boolean',
                            },
                            fsType: {
                              description: 'Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi',
                              type: ['string', 'null'],
                            },
                            initiatorName: {
                              description: 'Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.',
                              type: ['string', 'null'],
                            },
                            iqn: {
                              description: 'Target iSCSI Qualified Name.',
                              type: 'string',
                            },
                            iscsiInterface: {
                              description: "iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
                              type: ['string', 'null'],
                            },
                            lun: {
                              description: 'iSCSI Target Lun number.',
                              type: 'integer',
                              format: 'int32',
                            },
                            portals: {
                              description: 'iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).',
                              type: ['array', 'null'],
                              items: {
                                type: ['string', 'null'],
                              },
                            },
                            readOnly: {
                              description: 'ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.',
                              type: 'boolean',
                            },
                            secretRef: {
                              description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                              properties: {
                                name: {
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            targetPortal: {
                              description: 'iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        name: {
                          description: "Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                          type: 'string',
                        },
                        nfs: {
                          description: 'Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.',
                          required: ['server', 'path'],
                          properties: {
                            path: {
                              description: 'Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs',
                              type: 'string',
                            },
                            readOnly: {
                              description: 'ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs',
                              type: 'boolean',
                            },
                            server: {
                              description: 'Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        persistentVolumeClaim: {
                          description: "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).",
                          required: ['claimName'],
                          properties: {
                            claimName: {
                              description: 'ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims',
                              type: 'string',
                            },
                            readOnly: {
                              description: 'Will force the ReadOnly setting in VolumeMounts. Default false.',
                              type: 'boolean',
                            },
                          },
                          additionalProperties: false,
                        },
                        photonPersistentDisk: {
                          description: 'Represents a Photon Controller persistent disk resource.',
                          required: ['pdID'],
                          properties: {
                            fsType: {
                              description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                              type: ['string', 'null'],
                            },
                            pdID: {
                              description: 'ID that identifies Photon Controller persistent disk',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        portworxVolume: {
                          description: 'PortworxVolumeSource represents a Portworx volume resource.',
                          required: ['volumeID'],
                          properties: {
                            fsType: {
                              description: 'FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.',
                              type: ['string', 'null'],
                            },
                            readOnly: {
                              description: 'Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                              type: 'boolean',
                            },
                            volumeID: {
                              description: 'VolumeID uniquely identifies a Portworx volume',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        projected: {
                          description: 'Represents a projected volume source',
                          required: ['sources'],
                          properties: {
                            defaultMode: {
                              description: 'Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                              type: 'integer',
                              format: 'int32',
                            },
                            sources: {
                              description: 'list of volume projections',
                              type: 'array',
                              items: {
                                description: 'Projection that may be projected along with other supported volume types',
                                properties: {
                                  configMap: {
                                    description: "Adapts a ConfigMap into a projected volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.",
                                    properties: {
                                      items: {
                                        description:
                                          "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                                        type: ['array', 'null'],
                                        items: {
                                          description: 'Maps a string key to a path within a volume.',
                                          required: ['key', 'path'],
                                          properties: {
                                            key: {
                                              description: 'The key to project.',
                                              type: 'string',
                                            },
                                            mode: {
                                              description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                              type: 'integer',
                                              format: 'int32',
                                            },
                                            path: {
                                              description: "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                                              type: 'string',
                                            },
                                          },
                                          additionalProperties: false,
                                        },
                                      },
                                      name: {
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                        type: ['string', 'null'],
                                      },
                                      optional: {
                                        description: "Specify whether the ConfigMap or it's keys must be defined",
                                        type: 'boolean',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  downwardAPI: {
                                    description: 'Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.',
                                    properties: {
                                      items: {
                                        description: 'Items is a list of DownwardAPIVolume file',
                                        type: ['array', 'null'],
                                        items: {
                                          description: 'DownwardAPIVolumeFile represents information to create the file containing the pod field',
                                          required: ['path'],
                                          properties: {
                                            fieldRef: {
                                              description: 'ObjectFieldSelector selects an APIVersioned field of an object.',
                                              required: ['fieldPath'],
                                              properties: {
                                                apiVersion: {
                                                  description: 'Version of the schema the FieldPath is written in terms of, defaults to "v1".',
                                                  type: ['string', 'null'],
                                                },
                                                fieldPath: {
                                                  description: 'Path of the field to select in the specified API version.',
                                                  type: 'string',
                                                },
                                              },
                                              additionalProperties: false,
                                            },
                                            mode: {
                                              description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                              type: 'integer',
                                              format: 'int32',
                                            },
                                            path: {
                                              description: "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
                                              type: 'string',
                                            },
                                            resourceFieldRef: {
                                              description: 'ResourceFieldSelector represents container resources (cpu, memory) and their output format',
                                              required: ['resource'],
                                              properties: {
                                                containerName: {
                                                  description: 'Container name: required for volumes, optional for env vars',
                                                  type: ['string', 'null'],
                                                },
                                                divisor: {
                                                  oneOf: [
                                                    {
                                                      type: ['string', 'null'],
                                                    },
                                                    {
                                                      type: 'integer',
                                                    },
                                                  ],
                                                },
                                                resource: {
                                                  description: 'Required: resource to select',
                                                  type: 'string',
                                                },
                                              },
                                              additionalProperties: false,
                                            },
                                          },
                                          additionalProperties: false,
                                        },
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  secret: {
                                    description: "Adapts a secret into a projected volume.\n\nThe contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.",
                                    properties: {
                                      items: {
                                        description:
                                          "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                                        type: ['array', 'null'],
                                        items: {
                                          description: 'Maps a string key to a path within a volume.',
                                          required: ['key', 'path'],
                                          properties: {
                                            key: {
                                              description: 'The key to project.',
                                              type: 'string',
                                            },
                                            mode: {
                                              description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                              type: 'integer',
                                              format: 'int32',
                                            },
                                            path: {
                                              description: "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                                              type: 'string',
                                            },
                                          },
                                          additionalProperties: false,
                                        },
                                      },
                                      name: {
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                        type: ['string', 'null'],
                                      },
                                      optional: {
                                        description: 'Specify whether the Secret or its key must be defined',
                                        type: 'boolean',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  serviceAccountToken: {
                                    description: 'ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).',
                                    required: ['path'],
                                    properties: {
                                      audience: {
                                        description: 'Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.',
                                        type: ['string', 'null'],
                                      },
                                      expirationSeconds: {
                                        description: 'ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.',
                                        type: 'integer',
                                        format: 'int64',
                                      },
                                      path: {
                                        description: 'Path is the path relative to the mount point of the file to project the token into.',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                additionalProperties: false,
                              },
                            },
                          },
                          additionalProperties: false,
                        },
                        quobyte: {
                          description: 'Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.',
                          required: ['registry', 'volume'],
                          properties: {
                            group: {
                              description: 'Group to map volume access to Default is no group',
                              type: ['string', 'null'],
                            },
                            readOnly: {
                              description: 'ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.',
                              type: 'boolean',
                            },
                            registry: {
                              description: 'Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes',
                              type: 'string',
                            },
                            user: {
                              description: 'User to map volume access to Defaults to serivceaccount user',
                              type: ['string', 'null'],
                            },
                            volume: {
                              description: 'Volume is a string that references an already created Quobyte volume by name.',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        rbd: {
                          description: 'Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.',
                          required: ['monitors', 'image'],
                          properties: {
                            fsType: {
                              description: 'Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd',
                              type: ['string', 'null'],
                            },
                            image: {
                              description: 'The rados image name. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                              type: 'string',
                            },
                            keyring: {
                              description: 'Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                              type: ['string', 'null'],
                            },
                            monitors: {
                              description: 'A collection of Ceph monitors. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                              type: 'array',
                              items: {
                                type: ['string', 'null'],
                              },
                            },
                            pool: {
                              description: 'The rados pool name. Default is rbd. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                              type: ['string', 'null'],
                            },
                            readOnly: {
                              description: 'ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                              type: 'boolean',
                            },
                            secretRef: {
                              description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                              properties: {
                                name: {
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            user: {
                              description: 'The rados user name. Default is admin. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                        scaleIO: {
                          description: 'ScaleIOVolumeSource represents a persistent ScaleIO volume',
                          required: ['gateway', 'system', 'secretRef'],
                          properties: {
                            fsType: {
                              description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                              type: ['string', 'null'],
                            },
                            gateway: {
                              description: 'The host address of the ScaleIO API Gateway.',
                              type: 'string',
                            },
                            protectionDomain: {
                              description: 'The name of the ScaleIO Protection Domain for the configured storage.',
                              type: ['string', 'null'],
                            },
                            readOnly: {
                              description: 'Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                              type: 'boolean',
                            },
                            secretRef: {
                              description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                              properties: {
                                name: {
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            sslEnabled: {
                              description: 'Flag to enable/disable SSL communication with Gateway, default false',
                              type: 'boolean',
                            },
                            storageMode: {
                              description: 'Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.',
                              type: ['string', 'null'],
                            },
                            storagePool: {
                              description: 'The ScaleIO Storage Pool associated with the protection domain.',
                              type: ['string', 'null'],
                            },
                            system: {
                              description: 'The name of the storage system as configured in ScaleIO.',
                              type: 'string',
                            },
                            volumeName: {
                              description: 'The name of a volume already created in the ScaleIO system that is associated with this volume source.',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                        secret: {
                          description: "Adapts a Secret into a volume.\n\nThe contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.",
                          properties: {
                            defaultMode: {
                              description: 'Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                              type: 'integer',
                              format: 'int32',
                            },
                            items: {
                              description:
                                "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                              type: ['array', 'null'],
                              items: {
                                description: 'Maps a string key to a path within a volume.',
                                required: ['key', 'path'],
                                properties: {
                                  key: {
                                    description: 'The key to project.',
                                    type: 'string',
                                  },
                                  mode: {
                                    description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                    type: 'integer',
                                    format: 'int32',
                                  },
                                  path: {
                                    description: "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                                    type: 'string',
                                  },
                                },
                                additionalProperties: false,
                              },
                            },
                            optional: {
                              description: "Specify whether the Secret or it's keys must be defined",
                              type: 'boolean',
                            },
                            secretName: {
                              description: "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                        storageos: {
                          description: 'Represents a StorageOS persistent volume resource.',
                          properties: {
                            fsType: {
                              description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                              type: ['string', 'null'],
                            },
                            readOnly: {
                              description: 'Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                              type: 'boolean',
                            },
                            secretRef: {
                              description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                              properties: {
                                name: {
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            volumeName: {
                              description: 'VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.',
                              type: ['string', 'null'],
                            },
                            volumeNamespace: {
                              description: 'VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod\'s namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                        vsphereVolume: {
                          description: 'Represents a vSphere volume resource.',
                          required: ['volumePath'],
                          properties: {
                            fsType: {
                              description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                              type: ['string', 'null'],
                            },
                            storagePolicyID: {
                              description: 'Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.',
                              type: ['string', 'null'],
                            },
                            storagePolicyName: {
                              description: 'Storage Policy Based Management (SPBM) profile name.',
                              type: ['string', 'null'],
                            },
                            volumePath: {
                              description: 'Path that identifies vSphere volume vmdk',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                      },
                      additionalProperties: false,
                    },
                    'x-kubernetes-patch-merge-key': 'name',
                    'x-kubernetes-patch-strategy': 'merge,retainKeys',
                  },
                },
                additionalProperties: false,
              },
            },
            additionalProperties: false,
          },
          updateStrategy: {
            description: 'DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet.',
            properties: {
              rollingUpdate: {
                description: 'Spec to control the desired behavior of daemon set rolling update.',
                properties: {
                  maxUnavailable: {
                    oneOf: [
                      {
                        type: ['string', 'null'],
                      },
                      {
                        type: 'integer',
                      },
                    ],
                  },
                },
                additionalProperties: false,
              },
              type: {
                description: 'Type of daemon set update. Can be "RollingUpdate" or "OnDelete". Default is RollingUpdate.',
                type: ['string', 'null'],
              },
            },
            additionalProperties: false,
          },
        },
        additionalProperties: false,
      },
      status: {
        description: 'DaemonSetStatus represents the current status of a daemon set.',
        required: ['currentNumberScheduled', 'numberMisscheduled', 'desiredNumberScheduled', 'numberReady'],
        properties: {
          collisionCount: {
            description: 'Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.',
            type: 'integer',
            format: 'int32',
          },
          conditions: {
            description: "Represents the latest available observations of a DaemonSet's current state.",
            type: ['array', 'null'],
            items: {
              description: 'DaemonSetCondition describes the state of a DaemonSet at a certain point.',
              required: ['type', 'status'],
              properties: {
                lastTransitionTime: {
                  description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                  type: ['string', 'null'],
                  format: 'date-time',
                },
                message: {
                  description: 'A human readable message indicating details about the transition.',
                  type: ['string', 'null'],
                },
                reason: {
                  description: "The reason for the condition's last transition.",
                  type: ['string', 'null'],
                },
                status: {
                  description: 'Status of the condition, one of True, False, Unknown.',
                  type: 'string',
                },
                type: {
                  description: 'Type of DaemonSet condition.',
                  type: 'string',
                },
              },
              additionalProperties: false,
            },
            'x-kubernetes-patch-merge-key': 'type',
            'x-kubernetes-patch-strategy': 'merge',
          },
          currentNumberScheduled: {
            description: 'The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/',
            type: 'integer',
            format: 'int32',
          },
          desiredNumberScheduled: {
            description: 'The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/',
            type: 'integer',
            format: 'int32',
          },
          numberAvailable: {
            description: 'The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)',
            type: 'integer',
            format: 'int32',
          },
          numberMisscheduled: {
            description: 'The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/',
            type: 'integer',
            format: 'int32',
          },
          numberReady: {
            description: 'The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.',
            type: 'integer',
            format: 'int32',
          },
          numberUnavailable: {
            description: 'The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)',
            type: 'integer',
            format: 'int32',
          },
          observedGeneration: {
            description: 'The most recent generation observed by the daemon set controller.',
            type: 'integer',
            format: 'int64',
          },
          updatedNumberScheduled: {
            description: 'The total number of nodes that are running updated daemon pod',
            type: 'integer',
            format: 'int32',
          },
        },
        additionalProperties: false,
      },
    },
    'x-kubernetes-group-version-kind': [
      {
        group: 'apps',
        kind: 'DaemonSet',
        version: 'v1',
      },
    ],
    additionalProperties: false,
    $schema: 'http://json-schema.org/schema#',
    type: 'object',
  })
  .setIn([referenceForModel(k8sModels.StatefulSetModel), 'default'], {
    description: 'StatefulSet represents a set of pods with consistent identities. Identities are defined as:\n - Network: A single stable DNS and hostname.\n - Storage: As many VolumeClaims as requested.\nThe StatefulSet guarantees that a given network identity will always map to the same storage identity.',
    properties: {
      apiVersion: {
        description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
        type: ['string', 'null'],
        enum: ['apps/v1'],
      },
      kind: {
        description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
        type: ['string', 'null'],
        enum: ['StatefulSet'],
      },
      metadata: {
        description: 'ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.',
        properties: {
          annotations: {
            description: 'Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations',
            type: 'object',
            additionalProperties: {
              type: ['string', 'null'],
            },
          },
          clusterName: {
            description: 'The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.',
            type: ['string', 'null'],
          },
          creationTimestamp: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            type: ['string', 'null'],
            format: 'date-time',
          },
          deletionGracePeriodSeconds: {
            description: 'Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.',
            type: 'integer',
            format: 'int64',
          },
          deletionTimestamp: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            type: ['string', 'null'],
            format: 'date-time',
          },
          finalizers: {
            description: 'Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.',
            type: ['array', 'null'],
            items: {
              type: ['string', 'null'],
            },
            'x-kubernetes-patch-strategy': 'merge',
          },
          generateName: {
            description:
              'GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency',
            type: ['string', 'null'],
          },
          generation: {
            description: 'A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.',
            type: 'integer',
            format: 'int64',
          },
          initializers: {
            description: 'Initializers tracks the progress of initialization.',
            required: ['pending'],
            properties: {
              pending: {
                description: 'Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.',
                type: 'array',
                items: {
                  description: 'Initializer is information about an initializer that has not yet completed.',
                  required: ['name'],
                  properties: {
                    name: {
                      description: 'name of the process that is responsible for initializing this object.',
                      type: 'string',
                    },
                  },
                  additionalProperties: false,
                },
                'x-kubernetes-patch-merge-key': 'name',
                'x-kubernetes-patch-strategy': 'merge',
              },
              result: {
                description: "Status is a return value for calls that don't return other objects.",
                properties: {
                  apiVersion: {
                    description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
                    type: ['string', 'null'],
                    enum: ['v1'],
                  },
                  code: {
                    description: 'Suggested HTTP return code for this status, 0 if not set.',
                    type: 'integer',
                    format: 'int32',
                  },
                  details: {
                    description: 'StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.',
                    properties: {
                      causes: {
                        description: 'The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.',
                        type: ['array', 'null'],
                        items: {
                          description: 'StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.',
                          properties: {
                            field: {
                              description: 'The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  "name" - the field "name" on the current resource\n  "items[0].name" - the field "name" on the first array entry in "items"',
                              type: ['string', 'null'],
                            },
                            message: {
                              description: 'A human-readable description of the cause of the error.  This field may be presented as-is to a reader.',
                              type: ['string', 'null'],
                            },
                            reason: {
                              description: 'A machine-readable description of the cause of the error. If this value is empty there is no information available.',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                      },
                      group: {
                        description: 'The group attribute of the resource associated with the status StatusReason.',
                        type: ['string', 'null'],
                      },
                      kind: {
                        description: 'The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                        type: ['string', 'null'],
                      },
                      name: {
                        description: 'The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).',
                        type: ['string', 'null'],
                      },
                      retryAfterSeconds: {
                        description: 'If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.',
                        type: 'integer',
                        format: 'int32',
                      },
                      uid: {
                        description: 'UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                        type: ['string', 'null'],
                      },
                    },
                    additionalProperties: false,
                  },
                  kind: {
                    description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                    type: ['string', 'null'],
                    enum: ['Status'],
                  },
                  message: {
                    description: 'A human-readable description of the status of this operation.',
                    type: ['string', 'null'],
                  },
                  metadata: {
                    description: 'ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.',
                    properties: {
                      continue: {
                        description:
                          'continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response.',
                        type: ['string', 'null'],
                      },
                      resourceVersion: {
                        description: "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
                        type: ['string', 'null'],
                      },
                      selfLink: {
                        description: 'selfLink is a URL representing this object. Populated by the system. Read-only.',
                        type: ['string', 'null'],
                      },
                    },
                    additionalProperties: false,
                  },
                  reason: {
                    description: 'A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.',
                    type: ['string', 'null'],
                  },
                  status: {
                    description: 'Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status',
                    type: ['string', 'null'],
                  },
                },
                'x-kubernetes-group-version-kind': [
                  {
                    group: '',
                    kind: 'Status',
                    version: 'v1',
                  },
                ],
                additionalProperties: false,
              },
            },
            additionalProperties: false,
          },
          labels: {
            description: 'Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels',
            type: 'object',
            additionalProperties: {
              type: ['string', 'null'],
            },
          },
          name: {
            description: 'Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
            type: ['string', 'null'],
          },
          namespace: {
            description: 'Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces',
            type: ['string', 'null'],
          },
          ownerReferences: {
            description: 'List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.',
            type: ['array', 'null'],
            items: {
              description: 'OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.',
              required: ['apiVersion', 'kind', 'name', 'uid'],
              properties: {
                apiVersion: {
                  description: 'API version of the referent.',
                  type: 'string',
                },
                blockOwnerDeletion: {
                  description: 'If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.',
                  type: 'boolean',
                },
                controller: {
                  description: 'If true, this reference points to the managing controller.',
                  type: 'boolean',
                },
                kind: {
                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                  type: 'string',
                },
                name: {
                  description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
                  type: 'string',
                },
                uid: {
                  description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                  type: 'string',
                },
              },
              additionalProperties: false,
            },
            'x-kubernetes-patch-merge-key': 'uid',
            'x-kubernetes-patch-strategy': 'merge',
          },
          resourceVersion: {
            description:
              'An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency',
            type: ['string', 'null'],
          },
          selfLink: {
            description: 'SelfLink is a URL representing this object. Populated by the system. Read-only.',
            type: ['string', 'null'],
          },
          uid: {
            description: 'UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
            type: ['string', 'null'],
          },
        },
        additionalProperties: false,
      },
      spec: {
        description: 'A StatefulSetSpec is the specification of a StatefulSet.',
        required: ['selector', 'template', 'serviceName'],
        properties: {
          podManagementPolicy: {
            description:
              'podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.',
            type: ['string', 'null'],
          },
          replicas: {
            description: 'replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.',
            type: 'integer',
            format: 'int32',
          },
          revisionHistoryLimit: {
            description: "revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.",
            type: 'integer',
            format: 'int32',
          },
          selector: {
            description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
            properties: {
              matchExpressions: {
                description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                type: ['array', 'null'],
                items: {
                  description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                  required: ['key', 'operator'],
                  properties: {
                    key: {
                      description: 'key is the label key that the selector applies to.',
                      type: 'string',
                      'x-kubernetes-patch-merge-key': 'key',
                      'x-kubernetes-patch-strategy': 'merge',
                    },
                    operator: {
                      description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                      type: 'string',
                    },
                    values: {
                      description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                      type: ['array', 'null'],
                      items: {
                        type: ['string', 'null'],
                      },
                    },
                  },
                  additionalProperties: false,
                },
              },
              matchLabels: {
                description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                type: 'object',
                additionalProperties: {
                  type: ['string', 'null'],
                },
              },
            },
            additionalProperties: false,
          },
          serviceName: {
            description: 'serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where "pod-specific-string" is managed by the StatefulSet controller.',
            type: 'string',
          },
          template: {
            description: 'PodTemplateSpec describes the data a pod should have when created from a template',
            properties: {
              metadata: {
                description: 'ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.',
                properties: {
                  annotations: {
                    description: 'Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations',
                    type: 'object',
                    additionalProperties: {
                      type: ['string', 'null'],
                    },
                  },
                  clusterName: {
                    description: 'The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.',
                    type: ['string', 'null'],
                  },
                  creationTimestamp: {
                    description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                    type: ['string', 'null'],
                    format: 'date-time',
                  },
                  deletionGracePeriodSeconds: {
                    description: 'Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.',
                    type: 'integer',
                    format: 'int64',
                  },
                  deletionTimestamp: {
                    description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                    type: ['string', 'null'],
                    format: 'date-time',
                  },
                  finalizers: {
                    description: 'Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.',
                    type: ['array', 'null'],
                    items: {
                      type: ['string', 'null'],
                    },
                    'x-kubernetes-patch-strategy': 'merge',
                  },
                  generateName: {
                    description:
                      'GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency',
                    type: ['string', 'null'],
                  },
                  generation: {
                    description: 'A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.',
                    type: 'integer',
                    format: 'int64',
                  },
                  initializers: {
                    description: 'Initializers tracks the progress of initialization.',
                    required: ['pending'],
                    properties: {
                      pending: {
                        description: 'Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.',
                        type: 'array',
                        items: {
                          description: 'Initializer is information about an initializer that has not yet completed.',
                          required: ['name'],
                          properties: {
                            name: {
                              description: 'name of the process that is responsible for initializing this object.',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        'x-kubernetes-patch-merge-key': 'name',
                        'x-kubernetes-patch-strategy': 'merge',
                      },
                      result: {
                        description: "Status is a return value for calls that don't return other objects.",
                        properties: {
                          apiVersion: {
                            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
                            type: ['string', 'null'],
                            enum: ['v1'],
                          },
                          code: {
                            description: 'Suggested HTTP return code for this status, 0 if not set.',
                            type: 'integer',
                            format: 'int32',
                          },
                          details: {
                            description: 'StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.',
                            properties: {
                              causes: {
                                description: 'The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.',
                                type: ['array', 'null'],
                                items: {
                                  description: 'StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.',
                                  properties: {
                                    field: {
                                      description: 'The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  "name" - the field "name" on the current resource\n  "items[0].name" - the field "name" on the first array entry in "items"',
                                      type: ['string', 'null'],
                                    },
                                    message: {
                                      description: 'A human-readable description of the cause of the error.  This field may be presented as-is to a reader.',
                                      type: ['string', 'null'],
                                    },
                                    reason: {
                                      description: 'A machine-readable description of the cause of the error. If this value is empty there is no information available.',
                                      type: ['string', 'null'],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                              },
                              group: {
                                description: 'The group attribute of the resource associated with the status StatusReason.',
                                type: ['string', 'null'],
                              },
                              kind: {
                                description: 'The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                                type: ['string', 'null'],
                              },
                              name: {
                                description: 'The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).',
                                type: ['string', 'null'],
                              },
                              retryAfterSeconds: {
                                description: 'If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.',
                                type: 'integer',
                                format: 'int32',
                              },
                              uid: {
                                description: 'UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                                type: ['string', 'null'],
                              },
                            },
                            additionalProperties: false,
                          },
                          kind: {
                            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                            type: ['string', 'null'],
                            enum: ['Status'],
                          },
                          message: {
                            description: 'A human-readable description of the status of this operation.',
                            type: ['string', 'null'],
                          },
                          metadata: {
                            description: 'ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.',
                            properties: {
                              continue: {
                                description:
                                  'continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response.',
                                type: ['string', 'null'],
                              },
                              resourceVersion: {
                                description: "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
                                type: ['string', 'null'],
                              },
                              selfLink: {
                                description: 'selfLink is a URL representing this object. Populated by the system. Read-only.',
                                type: ['string', 'null'],
                              },
                            },
                            additionalProperties: false,
                          },
                          reason: {
                            description: 'A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.',
                            type: ['string', 'null'],
                          },
                          status: {
                            description: 'Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status',
                            type: ['string', 'null'],
                          },
                        },
                        'x-kubernetes-group-version-kind': [
                          {
                            group: '',
                            kind: 'Status',
                            version: 'v1',
                          },
                        ],
                        additionalProperties: false,
                      },
                    },
                    additionalProperties: false,
                  },
                  labels: {
                    description: 'Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels',
                    type: 'object',
                    additionalProperties: {
                      type: ['string', 'null'],
                    },
                  },
                  name: {
                    description: 'Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
                    type: ['string', 'null'],
                  },
                  namespace: {
                    description: 'Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces',
                    type: ['string', 'null'],
                  },
                  ownerReferences: {
                    description: 'List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.',
                    type: ['array', 'null'],
                    items: {
                      description: 'OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.',
                      required: ['apiVersion', 'kind', 'name', 'uid'],
                      properties: {
                        apiVersion: {
                          description: 'API version of the referent.',
                          type: 'string',
                        },
                        blockOwnerDeletion: {
                          description: 'If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.',
                          type: 'boolean',
                        },
                        controller: {
                          description: 'If true, this reference points to the managing controller.',
                          type: 'boolean',
                        },
                        kind: {
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                          type: 'string',
                        },
                        name: {
                          description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
                          type: 'string',
                        },
                        uid: {
                          description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                          type: 'string',
                        },
                      },
                      additionalProperties: false,
                    },
                    'x-kubernetes-patch-merge-key': 'uid',
                    'x-kubernetes-patch-strategy': 'merge',
                  },
                  resourceVersion: {
                    description:
                      'An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency',
                    type: ['string', 'null'],
                  },
                  selfLink: {
                    description: 'SelfLink is a URL representing this object. Populated by the system. Read-only.',
                    type: ['string', 'null'],
                  },
                  uid: {
                    description: 'UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                    type: ['string', 'null'],
                  },
                },
                additionalProperties: false,
              },
              spec: {
                description: 'PodSpec is a description of a pod.',
                required: ['containers'],
                properties: {
                  activeDeadlineSeconds: {
                    description: 'Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.',
                    type: 'integer',
                    format: 'int64',
                  },
                  affinity: {
                    description: 'Affinity is a group of affinity scheduling rules.',
                    properties: {
                      nodeAffinity: {
                        description: 'Node affinity is a group of node affinity scheduling rules.',
                        properties: {
                          preferredDuringSchedulingIgnoredDuringExecution: {
                            description:
                              'The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.',
                            type: ['array', 'null'],
                            items: {
                              description: "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
                              required: ['weight', 'preference'],
                              properties: {
                                preference: {
                                  description: 'A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.',
                                  properties: {
                                    matchExpressions: {
                                      description: "A list of node selector requirements by node's labels.",
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                        required: ['key', 'operator'],
                                        properties: {
                                          key: {
                                            description: 'The label key that the selector applies to.',
                                            type: 'string',
                                          },
                                          operator: {
                                            description: "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                            type: 'string',
                                          },
                                          values: {
                                            description: 'An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
                                            type: ['array', 'null'],
                                            items: {
                                              type: ['string', 'null'],
                                            },
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    matchFields: {
                                      description: "A list of node selector requirements by node's fields.",
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                        required: ['key', 'operator'],
                                        properties: {
                                          key: {
                                            description: 'The label key that the selector applies to.',
                                            type: 'string',
                                          },
                                          operator: {
                                            description: "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                            type: 'string',
                                          },
                                          values: {
                                            description: 'An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
                                            type: ['array', 'null'],
                                            items: {
                                              type: ['string', 'null'],
                                            },
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                weight: {
                                  description: 'Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.',
                                  type: 'integer',
                                  format: 'int32',
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          requiredDuringSchedulingIgnoredDuringExecution: {
                            description: 'A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.',
                            required: ['nodeSelectorTerms'],
                            properties: {
                              nodeSelectorTerms: {
                                description: 'Required. A list of node selector terms. The terms are ORed.',
                                type: 'array',
                                items: {
                                  description: 'A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.',
                                  properties: {
                                    matchExpressions: {
                                      description: "A list of node selector requirements by node's labels.",
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                        required: ['key', 'operator'],
                                        properties: {
                                          key: {
                                            description: 'The label key that the selector applies to.',
                                            type: 'string',
                                          },
                                          operator: {
                                            description: "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                            type: 'string',
                                          },
                                          values: {
                                            description: 'An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
                                            type: ['array', 'null'],
                                            items: {
                                              type: ['string', 'null'],
                                            },
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    matchFields: {
                                      description: "A list of node selector requirements by node's fields.",
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                        required: ['key', 'operator'],
                                        properties: {
                                          key: {
                                            description: 'The label key that the selector applies to.',
                                            type: 'string',
                                          },
                                          operator: {
                                            description: "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                            type: 'string',
                                          },
                                          values: {
                                            description: 'An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
                                            type: ['array', 'null'],
                                            items: {
                                              type: ['string', 'null'],
                                            },
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                              },
                            },
                            additionalProperties: false,
                          },
                        },
                        additionalProperties: false,
                      },
                      podAffinity: {
                        description: 'Pod affinity is a group of inter pod affinity scheduling rules.',
                        properties: {
                          preferredDuringSchedulingIgnoredDuringExecution: {
                            description:
                              'The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.',
                            type: ['array', 'null'],
                            items: {
                              description: 'The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)',
                              required: ['weight', 'podAffinityTerm'],
                              properties: {
                                podAffinityTerm: {
                                  description: 'Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running',
                                  required: ['topologyKey'],
                                  properties: {
                                    labelSelector: {
                                      description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
                                      properties: {
                                        matchExpressions: {
                                          description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                                          type: ['array', 'null'],
                                          items: {
                                            description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                            required: ['key', 'operator'],
                                            properties: {
                                              key: {
                                                description: 'key is the label key that the selector applies to.',
                                                type: 'string',
                                                'x-kubernetes-patch-merge-key': 'key',
                                                'x-kubernetes-patch-strategy': 'merge',
                                              },
                                              operator: {
                                                description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                type: 'string',
                                              },
                                              values: {
                                                description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                                                type: ['array', 'null'],
                                                items: {
                                                  type: ['string', 'null'],
                                                },
                                              },
                                            },
                                            additionalProperties: false,
                                          },
                                        },
                                        matchLabels: {
                                          description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                                          type: 'object',
                                          additionalProperties: {
                                            type: ['string', 'null'],
                                          },
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                    namespaces: {
                                      description: 'namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod\'s namespace"',
                                      type: ['array', 'null'],
                                      items: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                    topologyKey: {
                                      description: 'This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
                                      type: 'string',
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                weight: {
                                  description: 'weight associated with matching the corresponding podAffinityTerm, in the range 1-100.',
                                  type: 'integer',
                                  format: 'int32',
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          requiredDuringSchedulingIgnoredDuringExecution: {
                            description:
                              'If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.',
                            type: ['array', 'null'],
                            items: {
                              description: 'Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running',
                              required: ['topologyKey'],
                              properties: {
                                labelSelector: {
                                  description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
                                  properties: {
                                    matchExpressions: {
                                      description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                        required: ['key', 'operator'],
                                        properties: {
                                          key: {
                                            description: 'key is the label key that the selector applies to.',
                                            type: 'string',
                                            'x-kubernetes-patch-merge-key': 'key',
                                            'x-kubernetes-patch-strategy': 'merge',
                                          },
                                          operator: {
                                            description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                            type: 'string',
                                          },
                                          values: {
                                            description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                                            type: ['array', 'null'],
                                            items: {
                                              type: ['string', 'null'],
                                            },
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    matchLabels: {
                                      description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                                      type: 'object',
                                      additionalProperties: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                namespaces: {
                                  description: 'namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod\'s namespace"',
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                                topologyKey: {
                                  description: 'This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
                                  type: 'string',
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                        },
                        additionalProperties: false,
                      },
                      podAntiAffinity: {
                        description: 'Pod anti affinity is a group of inter pod anti affinity scheduling rules.',
                        properties: {
                          preferredDuringSchedulingIgnoredDuringExecution: {
                            description:
                              'The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.',
                            type: ['array', 'null'],
                            items: {
                              description: 'The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)',
                              required: ['weight', 'podAffinityTerm'],
                              properties: {
                                podAffinityTerm: {
                                  description: 'Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running',
                                  required: ['topologyKey'],
                                  properties: {
                                    labelSelector: {
                                      description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
                                      properties: {
                                        matchExpressions: {
                                          description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                                          type: ['array', 'null'],
                                          items: {
                                            description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                            required: ['key', 'operator'],
                                            properties: {
                                              key: {
                                                description: 'key is the label key that the selector applies to.',
                                                type: 'string',
                                                'x-kubernetes-patch-merge-key': 'key',
                                                'x-kubernetes-patch-strategy': 'merge',
                                              },
                                              operator: {
                                                description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                type: 'string',
                                              },
                                              values: {
                                                description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                                                type: ['array', 'null'],
                                                items: {
                                                  type: ['string', 'null'],
                                                },
                                              },
                                            },
                                            additionalProperties: false,
                                          },
                                        },
                                        matchLabels: {
                                          description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                                          type: 'object',
                                          additionalProperties: {
                                            type: ['string', 'null'],
                                          },
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                    namespaces: {
                                      description: 'namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod\'s namespace"',
                                      type: ['array', 'null'],
                                      items: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                    topologyKey: {
                                      description: 'This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
                                      type: 'string',
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                weight: {
                                  description: 'weight associated with matching the corresponding podAffinityTerm, in the range 1-100.',
                                  type: 'integer',
                                  format: 'int32',
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          requiredDuringSchedulingIgnoredDuringExecution: {
                            description:
                              'If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.',
                            type: ['array', 'null'],
                            items: {
                              description: 'Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running',
                              required: ['topologyKey'],
                              properties: {
                                labelSelector: {
                                  description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
                                  properties: {
                                    matchExpressions: {
                                      description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                        required: ['key', 'operator'],
                                        properties: {
                                          key: {
                                            description: 'key is the label key that the selector applies to.',
                                            type: 'string',
                                            'x-kubernetes-patch-merge-key': 'key',
                                            'x-kubernetes-patch-strategy': 'merge',
                                          },
                                          operator: {
                                            description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                            type: 'string',
                                          },
                                          values: {
                                            description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                                            type: ['array', 'null'],
                                            items: {
                                              type: ['string', 'null'],
                                            },
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    matchLabels: {
                                      description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                                      type: 'object',
                                      additionalProperties: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                namespaces: {
                                  description: 'namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod\'s namespace"',
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                                topologyKey: {
                                  description: 'This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
                                  type: 'string',
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                        },
                        additionalProperties: false,
                      },
                    },
                    additionalProperties: false,
                  },
                  automountServiceAccountToken: {
                    description: 'AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.',
                    type: 'boolean',
                  },
                  containers: {
                    description: 'List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.',
                    type: 'array',
                    items: {
                      description: 'A single application container that you want to run within a pod.',
                      required: ['name'],
                      properties: {
                        args: {
                          description:
                            "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                          type: ['array', 'null'],
                          items: {
                            type: ['string', 'null'],
                          },
                        },
                        command: {
                          description:
                            "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                          type: ['array', 'null'],
                          items: {
                            type: ['string', 'null'],
                          },
                        },
                        env: {
                          description: 'List of environment variables to set in the container. Cannot be updated.',
                          type: ['array', 'null'],
                          items: {
                            description: 'EnvVar represents an environment variable present in a Container.',
                            required: ['name'],
                            properties: {
                              name: {
                                description: 'Name of the environment variable. Must be a C_IDENTIFIER.',
                                type: 'string',
                              },
                              value: {
                                description: 'Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".',
                                type: ['string', 'null'],
                              },
                              valueFrom: {
                                description: 'EnvVarSource represents a source for the value of an EnvVar.',
                                properties: {
                                  configMapKeyRef: {
                                    description: 'Selects a key from a ConfigMap.',
                                    required: ['key'],
                                    properties: {
                                      key: {
                                        description: 'The key to select.',
                                        type: 'string',
                                      },
                                      name: {
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                        type: ['string', 'null'],
                                      },
                                      optional: {
                                        description: "Specify whether the ConfigMap or it's key must be defined",
                                        type: 'boolean',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  fieldRef: {
                                    description: 'ObjectFieldSelector selects an APIVersioned field of an object.',
                                    required: ['fieldPath'],
                                    properties: {
                                      apiVersion: {
                                        description: 'Version of the schema the FieldPath is written in terms of, defaults to "v1".',
                                        type: ['string', 'null'],
                                      },
                                      fieldPath: {
                                        description: 'Path of the field to select in the specified API version.',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  resourceFieldRef: {
                                    description: 'ResourceFieldSelector represents container resources (cpu, memory) and their output format',
                                    required: ['resource'],
                                    properties: {
                                      containerName: {
                                        description: 'Container name: required for volumes, optional for env vars',
                                        type: ['string', 'null'],
                                      },
                                      divisor: {
                                        oneOf: [
                                          {
                                            type: ['string', 'null'],
                                          },
                                          {
                                            type: 'integer',
                                          },
                                        ],
                                      },
                                      resource: {
                                        description: 'Required: resource to select',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  secretKeyRef: {
                                    description: 'SecretKeySelector selects a key of a Secret.',
                                    required: ['key'],
                                    properties: {
                                      key: {
                                        description: 'The key of the secret to select from.  Must be a valid secret key.',
                                        type: 'string',
                                      },
                                      name: {
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                        type: ['string', 'null'],
                                      },
                                      optional: {
                                        description: "Specify whether the Secret or it's key must be defined",
                                        type: 'boolean',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                additionalProperties: false,
                              },
                            },
                            additionalProperties: false,
                          },
                          'x-kubernetes-patch-merge-key': 'name',
                          'x-kubernetes-patch-strategy': 'merge',
                        },
                        envFrom: {
                          description: 'List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.',
                          type: ['array', 'null'],
                          items: {
                            description: 'EnvFromSource represents the source of a set of ConfigMaps',
                            properties: {
                              configMapRef: {
                                description: "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
                                properties: {
                                  name: {
                                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                    type: ['string', 'null'],
                                  },
                                  optional: {
                                    description: 'Specify whether the ConfigMap must be defined',
                                    type: 'boolean',
                                  },
                                },
                                additionalProperties: false,
                              },
                              prefix: {
                                description: 'An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.',
                                type: ['string', 'null'],
                              },
                              secretRef: {
                                description: "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
                                properties: {
                                  name: {
                                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                    type: ['string', 'null'],
                                  },
                                  optional: {
                                    description: 'Specify whether the Secret must be defined',
                                    type: 'boolean',
                                  },
                                },
                                additionalProperties: false,
                              },
                            },
                            additionalProperties: false,
                          },
                        },
                        image: {
                          description: 'Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.',
                          type: ['string', 'null'],
                        },
                        imagePullPolicy: {
                          description: 'Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images',
                          type: ['string', 'null'],
                        },
                        lifecycle: {
                          description: 'Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.',
                          properties: {
                            postStart: {
                              description: 'Handler defines a specific action that should be taken',
                              properties: {
                                exec: {
                                  description: 'ExecAction describes a "run in container" action.',
                                  properties: {
                                    command: {
                                      description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                      type: ['array', 'null'],
                                      items: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                httpGet: {
                                  description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                                  required: ['port'],
                                  properties: {
                                    host: {
                                      description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                      type: ['string', 'null'],
                                    },
                                    httpHeaders: {
                                      description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                        required: ['name', 'value'],
                                        properties: {
                                          name: {
                                            description: 'The header field name',
                                            type: 'string',
                                          },
                                          value: {
                                            description: 'The header field value',
                                            type: 'string',
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    path: {
                                      description: 'Path to access on the HTTP server.',
                                      type: ['string', 'null'],
                                    },
                                    port: {
                                      oneOf: [
                                        {
                                          type: ['string', 'null'],
                                        },
                                        {
                                          type: 'integer',
                                        },
                                      ],
                                    },
                                    scheme: {
                                      description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                      type: ['string', 'null'],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                tcpSocket: {
                                  description: 'TCPSocketAction describes an action based on opening a socket',
                                  required: ['port'],
                                  properties: {
                                    host: {
                                      description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                      type: ['string', 'null'],
                                    },
                                    port: {
                                      oneOf: [
                                        {
                                          type: ['string', 'null'],
                                        },
                                        {
                                          type: 'integer',
                                        },
                                      ],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                              },
                              additionalProperties: false,
                            },
                            preStop: {
                              description: 'Handler defines a specific action that should be taken',
                              properties: {
                                exec: {
                                  description: 'ExecAction describes a "run in container" action.',
                                  properties: {
                                    command: {
                                      description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                      type: ['array', 'null'],
                                      items: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                httpGet: {
                                  description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                                  required: ['port'],
                                  properties: {
                                    host: {
                                      description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                      type: ['string', 'null'],
                                    },
                                    httpHeaders: {
                                      description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                        required: ['name', 'value'],
                                        properties: {
                                          name: {
                                            description: 'The header field name',
                                            type: 'string',
                                          },
                                          value: {
                                            description: 'The header field value',
                                            type: 'string',
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    path: {
                                      description: 'Path to access on the HTTP server.',
                                      type: ['string', 'null'],
                                    },
                                    port: {
                                      oneOf: [
                                        {
                                          type: ['string', 'null'],
                                        },
                                        {
                                          type: 'integer',
                                        },
                                      ],
                                    },
                                    scheme: {
                                      description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                      type: ['string', 'null'],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                tcpSocket: {
                                  description: 'TCPSocketAction describes an action based on opening a socket',
                                  required: ['port'],
                                  properties: {
                                    host: {
                                      description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                      type: ['string', 'null'],
                                    },
                                    port: {
                                      oneOf: [
                                        {
                                          type: ['string', 'null'],
                                        },
                                        {
                                          type: 'integer',
                                        },
                                      ],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          additionalProperties: false,
                        },
                        livenessProbe: {
                          description: 'Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.',
                          properties: {
                            exec: {
                              description: 'ExecAction describes a "run in container" action.',
                              properties: {
                                command: {
                                  description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                              },
                              additionalProperties: false,
                            },
                            failureThreshold: {
                              description: 'Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            httpGet: {
                              description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                              required: ['port'],
                              properties: {
                                host: {
                                  description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                  type: ['string', 'null'],
                                },
                                httpHeaders: {
                                  description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                  type: ['array', 'null'],
                                  items: {
                                    description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                    required: ['name', 'value'],
                                    properties: {
                                      name: {
                                        description: 'The header field name',
                                        type: 'string',
                                      },
                                      value: {
                                        description: 'The header field value',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                path: {
                                  description: 'Path to access on the HTTP server.',
                                  type: ['string', 'null'],
                                },
                                port: {
                                  oneOf: [
                                    {
                                      type: ['string', 'null'],
                                    },
                                    {
                                      type: 'integer',
                                    },
                                  ],
                                },
                                scheme: {
                                  description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            initialDelaySeconds: {
                              description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                              type: 'integer',
                              format: 'int32',
                            },
                            periodSeconds: {
                              description: 'How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            successThreshold: {
                              description: 'Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            tcpSocket: {
                              description: 'TCPSocketAction describes an action based on opening a socket',
                              required: ['port'],
                              properties: {
                                host: {
                                  description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                  type: ['string', 'null'],
                                },
                                port: {
                                  oneOf: [
                                    {
                                      type: ['string', 'null'],
                                    },
                                    {
                                      type: 'integer',
                                    },
                                  ],
                                },
                              },
                              additionalProperties: false,
                            },
                            timeoutSeconds: {
                              description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                              type: 'integer',
                              format: 'int32',
                            },
                          },
                          additionalProperties: false,
                        },
                        name: {
                          description: 'Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.',
                          type: 'string',
                        },
                        ports: {
                          description: 'List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.',
                          type: ['array', 'null'],
                          items: {
                            description: 'ContainerPort represents a network port in a single container.',
                            required: ['containerPort'],
                            properties: {
                              containerPort: {
                                description: "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
                                type: 'integer',
                                format: 'int32',
                              },
                              hostIP: {
                                description: 'What host IP to bind the external port to.',
                                type: ['string', 'null'],
                              },
                              hostPort: {
                                description: 'Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.',
                                type: 'integer',
                                format: 'int32',
                              },
                              name: {
                                description: 'If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.',
                                type: ['string', 'null'],
                              },
                              protocol: {
                                description: 'Protocol for port. Must be UDP or TCP. Defaults to "TCP".',
                                type: ['string', 'null'],
                              },
                            },
                            additionalProperties: false,
                          },
                          'x-kubernetes-patch-merge-key': 'containerPort',
                          'x-kubernetes-patch-strategy': 'merge',
                        },
                        readinessProbe: {
                          description: 'Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.',
                          properties: {
                            exec: {
                              description: 'ExecAction describes a "run in container" action.',
                              properties: {
                                command: {
                                  description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                              },
                              additionalProperties: false,
                            },
                            failureThreshold: {
                              description: 'Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            httpGet: {
                              description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                              required: ['port'],
                              properties: {
                                host: {
                                  description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                  type: ['string', 'null'],
                                },
                                httpHeaders: {
                                  description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                  type: ['array', 'null'],
                                  items: {
                                    description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                    required: ['name', 'value'],
                                    properties: {
                                      name: {
                                        description: 'The header field name',
                                        type: 'string',
                                      },
                                      value: {
                                        description: 'The header field value',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                path: {
                                  description: 'Path to access on the HTTP server.',
                                  type: ['string', 'null'],
                                },
                                port: {
                                  oneOf: [
                                    {
                                      type: ['string', 'null'],
                                    },
                                    {
                                      type: 'integer',
                                    },
                                  ],
                                },
                                scheme: {
                                  description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            initialDelaySeconds: {
                              description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                              type: 'integer',
                              format: 'int32',
                            },
                            periodSeconds: {
                              description: 'How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            successThreshold: {
                              description: 'Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            tcpSocket: {
                              description: 'TCPSocketAction describes an action based on opening a socket',
                              required: ['port'],
                              properties: {
                                host: {
                                  description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                  type: ['string', 'null'],
                                },
                                port: {
                                  oneOf: [
                                    {
                                      type: ['string', 'null'],
                                    },
                                    {
                                      type: 'integer',
                                    },
                                  ],
                                },
                              },
                              additionalProperties: false,
                            },
                            timeoutSeconds: {
                              description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                              type: 'integer',
                              format: 'int32',
                            },
                          },
                          additionalProperties: false,
                        },
                        resources: {
                          description: 'ResourceRequirements describes the compute resource requirements.',
                          properties: {
                            limits: {
                              description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/',
                              type: 'object',
                              additionalProperties: {
                                oneOf: [
                                  {
                                    type: ['string', 'null'],
                                  },
                                  {
                                    type: 'integer',
                                  },
                                ],
                              },
                            },
                            requests: {
                              description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/',
                              type: 'object',
                              additionalProperties: {
                                oneOf: [
                                  {
                                    type: ['string', 'null'],
                                  },
                                  {
                                    type: 'integer',
                                  },
                                ],
                              },
                            },
                          },
                          additionalProperties: false,
                        },
                        securityContext: {
                          description: 'SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.',
                          properties: {
                            allowPrivilegeEscalation: {
                              description: 'AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN',
                              type: 'boolean',
                            },
                            capabilities: {
                              description: 'Adds and removes POSIX capabilities from running containers.',
                              properties: {
                                add: {
                                  description: 'Added capabilities',
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                                drop: {
                                  description: 'Removed capabilities',
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                              },
                              additionalProperties: false,
                            },
                            privileged: {
                              description: 'Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.',
                              type: 'boolean',
                            },
                            readOnlyRootFilesystem: {
                              description: 'Whether this container has a read-only root filesystem. Default is false.',
                              type: 'boolean',
                            },
                            runAsGroup: {
                              description: 'The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                              type: 'integer',
                              format: 'int64',
                            },
                            runAsNonRoot: {
                              description: 'Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                              type: 'boolean',
                            },
                            runAsUser: {
                              description: 'The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                              type: 'integer',
                              format: 'int64',
                            },
                            seLinuxOptions: {
                              description: 'SELinuxOptions are the labels to be applied to the container',
                              properties: {
                                level: {
                                  description: 'Level is SELinux level label that applies to the container.',
                                  type: ['string', 'null'],
                                },
                                role: {
                                  description: 'Role is a SELinux role label that applies to the container.',
                                  type: ['string', 'null'],
                                },
                                type: {
                                  description: 'Type is a SELinux type label that applies to the container.',
                                  type: ['string', 'null'],
                                },
                                user: {
                                  description: 'User is a SELinux user label that applies to the container.',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          additionalProperties: false,
                        },
                        stdin: {
                          description: 'Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.',
                          type: 'boolean',
                        },
                        stdinOnce: {
                          description:
                            'Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false',
                          type: 'boolean',
                        },
                        terminationMessagePath: {
                          description: "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                          type: ['string', 'null'],
                        },
                        terminationMessagePolicy: {
                          description: 'Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.',
                          type: ['string', 'null'],
                        },
                        tty: {
                          description: "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                          type: 'boolean',
                        },
                        volumeDevices: {
                          description: 'volumeDevices is the list of block devices to be used by the container. This is an alpha feature and may change in the future.',
                          type: ['array', 'null'],
                          items: {
                            description: 'volumeDevice describes a mapping of a raw block device within a container.',
                            required: ['name', 'devicePath'],
                            properties: {
                              devicePath: {
                                description: 'devicePath is the path inside of the container that the device will be mapped to.',
                                type: 'string',
                              },
                              name: {
                                description: 'name must match the name of a persistentVolumeClaim in the pod',
                                type: 'string',
                              },
                            },
                            additionalProperties: false,
                          },
                          'x-kubernetes-patch-merge-key': 'devicePath',
                          'x-kubernetes-patch-strategy': 'merge',
                        },
                        volumeMounts: {
                          description: "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                          type: ['array', 'null'],
                          items: {
                            description: 'VolumeMount describes a mounting of a Volume within a container.',
                            required: ['name', 'mountPath'],
                            properties: {
                              mountPath: {
                                description: "Path within the container at which the volume should be mounted.  Must not contain ':'.",
                                type: 'string',
                              },
                              mountPropagation: {
                                description: 'mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.',
                                type: ['string', 'null'],
                              },
                              name: {
                                description: 'This must match the Name of a Volume.',
                                type: 'string',
                              },
                              readOnly: {
                                description: 'Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.',
                                type: 'boolean',
                              },
                              subPath: {
                                description: 'Path within the volume from which the container\'s volume should be mounted. Defaults to "" (volume\'s root).',
                                type: ['string', 'null'],
                              },
                            },
                            additionalProperties: false,
                          },
                          'x-kubernetes-patch-merge-key': 'mountPath',
                          'x-kubernetes-patch-strategy': 'merge',
                        },
                        workingDir: {
                          description: "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                          type: ['string', 'null'],
                        },
                      },
                      additionalProperties: false,
                    },
                    'x-kubernetes-patch-merge-key': 'name',
                    'x-kubernetes-patch-strategy': 'merge',
                  },
                  dnsConfig: {
                    description: 'PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.',
                    properties: {
                      nameservers: {
                        description: 'A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.',
                        type: ['array', 'null'],
                        items: {
                          type: ['string', 'null'],
                        },
                      },
                      options: {
                        description: 'A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.',
                        type: ['array', 'null'],
                        items: {
                          description: 'PodDNSConfigOption defines DNS resolver options of a pod.',
                          properties: {
                            name: {
                              description: 'Required.',
                              type: ['string', 'null'],
                            },
                            value: {
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                      },
                      searches: {
                        description: 'A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.',
                        type: ['array', 'null'],
                        items: {
                          type: ['string', 'null'],
                        },
                      },
                    },
                    additionalProperties: false,
                  },
                  dnsPolicy: {
                    description: "Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.",
                    type: ['string', 'null'],
                  },
                  hostAliases: {
                    description: "HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.",
                    type: ['array', 'null'],
                    items: {
                      description: "HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.",
                      properties: {
                        hostnames: {
                          description: 'Hostnames for the above IP address.',
                          type: ['array', 'null'],
                          items: {
                            type: ['string', 'null'],
                          },
                        },
                        ip: {
                          description: 'IP address of the host file entry.',
                          type: ['string', 'null'],
                        },
                      },
                      additionalProperties: false,
                    },
                    'x-kubernetes-patch-merge-key': 'ip',
                    'x-kubernetes-patch-strategy': 'merge',
                  },
                  hostIPC: {
                    description: "Use the host's ipc namespace. Optional: Default to false.",
                    type: 'boolean',
                  },
                  hostNetwork: {
                    description: "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.",
                    type: 'boolean',
                  },
                  hostPID: {
                    description: "Use the host's pid namespace. Optional: Default to false.",
                    type: 'boolean',
                  },
                  hostname: {
                    description: "Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.",
                    type: ['string', 'null'],
                  },
                  imagePullSecrets: {
                    description: 'ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod',
                    type: ['array', 'null'],
                    items: {
                      description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                      properties: {
                        name: {
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                          type: ['string', 'null'],
                        },
                      },
                      additionalProperties: false,
                    },
                    'x-kubernetes-patch-merge-key': 'name',
                    'x-kubernetes-patch-strategy': 'merge',
                  },
                  initContainers: {
                    description:
                      'List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/',
                    type: ['array', 'null'],
                    items: {
                      description: 'A single application container that you want to run within a pod.',
                      required: ['name'],
                      properties: {
                        args: {
                          description:
                            "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                          type: ['array', 'null'],
                          items: {
                            type: ['string', 'null'],
                          },
                        },
                        command: {
                          description:
                            "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                          type: ['array', 'null'],
                          items: {
                            type: ['string', 'null'],
                          },
                        },
                        env: {
                          description: 'List of environment variables to set in the container. Cannot be updated.',
                          type: ['array', 'null'],
                          items: {
                            description: 'EnvVar represents an environment variable present in a Container.',
                            required: ['name'],
                            properties: {
                              name: {
                                description: 'Name of the environment variable. Must be a C_IDENTIFIER.',
                                type: 'string',
                              },
                              value: {
                                description: 'Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".',
                                type: ['string', 'null'],
                              },
                              valueFrom: {
                                description: 'EnvVarSource represents a source for the value of an EnvVar.',
                                properties: {
                                  configMapKeyRef: {
                                    description: 'Selects a key from a ConfigMap.',
                                    required: ['key'],
                                    properties: {
                                      key: {
                                        description: 'The key to select.',
                                        type: 'string',
                                      },
                                      name: {
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                        type: ['string', 'null'],
                                      },
                                      optional: {
                                        description: "Specify whether the ConfigMap or it's key must be defined",
                                        type: 'boolean',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  fieldRef: {
                                    description: 'ObjectFieldSelector selects an APIVersioned field of an object.',
                                    required: ['fieldPath'],
                                    properties: {
                                      apiVersion: {
                                        description: 'Version of the schema the FieldPath is written in terms of, defaults to "v1".',
                                        type: ['string', 'null'],
                                      },
                                      fieldPath: {
                                        description: 'Path of the field to select in the specified API version.',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  resourceFieldRef: {
                                    description: 'ResourceFieldSelector represents container resources (cpu, memory) and their output format',
                                    required: ['resource'],
                                    properties: {
                                      containerName: {
                                        description: 'Container name: required for volumes, optional for env vars',
                                        type: ['string', 'null'],
                                      },
                                      divisor: {
                                        oneOf: [
                                          {
                                            type: ['string', 'null'],
                                          },
                                          {
                                            type: 'integer',
                                          },
                                        ],
                                      },
                                      resource: {
                                        description: 'Required: resource to select',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  secretKeyRef: {
                                    description: 'SecretKeySelector selects a key of a Secret.',
                                    required: ['key'],
                                    properties: {
                                      key: {
                                        description: 'The key of the secret to select from.  Must be a valid secret key.',
                                        type: 'string',
                                      },
                                      name: {
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                        type: ['string', 'null'],
                                      },
                                      optional: {
                                        description: "Specify whether the Secret or it's key must be defined",
                                        type: 'boolean',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                additionalProperties: false,
                              },
                            },
                            additionalProperties: false,
                          },
                          'x-kubernetes-patch-merge-key': 'name',
                          'x-kubernetes-patch-strategy': 'merge',
                        },
                        envFrom: {
                          description: 'List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.',
                          type: ['array', 'null'],
                          items: {
                            description: 'EnvFromSource represents the source of a set of ConfigMaps',
                            properties: {
                              configMapRef: {
                                description: "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
                                properties: {
                                  name: {
                                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                    type: ['string', 'null'],
                                  },
                                  optional: {
                                    description: 'Specify whether the ConfigMap must be defined',
                                    type: 'boolean',
                                  },
                                },
                                additionalProperties: false,
                              },
                              prefix: {
                                description: 'An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.',
                                type: ['string', 'null'],
                              },
                              secretRef: {
                                description: "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
                                properties: {
                                  name: {
                                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                    type: ['string', 'null'],
                                  },
                                  optional: {
                                    description: 'Specify whether the Secret must be defined',
                                    type: 'boolean',
                                  },
                                },
                                additionalProperties: false,
                              },
                            },
                            additionalProperties: false,
                          },
                        },
                        image: {
                          description: 'Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.',
                          type: ['string', 'null'],
                        },
                        imagePullPolicy: {
                          description: 'Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images',
                          type: ['string', 'null'],
                        },
                        lifecycle: {
                          description: 'Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.',
                          properties: {
                            postStart: {
                              description: 'Handler defines a specific action that should be taken',
                              properties: {
                                exec: {
                                  description: 'ExecAction describes a "run in container" action.',
                                  properties: {
                                    command: {
                                      description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                      type: ['array', 'null'],
                                      items: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                httpGet: {
                                  description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                                  required: ['port'],
                                  properties: {
                                    host: {
                                      description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                      type: ['string', 'null'],
                                    },
                                    httpHeaders: {
                                      description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                        required: ['name', 'value'],
                                        properties: {
                                          name: {
                                            description: 'The header field name',
                                            type: 'string',
                                          },
                                          value: {
                                            description: 'The header field value',
                                            type: 'string',
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    path: {
                                      description: 'Path to access on the HTTP server.',
                                      type: ['string', 'null'],
                                    },
                                    port: {
                                      oneOf: [
                                        {
                                          type: ['string', 'null'],
                                        },
                                        {
                                          type: 'integer',
                                        },
                                      ],
                                    },
                                    scheme: {
                                      description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                      type: ['string', 'null'],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                tcpSocket: {
                                  description: 'TCPSocketAction describes an action based on opening a socket',
                                  required: ['port'],
                                  properties: {
                                    host: {
                                      description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                      type: ['string', 'null'],
                                    },
                                    port: {
                                      oneOf: [
                                        {
                                          type: ['string', 'null'],
                                        },
                                        {
                                          type: 'integer',
                                        },
                                      ],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                              },
                              additionalProperties: false,
                            },
                            preStop: {
                              description: 'Handler defines a specific action that should be taken',
                              properties: {
                                exec: {
                                  description: 'ExecAction describes a "run in container" action.',
                                  properties: {
                                    command: {
                                      description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                      type: ['array', 'null'],
                                      items: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                httpGet: {
                                  description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                                  required: ['port'],
                                  properties: {
                                    host: {
                                      description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                      type: ['string', 'null'],
                                    },
                                    httpHeaders: {
                                      description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                        required: ['name', 'value'],
                                        properties: {
                                          name: {
                                            description: 'The header field name',
                                            type: 'string',
                                          },
                                          value: {
                                            description: 'The header field value',
                                            type: 'string',
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    path: {
                                      description: 'Path to access on the HTTP server.',
                                      type: ['string', 'null'],
                                    },
                                    port: {
                                      oneOf: [
                                        {
                                          type: ['string', 'null'],
                                        },
                                        {
                                          type: 'integer',
                                        },
                                      ],
                                    },
                                    scheme: {
                                      description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                      type: ['string', 'null'],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                tcpSocket: {
                                  description: 'TCPSocketAction describes an action based on opening a socket',
                                  required: ['port'],
                                  properties: {
                                    host: {
                                      description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                      type: ['string', 'null'],
                                    },
                                    port: {
                                      oneOf: [
                                        {
                                          type: ['string', 'null'],
                                        },
                                        {
                                          type: 'integer',
                                        },
                                      ],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          additionalProperties: false,
                        },
                        livenessProbe: {
                          description: 'Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.',
                          properties: {
                            exec: {
                              description: 'ExecAction describes a "run in container" action.',
                              properties: {
                                command: {
                                  description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                              },
                              additionalProperties: false,
                            },
                            failureThreshold: {
                              description: 'Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            httpGet: {
                              description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                              required: ['port'],
                              properties: {
                                host: {
                                  description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                  type: ['string', 'null'],
                                },
                                httpHeaders: {
                                  description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                  type: ['array', 'null'],
                                  items: {
                                    description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                    required: ['name', 'value'],
                                    properties: {
                                      name: {
                                        description: 'The header field name',
                                        type: 'string',
                                      },
                                      value: {
                                        description: 'The header field value',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                path: {
                                  description: 'Path to access on the HTTP server.',
                                  type: ['string', 'null'],
                                },
                                port: {
                                  oneOf: [
                                    {
                                      type: ['string', 'null'],
                                    },
                                    {
                                      type: 'integer',
                                    },
                                  ],
                                },
                                scheme: {
                                  description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            initialDelaySeconds: {
                              description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                              type: 'integer',
                              format: 'int32',
                            },
                            periodSeconds: {
                              description: 'How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            successThreshold: {
                              description: 'Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            tcpSocket: {
                              description: 'TCPSocketAction describes an action based on opening a socket',
                              required: ['port'],
                              properties: {
                                host: {
                                  description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                  type: ['string', 'null'],
                                },
                                port: {
                                  oneOf: [
                                    {
                                      type: ['string', 'null'],
                                    },
                                    {
                                      type: 'integer',
                                    },
                                  ],
                                },
                              },
                              additionalProperties: false,
                            },
                            timeoutSeconds: {
                              description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                              type: 'integer',
                              format: 'int32',
                            },
                          },
                          additionalProperties: false,
                        },
                        name: {
                          description: 'Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.',
                          type: 'string',
                        },
                        ports: {
                          description: 'List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.',
                          type: ['array', 'null'],
                          items: {
                            description: 'ContainerPort represents a network port in a single container.',
                            required: ['containerPort'],
                            properties: {
                              containerPort: {
                                description: "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
                                type: 'integer',
                                format: 'int32',
                              },
                              hostIP: {
                                description: 'What host IP to bind the external port to.',
                                type: ['string', 'null'],
                              },
                              hostPort: {
                                description: 'Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.',
                                type: 'integer',
                                format: 'int32',
                              },
                              name: {
                                description: 'If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.',
                                type: ['string', 'null'],
                              },
                              protocol: {
                                description: 'Protocol for port. Must be UDP or TCP. Defaults to "TCP".',
                                type: ['string', 'null'],
                              },
                            },
                            additionalProperties: false,
                          },
                          'x-kubernetes-patch-merge-key': 'containerPort',
                          'x-kubernetes-patch-strategy': 'merge',
                        },
                        readinessProbe: {
                          description: 'Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.',
                          properties: {
                            exec: {
                              description: 'ExecAction describes a "run in container" action.',
                              properties: {
                                command: {
                                  description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                              },
                              additionalProperties: false,
                            },
                            failureThreshold: {
                              description: 'Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            httpGet: {
                              description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                              required: ['port'],
                              properties: {
                                host: {
                                  description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                  type: ['string', 'null'],
                                },
                                httpHeaders: {
                                  description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                  type: ['array', 'null'],
                                  items: {
                                    description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                    required: ['name', 'value'],
                                    properties: {
                                      name: {
                                        description: 'The header field name',
                                        type: 'string',
                                      },
                                      value: {
                                        description: 'The header field value',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                path: {
                                  description: 'Path to access on the HTTP server.',
                                  type: ['string', 'null'],
                                },
                                port: {
                                  oneOf: [
                                    {
                                      type: ['string', 'null'],
                                    },
                                    {
                                      type: 'integer',
                                    },
                                  ],
                                },
                                scheme: {
                                  description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            initialDelaySeconds: {
                              description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                              type: 'integer',
                              format: 'int32',
                            },
                            periodSeconds: {
                              description: 'How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            successThreshold: {
                              description: 'Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            tcpSocket: {
                              description: 'TCPSocketAction describes an action based on opening a socket',
                              required: ['port'],
                              properties: {
                                host: {
                                  description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                  type: ['string', 'null'],
                                },
                                port: {
                                  oneOf: [
                                    {
                                      type: ['string', 'null'],
                                    },
                                    {
                                      type: 'integer',
                                    },
                                  ],
                                },
                              },
                              additionalProperties: false,
                            },
                            timeoutSeconds: {
                              description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                              type: 'integer',
                              format: 'int32',
                            },
                          },
                          additionalProperties: false,
                        },
                        resources: {
                          description: 'ResourceRequirements describes the compute resource requirements.',
                          properties: {
                            limits: {
                              description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/',
                              type: 'object',
                              additionalProperties: {
                                oneOf: [
                                  {
                                    type: ['string', 'null'],
                                  },
                                  {
                                    type: 'integer',
                                  },
                                ],
                              },
                            },
                            requests: {
                              description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/',
                              type: 'object',
                              additionalProperties: {
                                oneOf: [
                                  {
                                    type: ['string', 'null'],
                                  },
                                  {
                                    type: 'integer',
                                  },
                                ],
                              },
                            },
                          },
                          additionalProperties: false,
                        },
                        securityContext: {
                          description: 'SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.',
                          properties: {
                            allowPrivilegeEscalation: {
                              description: 'AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN',
                              type: 'boolean',
                            },
                            capabilities: {
                              description: 'Adds and removes POSIX capabilities from running containers.',
                              properties: {
                                add: {
                                  description: 'Added capabilities',
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                                drop: {
                                  description: 'Removed capabilities',
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                              },
                              additionalProperties: false,
                            },
                            privileged: {
                              description: 'Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.',
                              type: 'boolean',
                            },
                            readOnlyRootFilesystem: {
                              description: 'Whether this container has a read-only root filesystem. Default is false.',
                              type: 'boolean',
                            },
                            runAsGroup: {
                              description: 'The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                              type: 'integer',
                              format: 'int64',
                            },
                            runAsNonRoot: {
                              description: 'Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                              type: 'boolean',
                            },
                            runAsUser: {
                              description: 'The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                              type: 'integer',
                              format: 'int64',
                            },
                            seLinuxOptions: {
                              description: 'SELinuxOptions are the labels to be applied to the container',
                              properties: {
                                level: {
                                  description: 'Level is SELinux level label that applies to the container.',
                                  type: ['string', 'null'],
                                },
                                role: {
                                  description: 'Role is a SELinux role label that applies to the container.',
                                  type: ['string', 'null'],
                                },
                                type: {
                                  description: 'Type is a SELinux type label that applies to the container.',
                                  type: ['string', 'null'],
                                },
                                user: {
                                  description: 'User is a SELinux user label that applies to the container.',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          additionalProperties: false,
                        },
                        stdin: {
                          description: 'Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.',
                          type: 'boolean',
                        },
                        stdinOnce: {
                          description:
                            'Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false',
                          type: 'boolean',
                        },
                        terminationMessagePath: {
                          description: "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                          type: ['string', 'null'],
                        },
                        terminationMessagePolicy: {
                          description: 'Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.',
                          type: ['string', 'null'],
                        },
                        tty: {
                          description: "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                          type: 'boolean',
                        },
                        volumeDevices: {
                          description: 'volumeDevices is the list of block devices to be used by the container. This is an alpha feature and may change in the future.',
                          type: ['array', 'null'],
                          items: {
                            description: 'volumeDevice describes a mapping of a raw block device within a container.',
                            required: ['name', 'devicePath'],
                            properties: {
                              devicePath: {
                                description: 'devicePath is the path inside of the container that the device will be mapped to.',
                                type: 'string',
                              },
                              name: {
                                description: 'name must match the name of a persistentVolumeClaim in the pod',
                                type: 'string',
                              },
                            },
                            additionalProperties: false,
                          },
                          'x-kubernetes-patch-merge-key': 'devicePath',
                          'x-kubernetes-patch-strategy': 'merge',
                        },
                        volumeMounts: {
                          description: "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                          type: ['array', 'null'],
                          items: {
                            description: 'VolumeMount describes a mounting of a Volume within a container.',
                            required: ['name', 'mountPath'],
                            properties: {
                              mountPath: {
                                description: "Path within the container at which the volume should be mounted.  Must not contain ':'.",
                                type: 'string',
                              },
                              mountPropagation: {
                                description: 'mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.',
                                type: ['string', 'null'],
                              },
                              name: {
                                description: 'This must match the Name of a Volume.',
                                type: 'string',
                              },
                              readOnly: {
                                description: 'Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.',
                                type: 'boolean',
                              },
                              subPath: {
                                description: 'Path within the volume from which the container\'s volume should be mounted. Defaults to "" (volume\'s root).',
                                type: ['string', 'null'],
                              },
                            },
                            additionalProperties: false,
                          },
                          'x-kubernetes-patch-merge-key': 'mountPath',
                          'x-kubernetes-patch-strategy': 'merge',
                        },
                        workingDir: {
                          description: "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                          type: ['string', 'null'],
                        },
                      },
                      additionalProperties: false,
                    },
                    'x-kubernetes-patch-merge-key': 'name',
                    'x-kubernetes-patch-strategy': 'merge',
                  },
                  nodeName: {
                    description: 'NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.',
                    type: ['string', 'null'],
                  },
                  nodeSelector: {
                    description: "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
                    type: 'object',
                    additionalProperties: {
                      type: ['string', 'null'],
                    },
                  },
                  priority: {
                    description: 'The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.',
                    type: 'integer',
                    format: 'int32',
                  },
                  priorityClassName: {
                    description: 'If specified, indicates the pod\'s priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.',
                    type: ['string', 'null'],
                  },
                  readinessGates: {
                    description: 'If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://github.com/kubernetes/community/blob/master/keps/sig-network/0007-pod-ready%2B%2B.md',
                    type: ['array', 'null'],
                    items: {
                      description: 'PodReadinessGate contains the reference to a pod condition',
                      required: ['conditionType'],
                      properties: {
                        conditionType: {
                          description: "ConditionType refers to a condition in the pod's condition list with matching type.",
                          type: 'string',
                        },
                      },
                      additionalProperties: false,
                    },
                  },
                  restartPolicy: {
                    description: 'Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy',
                    type: ['string', 'null'],
                  },
                  schedulerName: {
                    description: 'If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.',
                    type: ['string', 'null'],
                  },
                  securityContext: {
                    description: 'PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.',
                    properties: {
                      fsGroup: {
                        description: "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume.",
                        type: 'integer',
                        format: 'int64',
                      },
                      runAsGroup: {
                        description: 'The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.',
                        type: 'integer',
                        format: 'int64',
                      },
                      runAsNonRoot: {
                        description: 'Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                        type: 'boolean',
                      },
                      runAsUser: {
                        description: 'The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.',
                        type: 'integer',
                        format: 'int64',
                      },
                      seLinuxOptions: {
                        description: 'SELinuxOptions are the labels to be applied to the container',
                        properties: {
                          level: {
                            description: 'Level is SELinux level label that applies to the container.',
                            type: ['string', 'null'],
                          },
                          role: {
                            description: 'Role is a SELinux role label that applies to the container.',
                            type: ['string', 'null'],
                          },
                          type: {
                            description: 'Type is a SELinux type label that applies to the container.',
                            type: ['string', 'null'],
                          },
                          user: {
                            description: 'User is a SELinux user label that applies to the container.',
                            type: ['string', 'null'],
                          },
                        },
                        additionalProperties: false,
                      },
                      supplementalGroups: {
                        description: "A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.",
                        type: ['array', 'null'],
                        items: {
                          type: 'integer',
                          format: 'int64',
                        },
                      },
                      sysctls: {
                        description: 'Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.',
                        type: ['array', 'null'],
                        items: {
                          description: 'Sysctl defines a kernel parameter to be set',
                          required: ['name', 'value'],
                          properties: {
                            name: {
                              description: 'Name of a property to set',
                              type: 'string',
                            },
                            value: {
                              description: 'Value of a property to set',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                      },
                    },
                    additionalProperties: false,
                  },
                  serviceAccount: {
                    description: 'DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.',
                    type: ['string', 'null'],
                  },
                  serviceAccountName: {
                    description: 'ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/',
                    type: ['string', 'null'],
                  },
                  shareProcessNamespace: {
                    description: 'Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false. This field is alpha-level and is honored only by servers that enable the PodShareProcessNamespace feature.',
                    type: 'boolean',
                  },
                  subdomain: {
                    description: 'If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.',
                    type: ['string', 'null'],
                  },
                  terminationGracePeriodSeconds: {
                    description:
                      'Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.',
                    type: 'integer',
                    format: 'int64',
                  },
                  tolerations: {
                    description: "If specified, the pod's tolerations.",
                    type: ['array', 'null'],
                    items: {
                      description: 'The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.',
                      properties: {
                        effect: {
                          description: 'Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.',
                          type: ['string', 'null'],
                        },
                        key: {
                          description: 'Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.',
                          type: ['string', 'null'],
                        },
                        operator: {
                          description: "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                          type: ['string', 'null'],
                        },
                        tolerationSeconds: {
                          description: 'TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.',
                          type: 'integer',
                          format: 'int64',
                        },
                        value: {
                          description: 'Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.',
                          type: ['string', 'null'],
                        },
                      },
                      additionalProperties: false,
                    },
                  },
                  volumes: {
                    description: 'List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes',
                    type: ['array', 'null'],
                    items: {
                      description: 'Volume represents a named volume in a pod that may be accessed by any container in the pod.',
                      required: ['name'],
                      properties: {
                        awsElasticBlockStore: {
                          description: 'Represents a Persistent Disk resource in AWS.\n\nAn AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.',
                          required: ['volumeID'],
                          properties: {
                            fsType: {
                              description: 'Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore',
                              type: ['string', 'null'],
                            },
                            partition: {
                              description: 'The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).',
                              type: 'integer',
                              format: 'int32',
                            },
                            readOnly: {
                              description: 'Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore',
                              type: 'boolean',
                            },
                            volumeID: {
                              description: 'Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        azureDisk: {
                          description: 'AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.',
                          required: ['diskName', 'diskURI'],
                          properties: {
                            cachingMode: {
                              description: 'Host Caching mode: None, Read Only, Read Write.',
                              type: ['string', 'null'],
                            },
                            diskName: {
                              description: 'The Name of the data disk in the blob storage',
                              type: 'string',
                            },
                            diskURI: {
                              description: 'The URI the data disk in the blob storage',
                              type: 'string',
                            },
                            fsType: {
                              description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                              type: ['string', 'null'],
                            },
                            kind: {
                              description: 'Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared',
                              type: ['string', 'null'],
                            },
                            readOnly: {
                              description: 'Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                              type: 'boolean',
                            },
                          },
                          additionalProperties: false,
                        },
                        azureFile: {
                          description: 'AzureFile represents an Azure File Service mount on the host and bind mount to the pod.',
                          required: ['secretName', 'shareName'],
                          properties: {
                            readOnly: {
                              description: 'Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                              type: 'boolean',
                            },
                            secretName: {
                              description: 'the name of secret that contains Azure Storage Account Name and Key',
                              type: 'string',
                            },
                            shareName: {
                              description: 'Share Name',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        cephfs: {
                          description: 'Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.',
                          required: ['monitors'],
                          properties: {
                            monitors: {
                              description: 'Required: Monitors is a collection of Ceph monitors More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it',
                              type: 'array',
                              items: {
                                type: ['string', 'null'],
                              },
                            },
                            path: {
                              description: 'Optional: Used as the mounted root, rather than the full Ceph tree, default is /',
                              type: ['string', 'null'],
                            },
                            readOnly: {
                              description: 'Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it',
                              type: 'boolean',
                            },
                            secretFile: {
                              description: 'Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it',
                              type: ['string', 'null'],
                            },
                            secretRef: {
                              description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                              properties: {
                                name: {
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            user: {
                              description: 'Optional: User is the rados user name, default is admin More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                        cinder: {
                          description: 'Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.',
                          required: ['volumeID'],
                          properties: {
                            fsType: {
                              description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md',
                              type: ['string', 'null'],
                            },
                            readOnly: {
                              description: 'Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md',
                              type: 'boolean',
                            },
                            secretRef: {
                              description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                              properties: {
                                name: {
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            volumeID: {
                              description: 'volume id used to identify the volume in cinder More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        configMap: {
                          description: "Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.",
                          properties: {
                            defaultMode: {
                              description: 'Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                              type: 'integer',
                              format: 'int32',
                            },
                            items: {
                              description:
                                "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                              type: ['array', 'null'],
                              items: {
                                description: 'Maps a string key to a path within a volume.',
                                required: ['key', 'path'],
                                properties: {
                                  key: {
                                    description: 'The key to project.',
                                    type: 'string',
                                  },
                                  mode: {
                                    description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                    type: 'integer',
                                    format: 'int32',
                                  },
                                  path: {
                                    description: "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                                    type: 'string',
                                  },
                                },
                                additionalProperties: false,
                              },
                            },
                            name: {
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                              type: ['string', 'null'],
                            },
                            optional: {
                              description: "Specify whether the ConfigMap or it's keys must be defined",
                              type: 'boolean',
                            },
                          },
                          additionalProperties: false,
                        },
                        downwardAPI: {
                          description: 'DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.',
                          properties: {
                            defaultMode: {
                              description: 'Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                              type: 'integer',
                              format: 'int32',
                            },
                            items: {
                              description: 'Items is a list of downward API volume file',
                              type: ['array', 'null'],
                              items: {
                                description: 'DownwardAPIVolumeFile represents information to create the file containing the pod field',
                                required: ['path'],
                                properties: {
                                  fieldRef: {
                                    description: 'ObjectFieldSelector selects an APIVersioned field of an object.',
                                    required: ['fieldPath'],
                                    properties: {
                                      apiVersion: {
                                        description: 'Version of the schema the FieldPath is written in terms of, defaults to "v1".',
                                        type: ['string', 'null'],
                                      },
                                      fieldPath: {
                                        description: 'Path of the field to select in the specified API version.',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  mode: {
                                    description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                    type: 'integer',
                                    format: 'int32',
                                  },
                                  path: {
                                    description: "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
                                    type: 'string',
                                  },
                                  resourceFieldRef: {
                                    description: 'ResourceFieldSelector represents container resources (cpu, memory) and their output format',
                                    required: ['resource'],
                                    properties: {
                                      containerName: {
                                        description: 'Container name: required for volumes, optional for env vars',
                                        type: ['string', 'null'],
                                      },
                                      divisor: {
                                        oneOf: [
                                          {
                                            type: ['string', 'null'],
                                          },
                                          {
                                            type: 'integer',
                                          },
                                        ],
                                      },
                                      resource: {
                                        description: 'Required: resource to select',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                additionalProperties: false,
                              },
                            },
                          },
                          additionalProperties: false,
                        },
                        emptyDir: {
                          description: 'Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.',
                          properties: {
                            medium: {
                              description: 'What type of storage medium should back this directory. The default is "" which means to use the node\'s default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir',
                              type: ['string', 'null'],
                            },
                            sizeLimit: {
                              oneOf: [
                                {
                                  type: ['string', 'null'],
                                },
                                {
                                  type: 'integer',
                                },
                              ],
                            },
                          },
                          additionalProperties: false,
                        },
                        fc: {
                          description: 'Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.',
                          properties: {
                            fsType: {
                              description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                              type: ['string', 'null'],
                            },
                            lun: {
                              description: 'Optional: FC target lun number',
                              type: 'integer',
                              format: 'int32',
                            },
                            readOnly: {
                              description: 'Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                              type: 'boolean',
                            },
                            targetWWNs: {
                              description: 'Optional: FC target worldwide names (WWNs)',
                              type: ['array', 'null'],
                              items: {
                                type: ['string', 'null'],
                              },
                            },
                            wwids: {
                              description: 'Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.',
                              type: ['array', 'null'],
                              items: {
                                type: ['string', 'null'],
                              },
                            },
                          },
                          additionalProperties: false,
                        },
                        flexVolume: {
                          description: 'FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.',
                          required: ['driver'],
                          properties: {
                            driver: {
                              description: 'Driver is the name of the driver to use for this volume.',
                              type: 'string',
                            },
                            fsType: {
                              description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.',
                              type: ['string', 'null'],
                            },
                            options: {
                              description: 'Optional: Extra command options if any.',
                              type: 'object',
                              additionalProperties: {
                                type: ['string', 'null'],
                              },
                            },
                            readOnly: {
                              description: 'Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                              type: 'boolean',
                            },
                            secretRef: {
                              description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                              properties: {
                                name: {
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          additionalProperties: false,
                        },
                        flocker: {
                          description: 'Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.',
                          properties: {
                            datasetName: {
                              description: 'Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated',
                              type: ['string', 'null'],
                            },
                            datasetUUID: {
                              description: 'UUID of the dataset. This is unique identifier of a Flocker dataset',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                        gcePersistentDisk: {
                          description: 'Represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.',
                          required: ['pdName'],
                          properties: {
                            fsType: {
                              description: 'Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
                              type: ['string', 'null'],
                            },
                            partition: {
                              description: 'The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
                              type: 'integer',
                              format: 'int32',
                            },
                            pdName: {
                              description: 'Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
                              type: 'string',
                            },
                            readOnly: {
                              description: 'ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
                              type: 'boolean',
                            },
                          },
                          additionalProperties: false,
                        },
                        gitRepo: {
                          description: "Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.\n\nDEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.",
                          required: ['repository'],
                          properties: {
                            directory: {
                              description: "Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.",
                              type: ['string', 'null'],
                            },
                            repository: {
                              description: 'Repository URL',
                              type: 'string',
                            },
                            revision: {
                              description: 'Commit hash for the specified revision.',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                        glusterfs: {
                          description: 'Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.',
                          required: ['endpoints', 'path'],
                          properties: {
                            endpoints: {
                              description: 'EndpointsName is the endpoint name that details Glusterfs topology. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod',
                              type: 'string',
                            },
                            path: {
                              description: 'Path is the Glusterfs volume path. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod',
                              type: 'string',
                            },
                            readOnly: {
                              description: 'ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod',
                              type: 'boolean',
                            },
                          },
                          additionalProperties: false,
                        },
                        hostPath: {
                          description: 'Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.',
                          required: ['path'],
                          properties: {
                            path: {
                              description: 'Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath',
                              type: 'string',
                            },
                            type: {
                              description: 'Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                        iscsi: {
                          description: 'Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.',
                          required: ['targetPortal', 'iqn', 'lun'],
                          properties: {
                            chapAuthDiscovery: {
                              description: 'whether support iSCSI Discovery CHAP authentication',
                              type: 'boolean',
                            },
                            chapAuthSession: {
                              description: 'whether support iSCSI Session CHAP authentication',
                              type: 'boolean',
                            },
                            fsType: {
                              description: 'Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi',
                              type: ['string', 'null'],
                            },
                            initiatorName: {
                              description: 'Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.',
                              type: ['string', 'null'],
                            },
                            iqn: {
                              description: 'Target iSCSI Qualified Name.',
                              type: 'string',
                            },
                            iscsiInterface: {
                              description: "iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
                              type: ['string', 'null'],
                            },
                            lun: {
                              description: 'iSCSI Target Lun number.',
                              type: 'integer',
                              format: 'int32',
                            },
                            portals: {
                              description: 'iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).',
                              type: ['array', 'null'],
                              items: {
                                type: ['string', 'null'],
                              },
                            },
                            readOnly: {
                              description: 'ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.',
                              type: 'boolean',
                            },
                            secretRef: {
                              description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                              properties: {
                                name: {
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            targetPortal: {
                              description: 'iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        name: {
                          description: "Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                          type: 'string',
                        },
                        nfs: {
                          description: 'Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.',
                          required: ['server', 'path'],
                          properties: {
                            path: {
                              description: 'Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs',
                              type: 'string',
                            },
                            readOnly: {
                              description: 'ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs',
                              type: 'boolean',
                            },
                            server: {
                              description: 'Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        persistentVolumeClaim: {
                          description: "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).",
                          required: ['claimName'],
                          properties: {
                            claimName: {
                              description: 'ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims',
                              type: 'string',
                            },
                            readOnly: {
                              description: 'Will force the ReadOnly setting in VolumeMounts. Default false.',
                              type: 'boolean',
                            },
                          },
                          additionalProperties: false,
                        },
                        photonPersistentDisk: {
                          description: 'Represents a Photon Controller persistent disk resource.',
                          required: ['pdID'],
                          properties: {
                            fsType: {
                              description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                              type: ['string', 'null'],
                            },
                            pdID: {
                              description: 'ID that identifies Photon Controller persistent disk',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        portworxVolume: {
                          description: 'PortworxVolumeSource represents a Portworx volume resource.',
                          required: ['volumeID'],
                          properties: {
                            fsType: {
                              description: 'FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.',
                              type: ['string', 'null'],
                            },
                            readOnly: {
                              description: 'Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                              type: 'boolean',
                            },
                            volumeID: {
                              description: 'VolumeID uniquely identifies a Portworx volume',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        projected: {
                          description: 'Represents a projected volume source',
                          required: ['sources'],
                          properties: {
                            defaultMode: {
                              description: 'Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                              type: 'integer',
                              format: 'int32',
                            },
                            sources: {
                              description: 'list of volume projections',
                              type: 'array',
                              items: {
                                description: 'Projection that may be projected along with other supported volume types',
                                properties: {
                                  configMap: {
                                    description: "Adapts a ConfigMap into a projected volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.",
                                    properties: {
                                      items: {
                                        description:
                                          "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                                        type: ['array', 'null'],
                                        items: {
                                          description: 'Maps a string key to a path within a volume.',
                                          required: ['key', 'path'],
                                          properties: {
                                            key: {
                                              description: 'The key to project.',
                                              type: 'string',
                                            },
                                            mode: {
                                              description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                              type: 'integer',
                                              format: 'int32',
                                            },
                                            path: {
                                              description: "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                                              type: 'string',
                                            },
                                          },
                                          additionalProperties: false,
                                        },
                                      },
                                      name: {
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                        type: ['string', 'null'],
                                      },
                                      optional: {
                                        description: "Specify whether the ConfigMap or it's keys must be defined",
                                        type: 'boolean',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  downwardAPI: {
                                    description: 'Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.',
                                    properties: {
                                      items: {
                                        description: 'Items is a list of DownwardAPIVolume file',
                                        type: ['array', 'null'],
                                        items: {
                                          description: 'DownwardAPIVolumeFile represents information to create the file containing the pod field',
                                          required: ['path'],
                                          properties: {
                                            fieldRef: {
                                              description: 'ObjectFieldSelector selects an APIVersioned field of an object.',
                                              required: ['fieldPath'],
                                              properties: {
                                                apiVersion: {
                                                  description: 'Version of the schema the FieldPath is written in terms of, defaults to "v1".',
                                                  type: ['string', 'null'],
                                                },
                                                fieldPath: {
                                                  description: 'Path of the field to select in the specified API version.',
                                                  type: 'string',
                                                },
                                              },
                                              additionalProperties: false,
                                            },
                                            mode: {
                                              description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                              type: 'integer',
                                              format: 'int32',
                                            },
                                            path: {
                                              description: "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
                                              type: 'string',
                                            },
                                            resourceFieldRef: {
                                              description: 'ResourceFieldSelector represents container resources (cpu, memory) and their output format',
                                              required: ['resource'],
                                              properties: {
                                                containerName: {
                                                  description: 'Container name: required for volumes, optional for env vars',
                                                  type: ['string', 'null'],
                                                },
                                                divisor: {
                                                  oneOf: [
                                                    {
                                                      type: ['string', 'null'],
                                                    },
                                                    {
                                                      type: 'integer',
                                                    },
                                                  ],
                                                },
                                                resource: {
                                                  description: 'Required: resource to select',
                                                  type: 'string',
                                                },
                                              },
                                              additionalProperties: false,
                                            },
                                          },
                                          additionalProperties: false,
                                        },
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  secret: {
                                    description: "Adapts a secret into a projected volume.\n\nThe contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.",
                                    properties: {
                                      items: {
                                        description:
                                          "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                                        type: ['array', 'null'],
                                        items: {
                                          description: 'Maps a string key to a path within a volume.',
                                          required: ['key', 'path'],
                                          properties: {
                                            key: {
                                              description: 'The key to project.',
                                              type: 'string',
                                            },
                                            mode: {
                                              description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                              type: 'integer',
                                              format: 'int32',
                                            },
                                            path: {
                                              description: "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                                              type: 'string',
                                            },
                                          },
                                          additionalProperties: false,
                                        },
                                      },
                                      name: {
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                        type: ['string', 'null'],
                                      },
                                      optional: {
                                        description: 'Specify whether the Secret or its key must be defined',
                                        type: 'boolean',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  serviceAccountToken: {
                                    description: 'ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).',
                                    required: ['path'],
                                    properties: {
                                      audience: {
                                        description: 'Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.',
                                        type: ['string', 'null'],
                                      },
                                      expirationSeconds: {
                                        description: 'ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.',
                                        type: 'integer',
                                        format: 'int64',
                                      },
                                      path: {
                                        description: 'Path is the path relative to the mount point of the file to project the token into.',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                additionalProperties: false,
                              },
                            },
                          },
                          additionalProperties: false,
                        },
                        quobyte: {
                          description: 'Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.',
                          required: ['registry', 'volume'],
                          properties: {
                            group: {
                              description: 'Group to map volume access to Default is no group',
                              type: ['string', 'null'],
                            },
                            readOnly: {
                              description: 'ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.',
                              type: 'boolean',
                            },
                            registry: {
                              description: 'Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes',
                              type: 'string',
                            },
                            user: {
                              description: 'User to map volume access to Defaults to serivceaccount user',
                              type: ['string', 'null'],
                            },
                            volume: {
                              description: 'Volume is a string that references an already created Quobyte volume by name.',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        rbd: {
                          description: 'Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.',
                          required: ['monitors', 'image'],
                          properties: {
                            fsType: {
                              description: 'Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd',
                              type: ['string', 'null'],
                            },
                            image: {
                              description: 'The rados image name. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                              type: 'string',
                            },
                            keyring: {
                              description: 'Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                              type: ['string', 'null'],
                            },
                            monitors: {
                              description: 'A collection of Ceph monitors. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                              type: 'array',
                              items: {
                                type: ['string', 'null'],
                              },
                            },
                            pool: {
                              description: 'The rados pool name. Default is rbd. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                              type: ['string', 'null'],
                            },
                            readOnly: {
                              description: 'ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                              type: 'boolean',
                            },
                            secretRef: {
                              description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                              properties: {
                                name: {
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            user: {
                              description: 'The rados user name. Default is admin. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                        scaleIO: {
                          description: 'ScaleIOVolumeSource represents a persistent ScaleIO volume',
                          required: ['gateway', 'system', 'secretRef'],
                          properties: {
                            fsType: {
                              description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                              type: ['string', 'null'],
                            },
                            gateway: {
                              description: 'The host address of the ScaleIO API Gateway.',
                              type: 'string',
                            },
                            protectionDomain: {
                              description: 'The name of the ScaleIO Protection Domain for the configured storage.',
                              type: ['string', 'null'],
                            },
                            readOnly: {
                              description: 'Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                              type: 'boolean',
                            },
                            secretRef: {
                              description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                              properties: {
                                name: {
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            sslEnabled: {
                              description: 'Flag to enable/disable SSL communication with Gateway, default false',
                              type: 'boolean',
                            },
                            storageMode: {
                              description: 'Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.',
                              type: ['string', 'null'],
                            },
                            storagePool: {
                              description: 'The ScaleIO Storage Pool associated with the protection domain.',
                              type: ['string', 'null'],
                            },
                            system: {
                              description: 'The name of the storage system as configured in ScaleIO.',
                              type: 'string',
                            },
                            volumeName: {
                              description: 'The name of a volume already created in the ScaleIO system that is associated with this volume source.',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                        secret: {
                          description: "Adapts a Secret into a volume.\n\nThe contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.",
                          properties: {
                            defaultMode: {
                              description: 'Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                              type: 'integer',
                              format: 'int32',
                            },
                            items: {
                              description:
                                "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                              type: ['array', 'null'],
                              items: {
                                description: 'Maps a string key to a path within a volume.',
                                required: ['key', 'path'],
                                properties: {
                                  key: {
                                    description: 'The key to project.',
                                    type: 'string',
                                  },
                                  mode: {
                                    description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                    type: 'integer',
                                    format: 'int32',
                                  },
                                  path: {
                                    description: "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                                    type: 'string',
                                  },
                                },
                                additionalProperties: false,
                              },
                            },
                            optional: {
                              description: "Specify whether the Secret or it's keys must be defined",
                              type: 'boolean',
                            },
                            secretName: {
                              description: "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                        storageos: {
                          description: 'Represents a StorageOS persistent volume resource.',
                          properties: {
                            fsType: {
                              description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                              type: ['string', 'null'],
                            },
                            readOnly: {
                              description: 'Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                              type: 'boolean',
                            },
                            secretRef: {
                              description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                              properties: {
                                name: {
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            volumeName: {
                              description: 'VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.',
                              type: ['string', 'null'],
                            },
                            volumeNamespace: {
                              description: 'VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod\'s namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                        vsphereVolume: {
                          description: 'Represents a vSphere volume resource.',
                          required: ['volumePath'],
                          properties: {
                            fsType: {
                              description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                              type: ['string', 'null'],
                            },
                            storagePolicyID: {
                              description: 'Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.',
                              type: ['string', 'null'],
                            },
                            storagePolicyName: {
                              description: 'Storage Policy Based Management (SPBM) profile name.',
                              type: ['string', 'null'],
                            },
                            volumePath: {
                              description: 'Path that identifies vSphere volume vmdk',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                      },
                      additionalProperties: false,
                    },
                    'x-kubernetes-patch-merge-key': 'name',
                    'x-kubernetes-patch-strategy': 'merge,retainKeys',
                  },
                },
                additionalProperties: false,
              },
            },
            additionalProperties: false,
          },
          updateStrategy: {
            description: 'StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.',
            properties: {
              rollingUpdate: {
                description: 'RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.',
                properties: {
                  partition: {
                    description: 'Partition indicates the ordinal at which the StatefulSet should be partitioned. Default value is 0.',
                    type: 'integer',
                    format: 'int32',
                  },
                },
                additionalProperties: false,
              },
              type: {
                description: 'Type indicates the type of the StatefulSetUpdateStrategy. Default is RollingUpdate.',
                type: ['string', 'null'],
              },
            },
            additionalProperties: false,
          },
          volumeClaimTemplates: {
            description: 'volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.',
            type: ['array', 'null'],
            items: {
              description: "PersistentVolumeClaim is a user's request for and claim to a persistent volume",
              properties: {
                apiVersion: {
                  description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
                  type: ['string', 'null'],
                  enum: ['v1'],
                },
                kind: {
                  description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                  type: ['string', 'null'],
                  enum: ['PersistentVolumeClaim'],
                },
                metadata: {
                  description: 'ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.',
                  properties: {
                    annotations: {
                      description: 'Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations',
                      type: 'object',
                      additionalProperties: {
                        type: ['string', 'null'],
                      },
                    },
                    clusterName: {
                      description: 'The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.',
                      type: ['string', 'null'],
                    },
                    creationTimestamp: {
                      description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                      type: ['string', 'null'],
                      format: 'date-time',
                    },
                    deletionGracePeriodSeconds: {
                      description: 'Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.',
                      type: 'integer',
                      format: 'int64',
                    },
                    deletionTimestamp: {
                      description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                      type: ['string', 'null'],
                      format: 'date-time',
                    },
                    finalizers: {
                      description: 'Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.',
                      type: ['array', 'null'],
                      items: {
                        type: ['string', 'null'],
                      },
                      'x-kubernetes-patch-strategy': 'merge',
                    },
                    generateName: {
                      description:
                        'GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency',
                      type: ['string', 'null'],
                    },
                    generation: {
                      description: 'A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.',
                      type: 'integer',
                      format: 'int64',
                    },
                    initializers: {
                      description: 'Initializers tracks the progress of initialization.',
                      required: ['pending'],
                      properties: {
                        pending: {
                          description: 'Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.',
                          type: 'array',
                          items: {
                            description: 'Initializer is information about an initializer that has not yet completed.',
                            required: ['name'],
                            properties: {
                              name: {
                                description: 'name of the process that is responsible for initializing this object.',
                                type: 'string',
                              },
                            },
                            additionalProperties: false,
                          },
                          'x-kubernetes-patch-merge-key': 'name',
                          'x-kubernetes-patch-strategy': 'merge',
                        },
                        result: {
                          description: "Status is a return value for calls that don't return other objects.",
                          properties: {
                            apiVersion: {
                              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
                              type: ['string', 'null'],
                              enum: ['v1'],
                            },
                            code: {
                              description: 'Suggested HTTP return code for this status, 0 if not set.',
                              type: 'integer',
                              format: 'int32',
                            },
                            details: {
                              description: 'StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.',
                              properties: {
                                causes: {
                                  description: 'The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.',
                                  type: ['array', 'null'],
                                  items: {
                                    description: 'StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.',
                                    properties: {
                                      field: {
                                        description: 'The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  "name" - the field "name" on the current resource\n  "items[0].name" - the field "name" on the first array entry in "items"',
                                        type: ['string', 'null'],
                                      },
                                      message: {
                                        description: 'A human-readable description of the cause of the error.  This field may be presented as-is to a reader.',
                                        type: ['string', 'null'],
                                      },
                                      reason: {
                                        description: 'A machine-readable description of the cause of the error. If this value is empty there is no information available.',
                                        type: ['string', 'null'],
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                group: {
                                  description: 'The group attribute of the resource associated with the status StatusReason.',
                                  type: ['string', 'null'],
                                },
                                kind: {
                                  description: 'The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                                  type: ['string', 'null'],
                                },
                                name: {
                                  description: 'The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).',
                                  type: ['string', 'null'],
                                },
                                retryAfterSeconds: {
                                  description: 'If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.',
                                  type: 'integer',
                                  format: 'int32',
                                },
                                uid: {
                                  description: 'UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            kind: {
                              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                              type: ['string', 'null'],
                              enum: ['Status'],
                            },
                            message: {
                              description: 'A human-readable description of the status of this operation.',
                              type: ['string', 'null'],
                            },
                            metadata: {
                              description: 'ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.',
                              properties: {
                                continue: {
                                  description:
                                    'continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response.',
                                  type: ['string', 'null'],
                                },
                                resourceVersion: {
                                  description: "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
                                  type: ['string', 'null'],
                                },
                                selfLink: {
                                  description: 'selfLink is a URL representing this object. Populated by the system. Read-only.',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            reason: {
                              description: 'A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.',
                              type: ['string', 'null'],
                            },
                            status: {
                              description: 'Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status',
                              type: ['string', 'null'],
                            },
                          },
                          'x-kubernetes-group-version-kind': [
                            {
                              group: '',
                              kind: 'Status',
                              version: 'v1',
                            },
                          ],
                          additionalProperties: false,
                        },
                      },
                      additionalProperties: false,
                    },
                    labels: {
                      description: 'Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels',
                      type: 'object',
                      additionalProperties: {
                        type: ['string', 'null'],
                      },
                    },
                    name: {
                      description: 'Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
                      type: ['string', 'null'],
                    },
                    namespace: {
                      description: 'Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces',
                      type: ['string', 'null'],
                    },
                    ownerReferences: {
                      description: 'List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.',
                      type: ['array', 'null'],
                      items: {
                        description: 'OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.',
                        required: ['apiVersion', 'kind', 'name', 'uid'],
                        properties: {
                          apiVersion: {
                            description: 'API version of the referent.',
                            type: 'string',
                          },
                          blockOwnerDeletion: {
                            description: 'If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.',
                            type: 'boolean',
                          },
                          controller: {
                            description: 'If true, this reference points to the managing controller.',
                            type: 'boolean',
                          },
                          kind: {
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                            type: 'string',
                          },
                          name: {
                            description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
                            type: 'string',
                          },
                          uid: {
                            description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                            type: 'string',
                          },
                        },
                        additionalProperties: false,
                      },
                      'x-kubernetes-patch-merge-key': 'uid',
                      'x-kubernetes-patch-strategy': 'merge',
                    },
                    resourceVersion: {
                      description:
                        'An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency',
                      type: ['string', 'null'],
                    },
                    selfLink: {
                      description: 'SelfLink is a URL representing this object. Populated by the system. Read-only.',
                      type: ['string', 'null'],
                    },
                    uid: {
                      description: 'UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                      type: ['string', 'null'],
                    },
                  },
                  additionalProperties: false,
                },
                spec: {
                  description: 'PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes',
                  properties: {
                    accessModes: {
                      description: 'AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1',
                      type: ['array', 'null'],
                      items: {
                        type: ['string', 'null'],
                      },
                    },
                    resources: {
                      description: 'ResourceRequirements describes the compute resource requirements.',
                      properties: {
                        limits: {
                          description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/',
                          type: 'object',
                          additionalProperties: {
                            oneOf: [
                              {
                                type: ['string', 'null'],
                              },
                              {
                                type: 'integer',
                              },
                            ],
                          },
                        },
                        requests: {
                          description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/',
                          type: 'object',
                          additionalProperties: {
                            oneOf: [
                              {
                                type: ['string', 'null'],
                              },
                              {
                                type: 'integer',
                              },
                            ],
                          },
                        },
                      },
                      additionalProperties: false,
                    },
                    selector: {
                      description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
                      properties: {
                        matchExpressions: {
                          description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                          type: ['array', 'null'],
                          items: {
                            description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                            required: ['key', 'operator'],
                            properties: {
                              key: {
                                description: 'key is the label key that the selector applies to.',
                                type: 'string',
                                'x-kubernetes-patch-merge-key': 'key',
                                'x-kubernetes-patch-strategy': 'merge',
                              },
                              operator: {
                                description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                type: 'string',
                              },
                              values: {
                                description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                                type: ['array', 'null'],
                                items: {
                                  type: ['string', 'null'],
                                },
                              },
                            },
                            additionalProperties: false,
                          },
                        },
                        matchLabels: {
                          description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                          type: 'object',
                          additionalProperties: {
                            type: ['string', 'null'],
                          },
                        },
                      },
                      additionalProperties: false,
                    },
                    storageClassName: {
                      description: 'Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1',
                      type: ['string', 'null'],
                    },
                    volumeMode: {
                      description: 'volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is an alpha feature and may change in the future.',
                      type: ['string', 'null'],
                    },
                    volumeName: {
                      description: 'VolumeName is the binding reference to the PersistentVolume backing this claim.',
                      type: ['string', 'null'],
                    },
                  },
                  additionalProperties: false,
                },
                status: {
                  description: 'PersistentVolumeClaimStatus is the current status of a persistent volume claim.',
                  properties: {
                    accessModes: {
                      description: 'AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1',
                      type: ['array', 'null'],
                      items: {
                        type: ['string', 'null'],
                      },
                    },
                    capacity: {
                      description: 'Represents the actual resources of the underlying volume.',
                      type: 'object',
                      additionalProperties: {
                        oneOf: [
                          {
                            type: ['string', 'null'],
                          },
                          {
                            type: 'integer',
                          },
                        ],
                      },
                    },
                    conditions: {
                      description: "Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.",
                      type: ['array', 'null'],
                      items: {
                        description: 'PersistentVolumeClaimCondition contails details about state of pvc',
                        required: ['type', 'status'],
                        properties: {
                          lastProbeTime: {
                            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                            type: ['string', 'null'],
                            format: 'date-time',
                          },
                          lastTransitionTime: {
                            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                            type: ['string', 'null'],
                            format: 'date-time',
                          },
                          message: {
                            description: 'Human-readable message indicating details about last transition.',
                            type: ['string', 'null'],
                          },
                          reason: {
                            description: 'Unique, this should be a short, machine understandable string that gives the reason for condition\'s last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.',
                            type: ['string', 'null'],
                          },
                          status: {
                            type: 'string',
                          },
                          type: {
                            type: 'string',
                          },
                        },
                        additionalProperties: false,
                      },
                      'x-kubernetes-patch-merge-key': 'type',
                      'x-kubernetes-patch-strategy': 'merge',
                    },
                    phase: {
                      description: 'Phase represents the current phase of PersistentVolumeClaim.',
                      type: ['string', 'null'],
                    },
                  },
                  additionalProperties: false,
                },
              },
              'x-kubernetes-group-version-kind': [
                {
                  group: '',
                  kind: 'PersistentVolumeClaim',
                  version: 'v1',
                },
              ],
              additionalProperties: false,
            },
          },
        },
        additionalProperties: false,
      },
      status: {
        description: 'StatefulSetStatus represents the current state of a StatefulSet.',
        required: ['replicas'],
        properties: {
          collisionCount: {
            description: 'collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.',
            type: 'integer',
            format: 'int32',
          },
          conditions: {
            description: "Represents the latest available observations of a statefulset's current state.",
            type: ['array', 'null'],
            items: {
              description: 'StatefulSetCondition describes the state of a statefulset at a certain point.',
              required: ['type', 'status'],
              properties: {
                lastTransitionTime: {
                  description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                  type: ['string', 'null'],
                  format: 'date-time',
                },
                message: {
                  description: 'A human readable message indicating details about the transition.',
                  type: ['string', 'null'],
                },
                reason: {
                  description: "The reason for the condition's last transition.",
                  type: ['string', 'null'],
                },
                status: {
                  description: 'Status of the condition, one of True, False, Unknown.',
                  type: 'string',
                },
                type: {
                  description: 'Type of statefulset condition.',
                  type: 'string',
                },
              },
              additionalProperties: false,
            },
            'x-kubernetes-patch-merge-key': 'type',
            'x-kubernetes-patch-strategy': 'merge',
          },
          currentReplicas: {
            description: 'currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.',
            type: 'integer',
            format: 'int32',
          },
          currentRevision: {
            description: 'currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).',
            type: ['string', 'null'],
          },
          observedGeneration: {
            description: "observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.",
            type: 'integer',
            format: 'int64',
          },
          readyReplicas: {
            description: 'readyReplicas is the number of Pods created by the StatefulSet controller that have a Ready Condition.',
            type: 'integer',
            format: 'int32',
          },
          replicas: {
            description: 'replicas is the number of Pods created by the StatefulSet controller.',
            type: 'integer',
            format: 'int32',
          },
          updateRevision: {
            description: 'updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)',
            type: ['string', 'null'],
          },
          updatedReplicas: {
            description: 'updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.',
            type: 'integer',
            format: 'int32',
          },
        },
        additionalProperties: false,
      },
    },
    'x-kubernetes-group-version-kind': [
      {
        group: 'apps',
        kind: 'StatefulSet',
        version: 'v1',
      },
    ],
    additionalProperties: false,
    $schema: 'http://json-schema.org/schema#',
    type: 'object',
  })
  .setIn([referenceForModel(k8sModels.JobModel), 'default'], {
    description: 'Job represents the configuration of a single job.',
    properties: {
      apiVersion: {
        description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
        type: ['string', 'null'],
        enum: ['batch/v1'],
      },
      kind: {
        description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
        type: ['string', 'null'],
        enum: ['Job'],
      },
      metadata: {
        description: 'ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.',
        properties: {
          annotations: {
            description: 'Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations',
            type: 'object',
            additionalProperties: {
              type: ['string', 'null'],
            },
          },
          clusterName: {
            description: 'The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.',
            type: ['string', 'null'],
          },
          creationTimestamp: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            type: ['string', 'null'],
            format: 'date-time',
          },
          deletionGracePeriodSeconds: {
            description: 'Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.',
            type: 'integer',
            format: 'int64',
          },
          deletionTimestamp: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            type: ['string', 'null'],
            format: 'date-time',
          },
          finalizers: {
            description: 'Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.',
            type: ['array', 'null'],
            items: {
              type: ['string', 'null'],
            },
            'x-kubernetes-patch-strategy': 'merge',
          },
          generateName: {
            description:
              'GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency',
            type: ['string', 'null'],
          },
          generation: {
            description: 'A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.',
            type: 'integer',
            format: 'int64',
          },
          initializers: {
            description: 'Initializers tracks the progress of initialization.',
            required: ['pending'],
            properties: {
              pending: {
                description: 'Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.',
                type: 'array',
                items: {
                  description: 'Initializer is information about an initializer that has not yet completed.',
                  required: ['name'],
                  properties: {
                    name: {
                      description: 'name of the process that is responsible for initializing this object.',
                      type: 'string',
                    },
                  },
                  additionalProperties: false,
                },
                'x-kubernetes-patch-merge-key': 'name',
                'x-kubernetes-patch-strategy': 'merge',
              },
              result: {
                description: "Status is a return value for calls that don't return other objects.",
                properties: {
                  apiVersion: {
                    description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
                    type: ['string', 'null'],
                    enum: ['v1'],
                  },
                  code: {
                    description: 'Suggested HTTP return code for this status, 0 if not set.',
                    type: 'integer',
                    format: 'int32',
                  },
                  details: {
                    description: 'StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.',
                    properties: {
                      causes: {
                        description: 'The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.',
                        type: ['array', 'null'],
                        items: {
                          description: 'StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.',
                          properties: {
                            field: {
                              description: 'The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  "name" - the field "name" on the current resource\n  "items[0].name" - the field "name" on the first array entry in "items"',
                              type: ['string', 'null'],
                            },
                            message: {
                              description: 'A human-readable description of the cause of the error.  This field may be presented as-is to a reader.',
                              type: ['string', 'null'],
                            },
                            reason: {
                              description: 'A machine-readable description of the cause of the error. If this value is empty there is no information available.',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                      },
                      group: {
                        description: 'The group attribute of the resource associated with the status StatusReason.',
                        type: ['string', 'null'],
                      },
                      kind: {
                        description: 'The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                        type: ['string', 'null'],
                      },
                      name: {
                        description: 'The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).',
                        type: ['string', 'null'],
                      },
                      retryAfterSeconds: {
                        description: 'If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.',
                        type: 'integer',
                        format: 'int32',
                      },
                      uid: {
                        description: 'UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                        type: ['string', 'null'],
                      },
                    },
                    additionalProperties: false,
                  },
                  kind: {
                    description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                    type: ['string', 'null'],
                    enum: ['Status'],
                  },
                  message: {
                    description: 'A human-readable description of the status of this operation.',
                    type: ['string', 'null'],
                  },
                  metadata: {
                    description: 'ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.',
                    properties: {
                      continue: {
                        description:
                          'continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response.',
                        type: ['string', 'null'],
                      },
                      resourceVersion: {
                        description: "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
                        type: ['string', 'null'],
                      },
                      selfLink: {
                        description: 'selfLink is a URL representing this object. Populated by the system. Read-only.',
                        type: ['string', 'null'],
                      },
                    },
                    additionalProperties: false,
                  },
                  reason: {
                    description: 'A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.',
                    type: ['string', 'null'],
                  },
                  status: {
                    description: 'Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status',
                    type: ['string', 'null'],
                  },
                },
                'x-kubernetes-group-version-kind': [
                  {
                    group: '',
                    kind: 'Status',
                    version: 'v1',
                  },
                ],
                additionalProperties: false,
              },
            },
            additionalProperties: false,
          },
          labels: {
            description: 'Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels',
            type: 'object',
            additionalProperties: {
              type: ['string', 'null'],
            },
          },
          name: {
            description: 'Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
            type: ['string', 'null'],
          },
          namespace: {
            description: 'Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces',
            type: ['string', 'null'],
          },
          ownerReferences: {
            description: 'List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.',
            type: ['array', 'null'],
            items: {
              description: 'OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.',
              required: ['apiVersion', 'kind', 'name', 'uid'],
              properties: {
                apiVersion: {
                  description: 'API version of the referent.',
                  type: 'string',
                },
                blockOwnerDeletion: {
                  description: 'If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.',
                  type: 'boolean',
                },
                controller: {
                  description: 'If true, this reference points to the managing controller.',
                  type: 'boolean',
                },
                kind: {
                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                  type: 'string',
                },
                name: {
                  description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
                  type: 'string',
                },
                uid: {
                  description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                  type: 'string',
                },
              },
              additionalProperties: false,
            },
            'x-kubernetes-patch-merge-key': 'uid',
            'x-kubernetes-patch-strategy': 'merge',
          },
          resourceVersion: {
            description:
              'An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency',
            type: ['string', 'null'],
          },
          selfLink: {
            description: 'SelfLink is a URL representing this object. Populated by the system. Read-only.',
            type: ['string', 'null'],
          },
          uid: {
            description: 'UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
            type: ['string', 'null'],
          },
        },
        additionalProperties: false,
      },
      spec: {
        description: 'JobSpec describes how the job execution will look like.',
        required: ['template'],
        properties: {
          activeDeadlineSeconds: {
            description: 'Specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer',
            type: 'integer',
            format: 'int64',
          },
          backoffLimit: {
            description: 'Specifies the number of retries before marking this job failed. Defaults to 6',
            type: 'integer',
            format: 'int32',
          },
          completions: {
            description: 'Specifies the desired number of successfully finished pods the job should be run with.  Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/',
            type: 'integer',
            format: 'int32',
          },
          manualSelector: {
            description:
              'manualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template.  When true, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other jobs to not function correctly.  However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector',
            type: 'boolean',
          },
          parallelism: {
            description: 'Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/',
            type: 'integer',
            format: 'int32',
          },
          selector: {
            description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
            properties: {
              matchExpressions: {
                description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                type: ['array', 'null'],
                items: {
                  description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                  required: ['key', 'operator'],
                  properties: {
                    key: {
                      description: 'key is the label key that the selector applies to.',
                      type: 'string',
                      'x-kubernetes-patch-merge-key': 'key',
                      'x-kubernetes-patch-strategy': 'merge',
                    },
                    operator: {
                      description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                      type: 'string',
                    },
                    values: {
                      description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                      type: ['array', 'null'],
                      items: {
                        type: ['string', 'null'],
                      },
                    },
                  },
                  additionalProperties: false,
                },
              },
              matchLabels: {
                description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                type: 'object',
                additionalProperties: {
                  type: ['string', 'null'],
                },
              },
            },
            additionalProperties: false,
          },
          template: {
            description: 'PodTemplateSpec describes the data a pod should have when created from a template',
            properties: {
              metadata: {
                description: 'ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.',
                properties: {
                  annotations: {
                    description: 'Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations',
                    type: 'object',
                    additionalProperties: {
                      type: ['string', 'null'],
                    },
                  },
                  clusterName: {
                    description: 'The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.',
                    type: ['string', 'null'],
                  },
                  creationTimestamp: {
                    description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                    type: ['string', 'null'],
                    format: 'date-time',
                  },
                  deletionGracePeriodSeconds: {
                    description: 'Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.',
                    type: 'integer',
                    format: 'int64',
                  },
                  deletionTimestamp: {
                    description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                    type: ['string', 'null'],
                    format: 'date-time',
                  },
                  finalizers: {
                    description: 'Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.',
                    type: ['array', 'null'],
                    items: {
                      type: ['string', 'null'],
                    },
                    'x-kubernetes-patch-strategy': 'merge',
                  },
                  generateName: {
                    description:
                      'GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency',
                    type: ['string', 'null'],
                  },
                  generation: {
                    description: 'A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.',
                    type: 'integer',
                    format: 'int64',
                  },
                  initializers: {
                    description: 'Initializers tracks the progress of initialization.',
                    required: ['pending'],
                    properties: {
                      pending: {
                        description: 'Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.',
                        type: 'array',
                        items: {
                          description: 'Initializer is information about an initializer that has not yet completed.',
                          required: ['name'],
                          properties: {
                            name: {
                              description: 'name of the process that is responsible for initializing this object.',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        'x-kubernetes-patch-merge-key': 'name',
                        'x-kubernetes-patch-strategy': 'merge',
                      },
                      result: {
                        description: "Status is a return value for calls that don't return other objects.",
                        properties: {
                          apiVersion: {
                            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
                            type: ['string', 'null'],
                            enum: ['v1'],
                          },
                          code: {
                            description: 'Suggested HTTP return code for this status, 0 if not set.',
                            type: 'integer',
                            format: 'int32',
                          },
                          details: {
                            description: 'StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.',
                            properties: {
                              causes: {
                                description: 'The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.',
                                type: ['array', 'null'],
                                items: {
                                  description: 'StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.',
                                  properties: {
                                    field: {
                                      description: 'The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  "name" - the field "name" on the current resource\n  "items[0].name" - the field "name" on the first array entry in "items"',
                                      type: ['string', 'null'],
                                    },
                                    message: {
                                      description: 'A human-readable description of the cause of the error.  This field may be presented as-is to a reader.',
                                      type: ['string', 'null'],
                                    },
                                    reason: {
                                      description: 'A machine-readable description of the cause of the error. If this value is empty there is no information available.',
                                      type: ['string', 'null'],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                              },
                              group: {
                                description: 'The group attribute of the resource associated with the status StatusReason.',
                                type: ['string', 'null'],
                              },
                              kind: {
                                description: 'The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                                type: ['string', 'null'],
                              },
                              name: {
                                description: 'The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).',
                                type: ['string', 'null'],
                              },
                              retryAfterSeconds: {
                                description: 'If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.',
                                type: 'integer',
                                format: 'int32',
                              },
                              uid: {
                                description: 'UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                                type: ['string', 'null'],
                              },
                            },
                            additionalProperties: false,
                          },
                          kind: {
                            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                            type: ['string', 'null'],
                            enum: ['Status'],
                          },
                          message: {
                            description: 'A human-readable description of the status of this operation.',
                            type: ['string', 'null'],
                          },
                          metadata: {
                            description: 'ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.',
                            properties: {
                              continue: {
                                description:
                                  'continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response.',
                                type: ['string', 'null'],
                              },
                              resourceVersion: {
                                description: "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
                                type: ['string', 'null'],
                              },
                              selfLink: {
                                description: 'selfLink is a URL representing this object. Populated by the system. Read-only.',
                                type: ['string', 'null'],
                              },
                            },
                            additionalProperties: false,
                          },
                          reason: {
                            description: 'A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.',
                            type: ['string', 'null'],
                          },
                          status: {
                            description: 'Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status',
                            type: ['string', 'null'],
                          },
                        },
                        'x-kubernetes-group-version-kind': [
                          {
                            group: '',
                            kind: 'Status',
                            version: 'v1',
                          },
                        ],
                        additionalProperties: false,
                      },
                    },
                    additionalProperties: false,
                  },
                  labels: {
                    description: 'Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels',
                    type: 'object',
                    additionalProperties: {
                      type: ['string', 'null'],
                    },
                  },
                  name: {
                    description: 'Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
                    type: ['string', 'null'],
                  },
                  namespace: {
                    description: 'Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces',
                    type: ['string', 'null'],
                  },
                  ownerReferences: {
                    description: 'List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.',
                    type: ['array', 'null'],
                    items: {
                      description: 'OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.',
                      required: ['apiVersion', 'kind', 'name', 'uid'],
                      properties: {
                        apiVersion: {
                          description: 'API version of the referent.',
                          type: 'string',
                        },
                        blockOwnerDeletion: {
                          description: 'If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.',
                          type: 'boolean',
                        },
                        controller: {
                          description: 'If true, this reference points to the managing controller.',
                          type: 'boolean',
                        },
                        kind: {
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                          type: 'string',
                        },
                        name: {
                          description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
                          type: 'string',
                        },
                        uid: {
                          description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                          type: 'string',
                        },
                      },
                      additionalProperties: false,
                    },
                    'x-kubernetes-patch-merge-key': 'uid',
                    'x-kubernetes-patch-strategy': 'merge',
                  },
                  resourceVersion: {
                    description:
                      'An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency',
                    type: ['string', 'null'],
                  },
                  selfLink: {
                    description: 'SelfLink is a URL representing this object. Populated by the system. Read-only.',
                    type: ['string', 'null'],
                  },
                  uid: {
                    description: 'UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                    type: ['string', 'null'],
                  },
                },
                additionalProperties: false,
              },
              spec: {
                description: 'PodSpec is a description of a pod.',
                required: ['containers'],
                properties: {
                  activeDeadlineSeconds: {
                    description: 'Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.',
                    type: 'integer',
                    format: 'int64',
                  },
                  affinity: {
                    description: 'Affinity is a group of affinity scheduling rules.',
                    properties: {
                      nodeAffinity: {
                        description: 'Node affinity is a group of node affinity scheduling rules.',
                        properties: {
                          preferredDuringSchedulingIgnoredDuringExecution: {
                            description:
                              'The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.',
                            type: ['array', 'null'],
                            items: {
                              description: "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
                              required: ['weight', 'preference'],
                              properties: {
                                preference: {
                                  description: 'A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.',
                                  properties: {
                                    matchExpressions: {
                                      description: "A list of node selector requirements by node's labels.",
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                        required: ['key', 'operator'],
                                        properties: {
                                          key: {
                                            description: 'The label key that the selector applies to.',
                                            type: 'string',
                                          },
                                          operator: {
                                            description: "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                            type: 'string',
                                          },
                                          values: {
                                            description: 'An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
                                            type: ['array', 'null'],
                                            items: {
                                              type: ['string', 'null'],
                                            },
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    matchFields: {
                                      description: "A list of node selector requirements by node's fields.",
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                        required: ['key', 'operator'],
                                        properties: {
                                          key: {
                                            description: 'The label key that the selector applies to.',
                                            type: 'string',
                                          },
                                          operator: {
                                            description: "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                            type: 'string',
                                          },
                                          values: {
                                            description: 'An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
                                            type: ['array', 'null'],
                                            items: {
                                              type: ['string', 'null'],
                                            },
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                weight: {
                                  description: 'Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.',
                                  type: 'integer',
                                  format: 'int32',
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          requiredDuringSchedulingIgnoredDuringExecution: {
                            description: 'A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.',
                            required: ['nodeSelectorTerms'],
                            properties: {
                              nodeSelectorTerms: {
                                description: 'Required. A list of node selector terms. The terms are ORed.',
                                type: 'array',
                                items: {
                                  description: 'A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.',
                                  properties: {
                                    matchExpressions: {
                                      description: "A list of node selector requirements by node's labels.",
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                        required: ['key', 'operator'],
                                        properties: {
                                          key: {
                                            description: 'The label key that the selector applies to.',
                                            type: 'string',
                                          },
                                          operator: {
                                            description: "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                            type: 'string',
                                          },
                                          values: {
                                            description: 'An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
                                            type: ['array', 'null'],
                                            items: {
                                              type: ['string', 'null'],
                                            },
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    matchFields: {
                                      description: "A list of node selector requirements by node's fields.",
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                        required: ['key', 'operator'],
                                        properties: {
                                          key: {
                                            description: 'The label key that the selector applies to.',
                                            type: 'string',
                                          },
                                          operator: {
                                            description: "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                            type: 'string',
                                          },
                                          values: {
                                            description: 'An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
                                            type: ['array', 'null'],
                                            items: {
                                              type: ['string', 'null'],
                                            },
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                              },
                            },
                            additionalProperties: false,
                          },
                        },
                        additionalProperties: false,
                      },
                      podAffinity: {
                        description: 'Pod affinity is a group of inter pod affinity scheduling rules.',
                        properties: {
                          preferredDuringSchedulingIgnoredDuringExecution: {
                            description:
                              'The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.',
                            type: ['array', 'null'],
                            items: {
                              description: 'The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)',
                              required: ['weight', 'podAffinityTerm'],
                              properties: {
                                podAffinityTerm: {
                                  description: 'Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running',
                                  required: ['topologyKey'],
                                  properties: {
                                    labelSelector: {
                                      description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
                                      properties: {
                                        matchExpressions: {
                                          description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                                          type: ['array', 'null'],
                                          items: {
                                            description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                            required: ['key', 'operator'],
                                            properties: {
                                              key: {
                                                description: 'key is the label key that the selector applies to.',
                                                type: 'string',
                                                'x-kubernetes-patch-merge-key': 'key',
                                                'x-kubernetes-patch-strategy': 'merge',
                                              },
                                              operator: {
                                                description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                type: 'string',
                                              },
                                              values: {
                                                description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                                                type: ['array', 'null'],
                                                items: {
                                                  type: ['string', 'null'],
                                                },
                                              },
                                            },
                                            additionalProperties: false,
                                          },
                                        },
                                        matchLabels: {
                                          description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                                          type: 'object',
                                          additionalProperties: {
                                            type: ['string', 'null'],
                                          },
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                    namespaces: {
                                      description: 'namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod\'s namespace"',
                                      type: ['array', 'null'],
                                      items: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                    topologyKey: {
                                      description: 'This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
                                      type: 'string',
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                weight: {
                                  description: 'weight associated with matching the corresponding podAffinityTerm, in the range 1-100.',
                                  type: 'integer',
                                  format: 'int32',
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          requiredDuringSchedulingIgnoredDuringExecution: {
                            description:
                              'If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.',
                            type: ['array', 'null'],
                            items: {
                              description: 'Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running',
                              required: ['topologyKey'],
                              properties: {
                                labelSelector: {
                                  description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
                                  properties: {
                                    matchExpressions: {
                                      description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                        required: ['key', 'operator'],
                                        properties: {
                                          key: {
                                            description: 'key is the label key that the selector applies to.',
                                            type: 'string',
                                            'x-kubernetes-patch-merge-key': 'key',
                                            'x-kubernetes-patch-strategy': 'merge',
                                          },
                                          operator: {
                                            description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                            type: 'string',
                                          },
                                          values: {
                                            description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                                            type: ['array', 'null'],
                                            items: {
                                              type: ['string', 'null'],
                                            },
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    matchLabels: {
                                      description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                                      type: 'object',
                                      additionalProperties: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                namespaces: {
                                  description: 'namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod\'s namespace"',
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                                topologyKey: {
                                  description: 'This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
                                  type: 'string',
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                        },
                        additionalProperties: false,
                      },
                      podAntiAffinity: {
                        description: 'Pod anti affinity is a group of inter pod anti affinity scheduling rules.',
                        properties: {
                          preferredDuringSchedulingIgnoredDuringExecution: {
                            description:
                              'The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.',
                            type: ['array', 'null'],
                            items: {
                              description: 'The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)',
                              required: ['weight', 'podAffinityTerm'],
                              properties: {
                                podAffinityTerm: {
                                  description: 'Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running',
                                  required: ['topologyKey'],
                                  properties: {
                                    labelSelector: {
                                      description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
                                      properties: {
                                        matchExpressions: {
                                          description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                                          type: ['array', 'null'],
                                          items: {
                                            description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                            required: ['key', 'operator'],
                                            properties: {
                                              key: {
                                                description: 'key is the label key that the selector applies to.',
                                                type: 'string',
                                                'x-kubernetes-patch-merge-key': 'key',
                                                'x-kubernetes-patch-strategy': 'merge',
                                              },
                                              operator: {
                                                description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                type: 'string',
                                              },
                                              values: {
                                                description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                                                type: ['array', 'null'],
                                                items: {
                                                  type: ['string', 'null'],
                                                },
                                              },
                                            },
                                            additionalProperties: false,
                                          },
                                        },
                                        matchLabels: {
                                          description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                                          type: 'object',
                                          additionalProperties: {
                                            type: ['string', 'null'],
                                          },
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                    namespaces: {
                                      description: 'namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod\'s namespace"',
                                      type: ['array', 'null'],
                                      items: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                    topologyKey: {
                                      description: 'This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
                                      type: 'string',
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                weight: {
                                  description: 'weight associated with matching the corresponding podAffinityTerm, in the range 1-100.',
                                  type: 'integer',
                                  format: 'int32',
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          requiredDuringSchedulingIgnoredDuringExecution: {
                            description:
                              'If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.',
                            type: ['array', 'null'],
                            items: {
                              description: 'Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running',
                              required: ['topologyKey'],
                              properties: {
                                labelSelector: {
                                  description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
                                  properties: {
                                    matchExpressions: {
                                      description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                        required: ['key', 'operator'],
                                        properties: {
                                          key: {
                                            description: 'key is the label key that the selector applies to.',
                                            type: 'string',
                                            'x-kubernetes-patch-merge-key': 'key',
                                            'x-kubernetes-patch-strategy': 'merge',
                                          },
                                          operator: {
                                            description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                            type: 'string',
                                          },
                                          values: {
                                            description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                                            type: ['array', 'null'],
                                            items: {
                                              type: ['string', 'null'],
                                            },
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    matchLabels: {
                                      description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                                      type: 'object',
                                      additionalProperties: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                namespaces: {
                                  description: 'namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod\'s namespace"',
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                                topologyKey: {
                                  description: 'This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
                                  type: 'string',
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                        },
                        additionalProperties: false,
                      },
                    },
                    additionalProperties: false,
                  },
                  automountServiceAccountToken: {
                    description: 'AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.',
                    type: 'boolean',
                  },
                  containers: {
                    description: 'List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.',
                    type: 'array',
                    items: {
                      description: 'A single application container that you want to run within a pod.',
                      required: ['name'],
                      properties: {
                        args: {
                          description:
                            "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                          type: ['array', 'null'],
                          items: {
                            type: ['string', 'null'],
                          },
                        },
                        command: {
                          description:
                            "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                          type: ['array', 'null'],
                          items: {
                            type: ['string', 'null'],
                          },
                        },
                        env: {
                          description: 'List of environment variables to set in the container. Cannot be updated.',
                          type: ['array', 'null'],
                          items: {
                            description: 'EnvVar represents an environment variable present in a Container.',
                            required: ['name'],
                            properties: {
                              name: {
                                description: 'Name of the environment variable. Must be a C_IDENTIFIER.',
                                type: 'string',
                              },
                              value: {
                                description: 'Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".',
                                type: ['string', 'null'],
                              },
                              valueFrom: {
                                description: 'EnvVarSource represents a source for the value of an EnvVar.',
                                properties: {
                                  configMapKeyRef: {
                                    description: 'Selects a key from a ConfigMap.',
                                    required: ['key'],
                                    properties: {
                                      key: {
                                        description: 'The key to select.',
                                        type: 'string',
                                      },
                                      name: {
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                        type: ['string', 'null'],
                                      },
                                      optional: {
                                        description: "Specify whether the ConfigMap or it's key must be defined",
                                        type: 'boolean',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  fieldRef: {
                                    description: 'ObjectFieldSelector selects an APIVersioned field of an object.',
                                    required: ['fieldPath'],
                                    properties: {
                                      apiVersion: {
                                        description: 'Version of the schema the FieldPath is written in terms of, defaults to "v1".',
                                        type: ['string', 'null'],
                                      },
                                      fieldPath: {
                                        description: 'Path of the field to select in the specified API version.',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  resourceFieldRef: {
                                    description: 'ResourceFieldSelector represents container resources (cpu, memory) and their output format',
                                    required: ['resource'],
                                    properties: {
                                      containerName: {
                                        description: 'Container name: required for volumes, optional for env vars',
                                        type: ['string', 'null'],
                                      },
                                      divisor: {
                                        oneOf: [
                                          {
                                            type: ['string', 'null'],
                                          },
                                          {
                                            type: 'integer',
                                          },
                                        ],
                                      },
                                      resource: {
                                        description: 'Required: resource to select',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  secretKeyRef: {
                                    description: 'SecretKeySelector selects a key of a Secret.',
                                    required: ['key'],
                                    properties: {
                                      key: {
                                        description: 'The key of the secret to select from.  Must be a valid secret key.',
                                        type: 'string',
                                      },
                                      name: {
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                        type: ['string', 'null'],
                                      },
                                      optional: {
                                        description: "Specify whether the Secret or it's key must be defined",
                                        type: 'boolean',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                additionalProperties: false,
                              },
                            },
                            additionalProperties: false,
                          },
                          'x-kubernetes-patch-merge-key': 'name',
                          'x-kubernetes-patch-strategy': 'merge',
                        },
                        envFrom: {
                          description: 'List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.',
                          type: ['array', 'null'],
                          items: {
                            description: 'EnvFromSource represents the source of a set of ConfigMaps',
                            properties: {
                              configMapRef: {
                                description: "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
                                properties: {
                                  name: {
                                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                    type: ['string', 'null'],
                                  },
                                  optional: {
                                    description: 'Specify whether the ConfigMap must be defined',
                                    type: 'boolean',
                                  },
                                },
                                additionalProperties: false,
                              },
                              prefix: {
                                description: 'An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.',
                                type: ['string', 'null'],
                              },
                              secretRef: {
                                description: "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
                                properties: {
                                  name: {
                                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                    type: ['string', 'null'],
                                  },
                                  optional: {
                                    description: 'Specify whether the Secret must be defined',
                                    type: 'boolean',
                                  },
                                },
                                additionalProperties: false,
                              },
                            },
                            additionalProperties: false,
                          },
                        },
                        image: {
                          description: 'Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.',
                          type: ['string', 'null'],
                        },
                        imagePullPolicy: {
                          description: 'Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images',
                          type: ['string', 'null'],
                        },
                        lifecycle: {
                          description: 'Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.',
                          properties: {
                            postStart: {
                              description: 'Handler defines a specific action that should be taken',
                              properties: {
                                exec: {
                                  description: 'ExecAction describes a "run in container" action.',
                                  properties: {
                                    command: {
                                      description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                      type: ['array', 'null'],
                                      items: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                httpGet: {
                                  description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                                  required: ['port'],
                                  properties: {
                                    host: {
                                      description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                      type: ['string', 'null'],
                                    },
                                    httpHeaders: {
                                      description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                        required: ['name', 'value'],
                                        properties: {
                                          name: {
                                            description: 'The header field name',
                                            type: 'string',
                                          },
                                          value: {
                                            description: 'The header field value',
                                            type: 'string',
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    path: {
                                      description: 'Path to access on the HTTP server.',
                                      type: ['string', 'null'],
                                    },
                                    port: {
                                      oneOf: [
                                        {
                                          type: ['string', 'null'],
                                        },
                                        {
                                          type: 'integer',
                                        },
                                      ],
                                    },
                                    scheme: {
                                      description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                      type: ['string', 'null'],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                tcpSocket: {
                                  description: 'TCPSocketAction describes an action based on opening a socket',
                                  required: ['port'],
                                  properties: {
                                    host: {
                                      description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                      type: ['string', 'null'],
                                    },
                                    port: {
                                      oneOf: [
                                        {
                                          type: ['string', 'null'],
                                        },
                                        {
                                          type: 'integer',
                                        },
                                      ],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                              },
                              additionalProperties: false,
                            },
                            preStop: {
                              description: 'Handler defines a specific action that should be taken',
                              properties: {
                                exec: {
                                  description: 'ExecAction describes a "run in container" action.',
                                  properties: {
                                    command: {
                                      description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                      type: ['array', 'null'],
                                      items: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                httpGet: {
                                  description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                                  required: ['port'],
                                  properties: {
                                    host: {
                                      description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                      type: ['string', 'null'],
                                    },
                                    httpHeaders: {
                                      description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                        required: ['name', 'value'],
                                        properties: {
                                          name: {
                                            description: 'The header field name',
                                            type: 'string',
                                          },
                                          value: {
                                            description: 'The header field value',
                                            type: 'string',
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    path: {
                                      description: 'Path to access on the HTTP server.',
                                      type: ['string', 'null'],
                                    },
                                    port: {
                                      oneOf: [
                                        {
                                          type: ['string', 'null'],
                                        },
                                        {
                                          type: 'integer',
                                        },
                                      ],
                                    },
                                    scheme: {
                                      description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                      type: ['string', 'null'],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                tcpSocket: {
                                  description: 'TCPSocketAction describes an action based on opening a socket',
                                  required: ['port'],
                                  properties: {
                                    host: {
                                      description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                      type: ['string', 'null'],
                                    },
                                    port: {
                                      oneOf: [
                                        {
                                          type: ['string', 'null'],
                                        },
                                        {
                                          type: 'integer',
                                        },
                                      ],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          additionalProperties: false,
                        },
                        livenessProbe: {
                          description: 'Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.',
                          properties: {
                            exec: {
                              description: 'ExecAction describes a "run in container" action.',
                              properties: {
                                command: {
                                  description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                              },
                              additionalProperties: false,
                            },
                            failureThreshold: {
                              description: 'Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            httpGet: {
                              description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                              required: ['port'],
                              properties: {
                                host: {
                                  description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                  type: ['string', 'null'],
                                },
                                httpHeaders: {
                                  description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                  type: ['array', 'null'],
                                  items: {
                                    description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                    required: ['name', 'value'],
                                    properties: {
                                      name: {
                                        description: 'The header field name',
                                        type: 'string',
                                      },
                                      value: {
                                        description: 'The header field value',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                path: {
                                  description: 'Path to access on the HTTP server.',
                                  type: ['string', 'null'],
                                },
                                port: {
                                  oneOf: [
                                    {
                                      type: ['string', 'null'],
                                    },
                                    {
                                      type: 'integer',
                                    },
                                  ],
                                },
                                scheme: {
                                  description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            initialDelaySeconds: {
                              description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                              type: 'integer',
                              format: 'int32',
                            },
                            periodSeconds: {
                              description: 'How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            successThreshold: {
                              description: 'Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            tcpSocket: {
                              description: 'TCPSocketAction describes an action based on opening a socket',
                              required: ['port'],
                              properties: {
                                host: {
                                  description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                  type: ['string', 'null'],
                                },
                                port: {
                                  oneOf: [
                                    {
                                      type: ['string', 'null'],
                                    },
                                    {
                                      type: 'integer',
                                    },
                                  ],
                                },
                              },
                              additionalProperties: false,
                            },
                            timeoutSeconds: {
                              description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                              type: 'integer',
                              format: 'int32',
                            },
                          },
                          additionalProperties: false,
                        },
                        name: {
                          description: 'Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.',
                          type: 'string',
                        },
                        ports: {
                          description: 'List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.',
                          type: ['array', 'null'],
                          items: {
                            description: 'ContainerPort represents a network port in a single container.',
                            required: ['containerPort'],
                            properties: {
                              containerPort: {
                                description: "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
                                type: 'integer',
                                format: 'int32',
                              },
                              hostIP: {
                                description: 'What host IP to bind the external port to.',
                                type: ['string', 'null'],
                              },
                              hostPort: {
                                description: 'Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.',
                                type: 'integer',
                                format: 'int32',
                              },
                              name: {
                                description: 'If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.',
                                type: ['string', 'null'],
                              },
                              protocol: {
                                description: 'Protocol for port. Must be UDP or TCP. Defaults to "TCP".',
                                type: ['string', 'null'],
                              },
                            },
                            additionalProperties: false,
                          },
                          'x-kubernetes-patch-merge-key': 'containerPort',
                          'x-kubernetes-patch-strategy': 'merge',
                        },
                        readinessProbe: {
                          description: 'Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.',
                          properties: {
                            exec: {
                              description: 'ExecAction describes a "run in container" action.',
                              properties: {
                                command: {
                                  description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                              },
                              additionalProperties: false,
                            },
                            failureThreshold: {
                              description: 'Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            httpGet: {
                              description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                              required: ['port'],
                              properties: {
                                host: {
                                  description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                  type: ['string', 'null'],
                                },
                                httpHeaders: {
                                  description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                  type: ['array', 'null'],
                                  items: {
                                    description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                    required: ['name', 'value'],
                                    properties: {
                                      name: {
                                        description: 'The header field name',
                                        type: 'string',
                                      },
                                      value: {
                                        description: 'The header field value',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                path: {
                                  description: 'Path to access on the HTTP server.',
                                  type: ['string', 'null'],
                                },
                                port: {
                                  oneOf: [
                                    {
                                      type: ['string', 'null'],
                                    },
                                    {
                                      type: 'integer',
                                    },
                                  ],
                                },
                                scheme: {
                                  description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            initialDelaySeconds: {
                              description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                              type: 'integer',
                              format: 'int32',
                            },
                            periodSeconds: {
                              description: 'How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            successThreshold: {
                              description: 'Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            tcpSocket: {
                              description: 'TCPSocketAction describes an action based on opening a socket',
                              required: ['port'],
                              properties: {
                                host: {
                                  description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                  type: ['string', 'null'],
                                },
                                port: {
                                  oneOf: [
                                    {
                                      type: ['string', 'null'],
                                    },
                                    {
                                      type: 'integer',
                                    },
                                  ],
                                },
                              },
                              additionalProperties: false,
                            },
                            timeoutSeconds: {
                              description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                              type: 'integer',
                              format: 'int32',
                            },
                          },
                          additionalProperties: false,
                        },
                        resources: {
                          description: 'ResourceRequirements describes the compute resource requirements.',
                          properties: {
                            limits: {
                              description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/',
                              type: 'object',
                              additionalProperties: {
                                oneOf: [
                                  {
                                    type: ['string', 'null'],
                                  },
                                  {
                                    type: 'integer',
                                  },
                                ],
                              },
                            },
                            requests: {
                              description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/',
                              type: 'object',
                              additionalProperties: {
                                oneOf: [
                                  {
                                    type: ['string', 'null'],
                                  },
                                  {
                                    type: 'integer',
                                  },
                                ],
                              },
                            },
                          },
                          additionalProperties: false,
                        },
                        securityContext: {
                          description: 'SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.',
                          properties: {
                            allowPrivilegeEscalation: {
                              description: 'AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN',
                              type: 'boolean',
                            },
                            capabilities: {
                              description: 'Adds and removes POSIX capabilities from running containers.',
                              properties: {
                                add: {
                                  description: 'Added capabilities',
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                                drop: {
                                  description: 'Removed capabilities',
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                              },
                              additionalProperties: false,
                            },
                            privileged: {
                              description: 'Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.',
                              type: 'boolean',
                            },
                            readOnlyRootFilesystem: {
                              description: 'Whether this container has a read-only root filesystem. Default is false.',
                              type: 'boolean',
                            },
                            runAsGroup: {
                              description: 'The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                              type: 'integer',
                              format: 'int64',
                            },
                            runAsNonRoot: {
                              description: 'Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                              type: 'boolean',
                            },
                            runAsUser: {
                              description: 'The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                              type: 'integer',
                              format: 'int64',
                            },
                            seLinuxOptions: {
                              description: 'SELinuxOptions are the labels to be applied to the container',
                              properties: {
                                level: {
                                  description: 'Level is SELinux level label that applies to the container.',
                                  type: ['string', 'null'],
                                },
                                role: {
                                  description: 'Role is a SELinux role label that applies to the container.',
                                  type: ['string', 'null'],
                                },
                                type: {
                                  description: 'Type is a SELinux type label that applies to the container.',
                                  type: ['string', 'null'],
                                },
                                user: {
                                  description: 'User is a SELinux user label that applies to the container.',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          additionalProperties: false,
                        },
                        stdin: {
                          description: 'Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.',
                          type: 'boolean',
                        },
                        stdinOnce: {
                          description:
                            'Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false',
                          type: 'boolean',
                        },
                        terminationMessagePath: {
                          description: "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                          type: ['string', 'null'],
                        },
                        terminationMessagePolicy: {
                          description: 'Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.',
                          type: ['string', 'null'],
                        },
                        tty: {
                          description: "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                          type: 'boolean',
                        },
                        volumeDevices: {
                          description: 'volumeDevices is the list of block devices to be used by the container. This is an alpha feature and may change in the future.',
                          type: ['array', 'null'],
                          items: {
                            description: 'volumeDevice describes a mapping of a raw block device within a container.',
                            required: ['name', 'devicePath'],
                            properties: {
                              devicePath: {
                                description: 'devicePath is the path inside of the container that the device will be mapped to.',
                                type: 'string',
                              },
                              name: {
                                description: 'name must match the name of a persistentVolumeClaim in the pod',
                                type: 'string',
                              },
                            },
                            additionalProperties: false,
                          },
                          'x-kubernetes-patch-merge-key': 'devicePath',
                          'x-kubernetes-patch-strategy': 'merge',
                        },
                        volumeMounts: {
                          description: "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                          type: ['array', 'null'],
                          items: {
                            description: 'VolumeMount describes a mounting of a Volume within a container.',
                            required: ['name', 'mountPath'],
                            properties: {
                              mountPath: {
                                description: "Path within the container at which the volume should be mounted.  Must not contain ':'.",
                                type: 'string',
                              },
                              mountPropagation: {
                                description: 'mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.',
                                type: ['string', 'null'],
                              },
                              name: {
                                description: 'This must match the Name of a Volume.',
                                type: 'string',
                              },
                              readOnly: {
                                description: 'Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.',
                                type: 'boolean',
                              },
                              subPath: {
                                description: 'Path within the volume from which the container\'s volume should be mounted. Defaults to "" (volume\'s root).',
                                type: ['string', 'null'],
                              },
                            },
                            additionalProperties: false,
                          },
                          'x-kubernetes-patch-merge-key': 'mountPath',
                          'x-kubernetes-patch-strategy': 'merge',
                        },
                        workingDir: {
                          description: "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                          type: ['string', 'null'],
                        },
                      },
                      additionalProperties: false,
                    },
                    'x-kubernetes-patch-merge-key': 'name',
                    'x-kubernetes-patch-strategy': 'merge',
                  },
                  dnsConfig: {
                    description: 'PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.',
                    properties: {
                      nameservers: {
                        description: 'A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.',
                        type: ['array', 'null'],
                        items: {
                          type: ['string', 'null'],
                        },
                      },
                      options: {
                        description: 'A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.',
                        type: ['array', 'null'],
                        items: {
                          description: 'PodDNSConfigOption defines DNS resolver options of a pod.',
                          properties: {
                            name: {
                              description: 'Required.',
                              type: ['string', 'null'],
                            },
                            value: {
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                      },
                      searches: {
                        description: 'A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.',
                        type: ['array', 'null'],
                        items: {
                          type: ['string', 'null'],
                        },
                      },
                    },
                    additionalProperties: false,
                  },
                  dnsPolicy: {
                    description: "Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.",
                    type: ['string', 'null'],
                  },
                  hostAliases: {
                    description: "HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.",
                    type: ['array', 'null'],
                    items: {
                      description: "HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.",
                      properties: {
                        hostnames: {
                          description: 'Hostnames for the above IP address.',
                          type: ['array', 'null'],
                          items: {
                            type: ['string', 'null'],
                          },
                        },
                        ip: {
                          description: 'IP address of the host file entry.',
                          type: ['string', 'null'],
                        },
                      },
                      additionalProperties: false,
                    },
                    'x-kubernetes-patch-merge-key': 'ip',
                    'x-kubernetes-patch-strategy': 'merge',
                  },
                  hostIPC: {
                    description: "Use the host's ipc namespace. Optional: Default to false.",
                    type: 'boolean',
                  },
                  hostNetwork: {
                    description: "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.",
                    type: 'boolean',
                  },
                  hostPID: {
                    description: "Use the host's pid namespace. Optional: Default to false.",
                    type: 'boolean',
                  },
                  hostname: {
                    description: "Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.",
                    type: ['string', 'null'],
                  },
                  imagePullSecrets: {
                    description: 'ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod',
                    type: ['array', 'null'],
                    items: {
                      description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                      properties: {
                        name: {
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                          type: ['string', 'null'],
                        },
                      },
                      additionalProperties: false,
                    },
                    'x-kubernetes-patch-merge-key': 'name',
                    'x-kubernetes-patch-strategy': 'merge',
                  },
                  initContainers: {
                    description:
                      'List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/',
                    type: ['array', 'null'],
                    items: {
                      description: 'A single application container that you want to run within a pod.',
                      required: ['name'],
                      properties: {
                        args: {
                          description:
                            "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                          type: ['array', 'null'],
                          items: {
                            type: ['string', 'null'],
                          },
                        },
                        command: {
                          description:
                            "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                          type: ['array', 'null'],
                          items: {
                            type: ['string', 'null'],
                          },
                        },
                        env: {
                          description: 'List of environment variables to set in the container. Cannot be updated.',
                          type: ['array', 'null'],
                          items: {
                            description: 'EnvVar represents an environment variable present in a Container.',
                            required: ['name'],
                            properties: {
                              name: {
                                description: 'Name of the environment variable. Must be a C_IDENTIFIER.',
                                type: 'string',
                              },
                              value: {
                                description: 'Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".',
                                type: ['string', 'null'],
                              },
                              valueFrom: {
                                description: 'EnvVarSource represents a source for the value of an EnvVar.',
                                properties: {
                                  configMapKeyRef: {
                                    description: 'Selects a key from a ConfigMap.',
                                    required: ['key'],
                                    properties: {
                                      key: {
                                        description: 'The key to select.',
                                        type: 'string',
                                      },
                                      name: {
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                        type: ['string', 'null'],
                                      },
                                      optional: {
                                        description: "Specify whether the ConfigMap or it's key must be defined",
                                        type: 'boolean',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  fieldRef: {
                                    description: 'ObjectFieldSelector selects an APIVersioned field of an object.',
                                    required: ['fieldPath'],
                                    properties: {
                                      apiVersion: {
                                        description: 'Version of the schema the FieldPath is written in terms of, defaults to "v1".',
                                        type: ['string', 'null'],
                                      },
                                      fieldPath: {
                                        description: 'Path of the field to select in the specified API version.',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  resourceFieldRef: {
                                    description: 'ResourceFieldSelector represents container resources (cpu, memory) and their output format',
                                    required: ['resource'],
                                    properties: {
                                      containerName: {
                                        description: 'Container name: required for volumes, optional for env vars',
                                        type: ['string', 'null'],
                                      },
                                      divisor: {
                                        oneOf: [
                                          {
                                            type: ['string', 'null'],
                                          },
                                          {
                                            type: 'integer',
                                          },
                                        ],
                                      },
                                      resource: {
                                        description: 'Required: resource to select',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  secretKeyRef: {
                                    description: 'SecretKeySelector selects a key of a Secret.',
                                    required: ['key'],
                                    properties: {
                                      key: {
                                        description: 'The key of the secret to select from.  Must be a valid secret key.',
                                        type: 'string',
                                      },
                                      name: {
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                        type: ['string', 'null'],
                                      },
                                      optional: {
                                        description: "Specify whether the Secret or it's key must be defined",
                                        type: 'boolean',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                additionalProperties: false,
                              },
                            },
                            additionalProperties: false,
                          },
                          'x-kubernetes-patch-merge-key': 'name',
                          'x-kubernetes-patch-strategy': 'merge',
                        },
                        envFrom: {
                          description: 'List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.',
                          type: ['array', 'null'],
                          items: {
                            description: 'EnvFromSource represents the source of a set of ConfigMaps',
                            properties: {
                              configMapRef: {
                                description: "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
                                properties: {
                                  name: {
                                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                    type: ['string', 'null'],
                                  },
                                  optional: {
                                    description: 'Specify whether the ConfigMap must be defined',
                                    type: 'boolean',
                                  },
                                },
                                additionalProperties: false,
                              },
                              prefix: {
                                description: 'An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.',
                                type: ['string', 'null'],
                              },
                              secretRef: {
                                description: "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
                                properties: {
                                  name: {
                                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                    type: ['string', 'null'],
                                  },
                                  optional: {
                                    description: 'Specify whether the Secret must be defined',
                                    type: 'boolean',
                                  },
                                },
                                additionalProperties: false,
                              },
                            },
                            additionalProperties: false,
                          },
                        },
                        image: {
                          description: 'Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.',
                          type: ['string', 'null'],
                        },
                        imagePullPolicy: {
                          description: 'Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images',
                          type: ['string', 'null'],
                        },
                        lifecycle: {
                          description: 'Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.',
                          properties: {
                            postStart: {
                              description: 'Handler defines a specific action that should be taken',
                              properties: {
                                exec: {
                                  description: 'ExecAction describes a "run in container" action.',
                                  properties: {
                                    command: {
                                      description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                      type: ['array', 'null'],
                                      items: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                httpGet: {
                                  description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                                  required: ['port'],
                                  properties: {
                                    host: {
                                      description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                      type: ['string', 'null'],
                                    },
                                    httpHeaders: {
                                      description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                        required: ['name', 'value'],
                                        properties: {
                                          name: {
                                            description: 'The header field name',
                                            type: 'string',
                                          },
                                          value: {
                                            description: 'The header field value',
                                            type: 'string',
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    path: {
                                      description: 'Path to access on the HTTP server.',
                                      type: ['string', 'null'],
                                    },
                                    port: {
                                      oneOf: [
                                        {
                                          type: ['string', 'null'],
                                        },
                                        {
                                          type: 'integer',
                                        },
                                      ],
                                    },
                                    scheme: {
                                      description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                      type: ['string', 'null'],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                tcpSocket: {
                                  description: 'TCPSocketAction describes an action based on opening a socket',
                                  required: ['port'],
                                  properties: {
                                    host: {
                                      description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                      type: ['string', 'null'],
                                    },
                                    port: {
                                      oneOf: [
                                        {
                                          type: ['string', 'null'],
                                        },
                                        {
                                          type: 'integer',
                                        },
                                      ],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                              },
                              additionalProperties: false,
                            },
                            preStop: {
                              description: 'Handler defines a specific action that should be taken',
                              properties: {
                                exec: {
                                  description: 'ExecAction describes a "run in container" action.',
                                  properties: {
                                    command: {
                                      description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                      type: ['array', 'null'],
                                      items: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                httpGet: {
                                  description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                                  required: ['port'],
                                  properties: {
                                    host: {
                                      description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                      type: ['string', 'null'],
                                    },
                                    httpHeaders: {
                                      description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                        required: ['name', 'value'],
                                        properties: {
                                          name: {
                                            description: 'The header field name',
                                            type: 'string',
                                          },
                                          value: {
                                            description: 'The header field value',
                                            type: 'string',
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    path: {
                                      description: 'Path to access on the HTTP server.',
                                      type: ['string', 'null'],
                                    },
                                    port: {
                                      oneOf: [
                                        {
                                          type: ['string', 'null'],
                                        },
                                        {
                                          type: 'integer',
                                        },
                                      ],
                                    },
                                    scheme: {
                                      description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                      type: ['string', 'null'],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                tcpSocket: {
                                  description: 'TCPSocketAction describes an action based on opening a socket',
                                  required: ['port'],
                                  properties: {
                                    host: {
                                      description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                      type: ['string', 'null'],
                                    },
                                    port: {
                                      oneOf: [
                                        {
                                          type: ['string', 'null'],
                                        },
                                        {
                                          type: 'integer',
                                        },
                                      ],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          additionalProperties: false,
                        },
                        livenessProbe: {
                          description: 'Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.',
                          properties: {
                            exec: {
                              description: 'ExecAction describes a "run in container" action.',
                              properties: {
                                command: {
                                  description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                              },
                              additionalProperties: false,
                            },
                            failureThreshold: {
                              description: 'Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            httpGet: {
                              description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                              required: ['port'],
                              properties: {
                                host: {
                                  description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                  type: ['string', 'null'],
                                },
                                httpHeaders: {
                                  description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                  type: ['array', 'null'],
                                  items: {
                                    description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                    required: ['name', 'value'],
                                    properties: {
                                      name: {
                                        description: 'The header field name',
                                        type: 'string',
                                      },
                                      value: {
                                        description: 'The header field value',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                path: {
                                  description: 'Path to access on the HTTP server.',
                                  type: ['string', 'null'],
                                },
                                port: {
                                  oneOf: [
                                    {
                                      type: ['string', 'null'],
                                    },
                                    {
                                      type: 'integer',
                                    },
                                  ],
                                },
                                scheme: {
                                  description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            initialDelaySeconds: {
                              description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                              type: 'integer',
                              format: 'int32',
                            },
                            periodSeconds: {
                              description: 'How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            successThreshold: {
                              description: 'Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            tcpSocket: {
                              description: 'TCPSocketAction describes an action based on opening a socket',
                              required: ['port'],
                              properties: {
                                host: {
                                  description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                  type: ['string', 'null'],
                                },
                                port: {
                                  oneOf: [
                                    {
                                      type: ['string', 'null'],
                                    },
                                    {
                                      type: 'integer',
                                    },
                                  ],
                                },
                              },
                              additionalProperties: false,
                            },
                            timeoutSeconds: {
                              description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                              type: 'integer',
                              format: 'int32',
                            },
                          },
                          additionalProperties: false,
                        },
                        name: {
                          description: 'Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.',
                          type: 'string',
                        },
                        ports: {
                          description: 'List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.',
                          type: ['array', 'null'],
                          items: {
                            description: 'ContainerPort represents a network port in a single container.',
                            required: ['containerPort'],
                            properties: {
                              containerPort: {
                                description: "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
                                type: 'integer',
                                format: 'int32',
                              },
                              hostIP: {
                                description: 'What host IP to bind the external port to.',
                                type: ['string', 'null'],
                              },
                              hostPort: {
                                description: 'Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.',
                                type: 'integer',
                                format: 'int32',
                              },
                              name: {
                                description: 'If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.',
                                type: ['string', 'null'],
                              },
                              protocol: {
                                description: 'Protocol for port. Must be UDP or TCP. Defaults to "TCP".',
                                type: ['string', 'null'],
                              },
                            },
                            additionalProperties: false,
                          },
                          'x-kubernetes-patch-merge-key': 'containerPort',
                          'x-kubernetes-patch-strategy': 'merge',
                        },
                        readinessProbe: {
                          description: 'Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.',
                          properties: {
                            exec: {
                              description: 'ExecAction describes a "run in container" action.',
                              properties: {
                                command: {
                                  description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                              },
                              additionalProperties: false,
                            },
                            failureThreshold: {
                              description: 'Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            httpGet: {
                              description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                              required: ['port'],
                              properties: {
                                host: {
                                  description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                  type: ['string', 'null'],
                                },
                                httpHeaders: {
                                  description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                  type: ['array', 'null'],
                                  items: {
                                    description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                    required: ['name', 'value'],
                                    properties: {
                                      name: {
                                        description: 'The header field name',
                                        type: 'string',
                                      },
                                      value: {
                                        description: 'The header field value',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                path: {
                                  description: 'Path to access on the HTTP server.',
                                  type: ['string', 'null'],
                                },
                                port: {
                                  oneOf: [
                                    {
                                      type: ['string', 'null'],
                                    },
                                    {
                                      type: 'integer',
                                    },
                                  ],
                                },
                                scheme: {
                                  description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            initialDelaySeconds: {
                              description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                              type: 'integer',
                              format: 'int32',
                            },
                            periodSeconds: {
                              description: 'How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            successThreshold: {
                              description: 'Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.',
                              type: 'integer',
                              format: 'int32',
                            },
                            tcpSocket: {
                              description: 'TCPSocketAction describes an action based on opening a socket',
                              required: ['port'],
                              properties: {
                                host: {
                                  description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                  type: ['string', 'null'],
                                },
                                port: {
                                  oneOf: [
                                    {
                                      type: ['string', 'null'],
                                    },
                                    {
                                      type: 'integer',
                                    },
                                  ],
                                },
                              },
                              additionalProperties: false,
                            },
                            timeoutSeconds: {
                              description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                              type: 'integer',
                              format: 'int32',
                            },
                          },
                          additionalProperties: false,
                        },
                        resources: {
                          description: 'ResourceRequirements describes the compute resource requirements.',
                          properties: {
                            limits: {
                              description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/',
                              type: 'object',
                              additionalProperties: {
                                oneOf: [
                                  {
                                    type: ['string', 'null'],
                                  },
                                  {
                                    type: 'integer',
                                  },
                                ],
                              },
                            },
                            requests: {
                              description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/',
                              type: 'object',
                              additionalProperties: {
                                oneOf: [
                                  {
                                    type: ['string', 'null'],
                                  },
                                  {
                                    type: 'integer',
                                  },
                                ],
                              },
                            },
                          },
                          additionalProperties: false,
                        },
                        securityContext: {
                          description: 'SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.',
                          properties: {
                            allowPrivilegeEscalation: {
                              description: 'AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN',
                              type: 'boolean',
                            },
                            capabilities: {
                              description: 'Adds and removes POSIX capabilities from running containers.',
                              properties: {
                                add: {
                                  description: 'Added capabilities',
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                                drop: {
                                  description: 'Removed capabilities',
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                              },
                              additionalProperties: false,
                            },
                            privileged: {
                              description: 'Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.',
                              type: 'boolean',
                            },
                            readOnlyRootFilesystem: {
                              description: 'Whether this container has a read-only root filesystem. Default is false.',
                              type: 'boolean',
                            },
                            runAsGroup: {
                              description: 'The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                              type: 'integer',
                              format: 'int64',
                            },
                            runAsNonRoot: {
                              description: 'Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                              type: 'boolean',
                            },
                            runAsUser: {
                              description: 'The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                              type: 'integer',
                              format: 'int64',
                            },
                            seLinuxOptions: {
                              description: 'SELinuxOptions are the labels to be applied to the container',
                              properties: {
                                level: {
                                  description: 'Level is SELinux level label that applies to the container.',
                                  type: ['string', 'null'],
                                },
                                role: {
                                  description: 'Role is a SELinux role label that applies to the container.',
                                  type: ['string', 'null'],
                                },
                                type: {
                                  description: 'Type is a SELinux type label that applies to the container.',
                                  type: ['string', 'null'],
                                },
                                user: {
                                  description: 'User is a SELinux user label that applies to the container.',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          additionalProperties: false,
                        },
                        stdin: {
                          description: 'Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.',
                          type: 'boolean',
                        },
                        stdinOnce: {
                          description:
                            'Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false',
                          type: 'boolean',
                        },
                        terminationMessagePath: {
                          description: "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                          type: ['string', 'null'],
                        },
                        terminationMessagePolicy: {
                          description: 'Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.',
                          type: ['string', 'null'],
                        },
                        tty: {
                          description: "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                          type: 'boolean',
                        },
                        volumeDevices: {
                          description: 'volumeDevices is the list of block devices to be used by the container. This is an alpha feature and may change in the future.',
                          type: ['array', 'null'],
                          items: {
                            description: 'volumeDevice describes a mapping of a raw block device within a container.',
                            required: ['name', 'devicePath'],
                            properties: {
                              devicePath: {
                                description: 'devicePath is the path inside of the container that the device will be mapped to.',
                                type: 'string',
                              },
                              name: {
                                description: 'name must match the name of a persistentVolumeClaim in the pod',
                                type: 'string',
                              },
                            },
                            additionalProperties: false,
                          },
                          'x-kubernetes-patch-merge-key': 'devicePath',
                          'x-kubernetes-patch-strategy': 'merge',
                        },
                        volumeMounts: {
                          description: "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                          type: ['array', 'null'],
                          items: {
                            description: 'VolumeMount describes a mounting of a Volume within a container.',
                            required: ['name', 'mountPath'],
                            properties: {
                              mountPath: {
                                description: "Path within the container at which the volume should be mounted.  Must not contain ':'.",
                                type: 'string',
                              },
                              mountPropagation: {
                                description: 'mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.',
                                type: ['string', 'null'],
                              },
                              name: {
                                description: 'This must match the Name of a Volume.',
                                type: 'string',
                              },
                              readOnly: {
                                description: 'Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.',
                                type: 'boolean',
                              },
                              subPath: {
                                description: 'Path within the volume from which the container\'s volume should be mounted. Defaults to "" (volume\'s root).',
                                type: ['string', 'null'],
                              },
                            },
                            additionalProperties: false,
                          },
                          'x-kubernetes-patch-merge-key': 'mountPath',
                          'x-kubernetes-patch-strategy': 'merge',
                        },
                        workingDir: {
                          description: "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                          type: ['string', 'null'],
                        },
                      },
                      additionalProperties: false,
                    },
                    'x-kubernetes-patch-merge-key': 'name',
                    'x-kubernetes-patch-strategy': 'merge',
                  },
                  nodeName: {
                    description: 'NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.',
                    type: ['string', 'null'],
                  },
                  nodeSelector: {
                    description: "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
                    type: 'object',
                    additionalProperties: {
                      type: ['string', 'null'],
                    },
                  },
                  priority: {
                    description: 'The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.',
                    type: 'integer',
                    format: 'int32',
                  },
                  priorityClassName: {
                    description: 'If specified, indicates the pod\'s priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.',
                    type: ['string', 'null'],
                  },
                  readinessGates: {
                    description: 'If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://github.com/kubernetes/community/blob/master/keps/sig-network/0007-pod-ready%2B%2B.md',
                    type: ['array', 'null'],
                    items: {
                      description: 'PodReadinessGate contains the reference to a pod condition',
                      required: ['conditionType'],
                      properties: {
                        conditionType: {
                          description: "ConditionType refers to a condition in the pod's condition list with matching type.",
                          type: 'string',
                        },
                      },
                      additionalProperties: false,
                    },
                  },
                  restartPolicy: {
                    description: 'Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy',
                    type: ['string', 'null'],
                  },
                  schedulerName: {
                    description: 'If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.',
                    type: ['string', 'null'],
                  },
                  securityContext: {
                    description: 'PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.',
                    properties: {
                      fsGroup: {
                        description: "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume.",
                        type: 'integer',
                        format: 'int64',
                      },
                      runAsGroup: {
                        description: 'The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.',
                        type: 'integer',
                        format: 'int64',
                      },
                      runAsNonRoot: {
                        description: 'Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                        type: 'boolean',
                      },
                      runAsUser: {
                        description: 'The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.',
                        type: 'integer',
                        format: 'int64',
                      },
                      seLinuxOptions: {
                        description: 'SELinuxOptions are the labels to be applied to the container',
                        properties: {
                          level: {
                            description: 'Level is SELinux level label that applies to the container.',
                            type: ['string', 'null'],
                          },
                          role: {
                            description: 'Role is a SELinux role label that applies to the container.',
                            type: ['string', 'null'],
                          },
                          type: {
                            description: 'Type is a SELinux type label that applies to the container.',
                            type: ['string', 'null'],
                          },
                          user: {
                            description: 'User is a SELinux user label that applies to the container.',
                            type: ['string', 'null'],
                          },
                        },
                        additionalProperties: false,
                      },
                      supplementalGroups: {
                        description: "A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.",
                        type: ['array', 'null'],
                        items: {
                          type: 'integer',
                          format: 'int64',
                        },
                      },
                      sysctls: {
                        description: 'Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.',
                        type: ['array', 'null'],
                        items: {
                          description: 'Sysctl defines a kernel parameter to be set',
                          required: ['name', 'value'],
                          properties: {
                            name: {
                              description: 'Name of a property to set',
                              type: 'string',
                            },
                            value: {
                              description: 'Value of a property to set',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                      },
                    },
                    additionalProperties: false,
                  },
                  serviceAccount: {
                    description: 'DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.',
                    type: ['string', 'null'],
                  },
                  serviceAccountName: {
                    description: 'ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/',
                    type: ['string', 'null'],
                  },
                  shareProcessNamespace: {
                    description: 'Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false. This field is alpha-level and is honored only by servers that enable the PodShareProcessNamespace feature.',
                    type: 'boolean',
                  },
                  subdomain: {
                    description: 'If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.',
                    type: ['string', 'null'],
                  },
                  terminationGracePeriodSeconds: {
                    description:
                      'Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.',
                    type: 'integer',
                    format: 'int64',
                  },
                  tolerations: {
                    description: "If specified, the pod's tolerations.",
                    type: ['array', 'null'],
                    items: {
                      description: 'The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.',
                      properties: {
                        effect: {
                          description: 'Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.',
                          type: ['string', 'null'],
                        },
                        key: {
                          description: 'Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.',
                          type: ['string', 'null'],
                        },
                        operator: {
                          description: "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                          type: ['string', 'null'],
                        },
                        tolerationSeconds: {
                          description: 'TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.',
                          type: 'integer',
                          format: 'int64',
                        },
                        value: {
                          description: 'Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.',
                          type: ['string', 'null'],
                        },
                      },
                      additionalProperties: false,
                    },
                  },
                  volumes: {
                    description: 'List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes',
                    type: ['array', 'null'],
                    items: {
                      description: 'Volume represents a named volume in a pod that may be accessed by any container in the pod.',
                      required: ['name'],
                      properties: {
                        awsElasticBlockStore: {
                          description: 'Represents a Persistent Disk resource in AWS.\n\nAn AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.',
                          required: ['volumeID'],
                          properties: {
                            fsType: {
                              description: 'Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore',
                              type: ['string', 'null'],
                            },
                            partition: {
                              description: 'The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).',
                              type: 'integer',
                              format: 'int32',
                            },
                            readOnly: {
                              description: 'Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore',
                              type: 'boolean',
                            },
                            volumeID: {
                              description: 'Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        azureDisk: {
                          description: 'AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.',
                          required: ['diskName', 'diskURI'],
                          properties: {
                            cachingMode: {
                              description: 'Host Caching mode: None, Read Only, Read Write.',
                              type: ['string', 'null'],
                            },
                            diskName: {
                              description: 'The Name of the data disk in the blob storage',
                              type: 'string',
                            },
                            diskURI: {
                              description: 'The URI the data disk in the blob storage',
                              type: 'string',
                            },
                            fsType: {
                              description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                              type: ['string', 'null'],
                            },
                            kind: {
                              description: 'Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared',
                              type: ['string', 'null'],
                            },
                            readOnly: {
                              description: 'Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                              type: 'boolean',
                            },
                          },
                          additionalProperties: false,
                        },
                        azureFile: {
                          description: 'AzureFile represents an Azure File Service mount on the host and bind mount to the pod.',
                          required: ['secretName', 'shareName'],
                          properties: {
                            readOnly: {
                              description: 'Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                              type: 'boolean',
                            },
                            secretName: {
                              description: 'the name of secret that contains Azure Storage Account Name and Key',
                              type: 'string',
                            },
                            shareName: {
                              description: 'Share Name',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        cephfs: {
                          description: 'Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.',
                          required: ['monitors'],
                          properties: {
                            monitors: {
                              description: 'Required: Monitors is a collection of Ceph monitors More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it',
                              type: 'array',
                              items: {
                                type: ['string', 'null'],
                              },
                            },
                            path: {
                              description: 'Optional: Used as the mounted root, rather than the full Ceph tree, default is /',
                              type: ['string', 'null'],
                            },
                            readOnly: {
                              description: 'Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it',
                              type: 'boolean',
                            },
                            secretFile: {
                              description: 'Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it',
                              type: ['string', 'null'],
                            },
                            secretRef: {
                              description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                              properties: {
                                name: {
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            user: {
                              description: 'Optional: User is the rados user name, default is admin More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                        cinder: {
                          description: 'Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.',
                          required: ['volumeID'],
                          properties: {
                            fsType: {
                              description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md',
                              type: ['string', 'null'],
                            },
                            readOnly: {
                              description: 'Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md',
                              type: 'boolean',
                            },
                            secretRef: {
                              description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                              properties: {
                                name: {
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            volumeID: {
                              description: 'volume id used to identify the volume in cinder More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        configMap: {
                          description: "Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.",
                          properties: {
                            defaultMode: {
                              description: 'Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                              type: 'integer',
                              format: 'int32',
                            },
                            items: {
                              description:
                                "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                              type: ['array', 'null'],
                              items: {
                                description: 'Maps a string key to a path within a volume.',
                                required: ['key', 'path'],
                                properties: {
                                  key: {
                                    description: 'The key to project.',
                                    type: 'string',
                                  },
                                  mode: {
                                    description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                    type: 'integer',
                                    format: 'int32',
                                  },
                                  path: {
                                    description: "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                                    type: 'string',
                                  },
                                },
                                additionalProperties: false,
                              },
                            },
                            name: {
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                              type: ['string', 'null'],
                            },
                            optional: {
                              description: "Specify whether the ConfigMap or it's keys must be defined",
                              type: 'boolean',
                            },
                          },
                          additionalProperties: false,
                        },
                        downwardAPI: {
                          description: 'DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.',
                          properties: {
                            defaultMode: {
                              description: 'Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                              type: 'integer',
                              format: 'int32',
                            },
                            items: {
                              description: 'Items is a list of downward API volume file',
                              type: ['array', 'null'],
                              items: {
                                description: 'DownwardAPIVolumeFile represents information to create the file containing the pod field',
                                required: ['path'],
                                properties: {
                                  fieldRef: {
                                    description: 'ObjectFieldSelector selects an APIVersioned field of an object.',
                                    required: ['fieldPath'],
                                    properties: {
                                      apiVersion: {
                                        description: 'Version of the schema the FieldPath is written in terms of, defaults to "v1".',
                                        type: ['string', 'null'],
                                      },
                                      fieldPath: {
                                        description: 'Path of the field to select in the specified API version.',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  mode: {
                                    description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                    type: 'integer',
                                    format: 'int32',
                                  },
                                  path: {
                                    description: "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
                                    type: 'string',
                                  },
                                  resourceFieldRef: {
                                    description: 'ResourceFieldSelector represents container resources (cpu, memory) and their output format',
                                    required: ['resource'],
                                    properties: {
                                      containerName: {
                                        description: 'Container name: required for volumes, optional for env vars',
                                        type: ['string', 'null'],
                                      },
                                      divisor: {
                                        oneOf: [
                                          {
                                            type: ['string', 'null'],
                                          },
                                          {
                                            type: 'integer',
                                          },
                                        ],
                                      },
                                      resource: {
                                        description: 'Required: resource to select',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                additionalProperties: false,
                              },
                            },
                          },
                          additionalProperties: false,
                        },
                        emptyDir: {
                          description: 'Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.',
                          properties: {
                            medium: {
                              description: 'What type of storage medium should back this directory. The default is "" which means to use the node\'s default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir',
                              type: ['string', 'null'],
                            },
                            sizeLimit: {
                              oneOf: [
                                {
                                  type: ['string', 'null'],
                                },
                                {
                                  type: 'integer',
                                },
                              ],
                            },
                          },
                          additionalProperties: false,
                        },
                        fc: {
                          description: 'Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.',
                          properties: {
                            fsType: {
                              description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                              type: ['string', 'null'],
                            },
                            lun: {
                              description: 'Optional: FC target lun number',
                              type: 'integer',
                              format: 'int32',
                            },
                            readOnly: {
                              description: 'Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                              type: 'boolean',
                            },
                            targetWWNs: {
                              description: 'Optional: FC target worldwide names (WWNs)',
                              type: ['array', 'null'],
                              items: {
                                type: ['string', 'null'],
                              },
                            },
                            wwids: {
                              description: 'Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.',
                              type: ['array', 'null'],
                              items: {
                                type: ['string', 'null'],
                              },
                            },
                          },
                          additionalProperties: false,
                        },
                        flexVolume: {
                          description: 'FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.',
                          required: ['driver'],
                          properties: {
                            driver: {
                              description: 'Driver is the name of the driver to use for this volume.',
                              type: 'string',
                            },
                            fsType: {
                              description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.',
                              type: ['string', 'null'],
                            },
                            options: {
                              description: 'Optional: Extra command options if any.',
                              type: 'object',
                              additionalProperties: {
                                type: ['string', 'null'],
                              },
                            },
                            readOnly: {
                              description: 'Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                              type: 'boolean',
                            },
                            secretRef: {
                              description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                              properties: {
                                name: {
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          additionalProperties: false,
                        },
                        flocker: {
                          description: 'Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.',
                          properties: {
                            datasetName: {
                              description: 'Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated',
                              type: ['string', 'null'],
                            },
                            datasetUUID: {
                              description: 'UUID of the dataset. This is unique identifier of a Flocker dataset',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                        gcePersistentDisk: {
                          description: 'Represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.',
                          required: ['pdName'],
                          properties: {
                            fsType: {
                              description: 'Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
                              type: ['string', 'null'],
                            },
                            partition: {
                              description: 'The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
                              type: 'integer',
                              format: 'int32',
                            },
                            pdName: {
                              description: 'Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
                              type: 'string',
                            },
                            readOnly: {
                              description: 'ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
                              type: 'boolean',
                            },
                          },
                          additionalProperties: false,
                        },
                        gitRepo: {
                          description: "Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.\n\nDEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.",
                          required: ['repository'],
                          properties: {
                            directory: {
                              description: "Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.",
                              type: ['string', 'null'],
                            },
                            repository: {
                              description: 'Repository URL',
                              type: 'string',
                            },
                            revision: {
                              description: 'Commit hash for the specified revision.',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                        glusterfs: {
                          description: 'Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.',
                          required: ['endpoints', 'path'],
                          properties: {
                            endpoints: {
                              description: 'EndpointsName is the endpoint name that details Glusterfs topology. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod',
                              type: 'string',
                            },
                            path: {
                              description: 'Path is the Glusterfs volume path. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod',
                              type: 'string',
                            },
                            readOnly: {
                              description: 'ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod',
                              type: 'boolean',
                            },
                          },
                          additionalProperties: false,
                        },
                        hostPath: {
                          description: 'Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.',
                          required: ['path'],
                          properties: {
                            path: {
                              description: 'Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath',
                              type: 'string',
                            },
                            type: {
                              description: 'Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                        iscsi: {
                          description: 'Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.',
                          required: ['targetPortal', 'iqn', 'lun'],
                          properties: {
                            chapAuthDiscovery: {
                              description: 'whether support iSCSI Discovery CHAP authentication',
                              type: 'boolean',
                            },
                            chapAuthSession: {
                              description: 'whether support iSCSI Session CHAP authentication',
                              type: 'boolean',
                            },
                            fsType: {
                              description: 'Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi',
                              type: ['string', 'null'],
                            },
                            initiatorName: {
                              description: 'Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.',
                              type: ['string', 'null'],
                            },
                            iqn: {
                              description: 'Target iSCSI Qualified Name.',
                              type: 'string',
                            },
                            iscsiInterface: {
                              description: "iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
                              type: ['string', 'null'],
                            },
                            lun: {
                              description: 'iSCSI Target Lun number.',
                              type: 'integer',
                              format: 'int32',
                            },
                            portals: {
                              description: 'iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).',
                              type: ['array', 'null'],
                              items: {
                                type: ['string', 'null'],
                              },
                            },
                            readOnly: {
                              description: 'ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.',
                              type: 'boolean',
                            },
                            secretRef: {
                              description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                              properties: {
                                name: {
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            targetPortal: {
                              description: 'iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        name: {
                          description: "Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                          type: 'string',
                        },
                        nfs: {
                          description: 'Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.',
                          required: ['server', 'path'],
                          properties: {
                            path: {
                              description: 'Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs',
                              type: 'string',
                            },
                            readOnly: {
                              description: 'ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs',
                              type: 'boolean',
                            },
                            server: {
                              description: 'Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        persistentVolumeClaim: {
                          description: "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).",
                          required: ['claimName'],
                          properties: {
                            claimName: {
                              description: 'ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims',
                              type: 'string',
                            },
                            readOnly: {
                              description: 'Will force the ReadOnly setting in VolumeMounts. Default false.',
                              type: 'boolean',
                            },
                          },
                          additionalProperties: false,
                        },
                        photonPersistentDisk: {
                          description: 'Represents a Photon Controller persistent disk resource.',
                          required: ['pdID'],
                          properties: {
                            fsType: {
                              description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                              type: ['string', 'null'],
                            },
                            pdID: {
                              description: 'ID that identifies Photon Controller persistent disk',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        portworxVolume: {
                          description: 'PortworxVolumeSource represents a Portworx volume resource.',
                          required: ['volumeID'],
                          properties: {
                            fsType: {
                              description: 'FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.',
                              type: ['string', 'null'],
                            },
                            readOnly: {
                              description: 'Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                              type: 'boolean',
                            },
                            volumeID: {
                              description: 'VolumeID uniquely identifies a Portworx volume',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        projected: {
                          description: 'Represents a projected volume source',
                          required: ['sources'],
                          properties: {
                            defaultMode: {
                              description: 'Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                              type: 'integer',
                              format: 'int32',
                            },
                            sources: {
                              description: 'list of volume projections',
                              type: 'array',
                              items: {
                                description: 'Projection that may be projected along with other supported volume types',
                                properties: {
                                  configMap: {
                                    description: "Adapts a ConfigMap into a projected volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.",
                                    properties: {
                                      items: {
                                        description:
                                          "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                                        type: ['array', 'null'],
                                        items: {
                                          description: 'Maps a string key to a path within a volume.',
                                          required: ['key', 'path'],
                                          properties: {
                                            key: {
                                              description: 'The key to project.',
                                              type: 'string',
                                            },
                                            mode: {
                                              description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                              type: 'integer',
                                              format: 'int32',
                                            },
                                            path: {
                                              description: "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                                              type: 'string',
                                            },
                                          },
                                          additionalProperties: false,
                                        },
                                      },
                                      name: {
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                        type: ['string', 'null'],
                                      },
                                      optional: {
                                        description: "Specify whether the ConfigMap or it's keys must be defined",
                                        type: 'boolean',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  downwardAPI: {
                                    description: 'Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.',
                                    properties: {
                                      items: {
                                        description: 'Items is a list of DownwardAPIVolume file',
                                        type: ['array', 'null'],
                                        items: {
                                          description: 'DownwardAPIVolumeFile represents information to create the file containing the pod field',
                                          required: ['path'],
                                          properties: {
                                            fieldRef: {
                                              description: 'ObjectFieldSelector selects an APIVersioned field of an object.',
                                              required: ['fieldPath'],
                                              properties: {
                                                apiVersion: {
                                                  description: 'Version of the schema the FieldPath is written in terms of, defaults to "v1".',
                                                  type: ['string', 'null'],
                                                },
                                                fieldPath: {
                                                  description: 'Path of the field to select in the specified API version.',
                                                  type: 'string',
                                                },
                                              },
                                              additionalProperties: false,
                                            },
                                            mode: {
                                              description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                              type: 'integer',
                                              format: 'int32',
                                            },
                                            path: {
                                              description: "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
                                              type: 'string',
                                            },
                                            resourceFieldRef: {
                                              description: 'ResourceFieldSelector represents container resources (cpu, memory) and their output format',
                                              required: ['resource'],
                                              properties: {
                                                containerName: {
                                                  description: 'Container name: required for volumes, optional for env vars',
                                                  type: ['string', 'null'],
                                                },
                                                divisor: {
                                                  oneOf: [
                                                    {
                                                      type: ['string', 'null'],
                                                    },
                                                    {
                                                      type: 'integer',
                                                    },
                                                  ],
                                                },
                                                resource: {
                                                  description: 'Required: resource to select',
                                                  type: 'string',
                                                },
                                              },
                                              additionalProperties: false,
                                            },
                                          },
                                          additionalProperties: false,
                                        },
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  secret: {
                                    description: "Adapts a secret into a projected volume.\n\nThe contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.",
                                    properties: {
                                      items: {
                                        description:
                                          "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                                        type: ['array', 'null'],
                                        items: {
                                          description: 'Maps a string key to a path within a volume.',
                                          required: ['key', 'path'],
                                          properties: {
                                            key: {
                                              description: 'The key to project.',
                                              type: 'string',
                                            },
                                            mode: {
                                              description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                              type: 'integer',
                                              format: 'int32',
                                            },
                                            path: {
                                              description: "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                                              type: 'string',
                                            },
                                          },
                                          additionalProperties: false,
                                        },
                                      },
                                      name: {
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                        type: ['string', 'null'],
                                      },
                                      optional: {
                                        description: 'Specify whether the Secret or its key must be defined',
                                        type: 'boolean',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  serviceAccountToken: {
                                    description: 'ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).',
                                    required: ['path'],
                                    properties: {
                                      audience: {
                                        description: 'Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.',
                                        type: ['string', 'null'],
                                      },
                                      expirationSeconds: {
                                        description: 'ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.',
                                        type: 'integer',
                                        format: 'int64',
                                      },
                                      path: {
                                        description: 'Path is the path relative to the mount point of the file to project the token into.',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                additionalProperties: false,
                              },
                            },
                          },
                          additionalProperties: false,
                        },
                        quobyte: {
                          description: 'Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.',
                          required: ['registry', 'volume'],
                          properties: {
                            group: {
                              description: 'Group to map volume access to Default is no group',
                              type: ['string', 'null'],
                            },
                            readOnly: {
                              description: 'ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.',
                              type: 'boolean',
                            },
                            registry: {
                              description: 'Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes',
                              type: 'string',
                            },
                            user: {
                              description: 'User to map volume access to Defaults to serivceaccount user',
                              type: ['string', 'null'],
                            },
                            volume: {
                              description: 'Volume is a string that references an already created Quobyte volume by name.',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        rbd: {
                          description: 'Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.',
                          required: ['monitors', 'image'],
                          properties: {
                            fsType: {
                              description: 'Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd',
                              type: ['string', 'null'],
                            },
                            image: {
                              description: 'The rados image name. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                              type: 'string',
                            },
                            keyring: {
                              description: 'Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                              type: ['string', 'null'],
                            },
                            monitors: {
                              description: 'A collection of Ceph monitors. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                              type: 'array',
                              items: {
                                type: ['string', 'null'],
                              },
                            },
                            pool: {
                              description: 'The rados pool name. Default is rbd. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                              type: ['string', 'null'],
                            },
                            readOnly: {
                              description: 'ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                              type: 'boolean',
                            },
                            secretRef: {
                              description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                              properties: {
                                name: {
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            user: {
                              description: 'The rados user name. Default is admin. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                        scaleIO: {
                          description: 'ScaleIOVolumeSource represents a persistent ScaleIO volume',
                          required: ['gateway', 'system', 'secretRef'],
                          properties: {
                            fsType: {
                              description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                              type: ['string', 'null'],
                            },
                            gateway: {
                              description: 'The host address of the ScaleIO API Gateway.',
                              type: 'string',
                            },
                            protectionDomain: {
                              description: 'The name of the ScaleIO Protection Domain for the configured storage.',
                              type: ['string', 'null'],
                            },
                            readOnly: {
                              description: 'Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                              type: 'boolean',
                            },
                            secretRef: {
                              description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                              properties: {
                                name: {
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            sslEnabled: {
                              description: 'Flag to enable/disable SSL communication with Gateway, default false',
                              type: 'boolean',
                            },
                            storageMode: {
                              description: 'Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.',
                              type: ['string', 'null'],
                            },
                            storagePool: {
                              description: 'The ScaleIO Storage Pool associated with the protection domain.',
                              type: ['string', 'null'],
                            },
                            system: {
                              description: 'The name of the storage system as configured in ScaleIO.',
                              type: 'string',
                            },
                            volumeName: {
                              description: 'The name of a volume already created in the ScaleIO system that is associated with this volume source.',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                        secret: {
                          description: "Adapts a Secret into a volume.\n\nThe contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.",
                          properties: {
                            defaultMode: {
                              description: 'Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                              type: 'integer',
                              format: 'int32',
                            },
                            items: {
                              description:
                                "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                              type: ['array', 'null'],
                              items: {
                                description: 'Maps a string key to a path within a volume.',
                                required: ['key', 'path'],
                                properties: {
                                  key: {
                                    description: 'The key to project.',
                                    type: 'string',
                                  },
                                  mode: {
                                    description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                    type: 'integer',
                                    format: 'int32',
                                  },
                                  path: {
                                    description: "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                                    type: 'string',
                                  },
                                },
                                additionalProperties: false,
                              },
                            },
                            optional: {
                              description: "Specify whether the Secret or it's keys must be defined",
                              type: 'boolean',
                            },
                            secretName: {
                              description: "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                        storageos: {
                          description: 'Represents a StorageOS persistent volume resource.',
                          properties: {
                            fsType: {
                              description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                              type: ['string', 'null'],
                            },
                            readOnly: {
                              description: 'Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                              type: 'boolean',
                            },
                            secretRef: {
                              description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                              properties: {
                                name: {
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            volumeName: {
                              description: 'VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.',
                              type: ['string', 'null'],
                            },
                            volumeNamespace: {
                              description: 'VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod\'s namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                        vsphereVolume: {
                          description: 'Represents a vSphere volume resource.',
                          required: ['volumePath'],
                          properties: {
                            fsType: {
                              description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                              type: ['string', 'null'],
                            },
                            storagePolicyID: {
                              description: 'Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.',
                              type: ['string', 'null'],
                            },
                            storagePolicyName: {
                              description: 'Storage Policy Based Management (SPBM) profile name.',
                              type: ['string', 'null'],
                            },
                            volumePath: {
                              description: 'Path that identifies vSphere volume vmdk',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                      },
                      additionalProperties: false,
                    },
                    'x-kubernetes-patch-merge-key': 'name',
                    'x-kubernetes-patch-strategy': 'merge,retainKeys',
                  },
                },
                additionalProperties: false,
              },
            },
            additionalProperties: false,
          },
        },
        additionalProperties: false,
      },
      status: {
        description: 'JobStatus represents the current state of a Job.',
        properties: {
          active: {
            description: 'The number of actively running pods.',
            type: 'integer',
            format: 'int32',
          },
          completionTime: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            type: ['string', 'null'],
            format: 'date-time',
          },
          conditions: {
            description: "The latest available observations of an object's current state. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/",
            type: ['array', 'null'],
            items: {
              description: 'JobCondition describes current state of a job.',
              required: ['type', 'status'],
              properties: {
                lastProbeTime: {
                  description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                  type: ['string', 'null'],
                  format: 'date-time',
                },
                lastTransitionTime: {
                  description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                  type: ['string', 'null'],
                  format: 'date-time',
                },
                message: {
                  description: 'Human readable message indicating details about last transition.',
                  type: ['string', 'null'],
                },
                reason: {
                  description: "(brief) reason for the condition's last transition.",
                  type: ['string', 'null'],
                },
                status: {
                  description: 'Status of the condition, one of True, False, Unknown.',
                  type: 'string',
                },
                type: {
                  description: 'Type of job condition, Complete or Failed.',
                  type: 'string',
                },
              },
              additionalProperties: false,
            },
            'x-kubernetes-patch-merge-key': 'type',
            'x-kubernetes-patch-strategy': 'merge',
          },
          failed: {
            description: 'The number of pods which reached phase Failed.',
            type: 'integer',
            format: 'int32',
          },
          startTime: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            type: ['string', 'null'],
            format: 'date-time',
          },
          succeeded: {
            description: 'The number of pods which reached phase Succeeded.',
            type: 'integer',
            format: 'int32',
          },
        },
        additionalProperties: false,
      },
    },
    'x-kubernetes-group-version-kind': [
      {
        group: 'batch',
        kind: 'Job',
        version: 'v1',
      },
    ],
    additionalProperties: false,
    $schema: 'http://json-schema.org/schema#',
    type: 'object',
  })
  .setIn([referenceForModel(k8sModels.CronJobModel), 'default'], {
    description: 'CronJob represents the configuration of a single cron job.',
    properties: {
      apiVersion: {
        description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
        type: ['string', 'null'],
        enum: ['batch/v1beta1'],
      },
      kind: {
        description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
        type: ['string', 'null'],
        enum: ['CronJob'],
      },
      metadata: {
        description: 'ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.',
        properties: {
          annotations: {
            description: 'Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations',
            type: 'object',
            additionalProperties: {
              type: ['string', 'null'],
            },
          },
          clusterName: {
            description: 'The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.',
            type: ['string', 'null'],
          },
          creationTimestamp: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            type: ['string', 'null'],
            format: 'date-time',
          },
          deletionGracePeriodSeconds: {
            description: 'Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.',
            type: 'integer',
            format: 'int64',
          },
          deletionTimestamp: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            type: ['string', 'null'],
            format: 'date-time',
          },
          finalizers: {
            description: 'Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.',
            type: ['array', 'null'],
            items: {
              type: ['string', 'null'],
            },
            'x-kubernetes-patch-strategy': 'merge',
          },
          generateName: {
            description:
              'GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency',
            type: ['string', 'null'],
          },
          generation: {
            description: 'A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.',
            type: 'integer',
            format: 'int64',
          },
          initializers: {
            description: 'Initializers tracks the progress of initialization.',
            required: ['pending'],
            properties: {
              pending: {
                description: 'Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.',
                type: 'array',
                items: {
                  description: 'Initializer is information about an initializer that has not yet completed.',
                  required: ['name'],
                  properties: {
                    name: {
                      description: 'name of the process that is responsible for initializing this object.',
                      type: 'string',
                    },
                  },
                  additionalProperties: false,
                },
                'x-kubernetes-patch-merge-key': 'name',
                'x-kubernetes-patch-strategy': 'merge',
              },
              result: {
                description: "Status is a return value for calls that don't return other objects.",
                properties: {
                  apiVersion: {
                    description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
                    type: ['string', 'null'],
                    enum: ['v1'],
                  },
                  code: {
                    description: 'Suggested HTTP return code for this status, 0 if not set.',
                    type: 'integer',
                    format: 'int32',
                  },
                  details: {
                    description: 'StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.',
                    properties: {
                      causes: {
                        description: 'The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.',
                        type: ['array', 'null'],
                        items: {
                          description: 'StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.',
                          properties: {
                            field: {
                              description: 'The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  "name" - the field "name" on the current resource\n  "items[0].name" - the field "name" on the first array entry in "items"',
                              type: ['string', 'null'],
                            },
                            message: {
                              description: 'A human-readable description of the cause of the error.  This field may be presented as-is to a reader.',
                              type: ['string', 'null'],
                            },
                            reason: {
                              description: 'A machine-readable description of the cause of the error. If this value is empty there is no information available.',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                      },
                      group: {
                        description: 'The group attribute of the resource associated with the status StatusReason.',
                        type: ['string', 'null'],
                      },
                      kind: {
                        description: 'The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                        type: ['string', 'null'],
                      },
                      name: {
                        description: 'The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).',
                        type: ['string', 'null'],
                      },
                      retryAfterSeconds: {
                        description: 'If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.',
                        type: 'integer',
                        format: 'int32',
                      },
                      uid: {
                        description: 'UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                        type: ['string', 'null'],
                      },
                    },
                    additionalProperties: false,
                  },
                  kind: {
                    description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                    type: ['string', 'null'],
                    enum: ['Status'],
                  },
                  message: {
                    description: 'A human-readable description of the status of this operation.',
                    type: ['string', 'null'],
                  },
                  metadata: {
                    description: 'ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.',
                    properties: {
                      continue: {
                        description:
                          'continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response.',
                        type: ['string', 'null'],
                      },
                      resourceVersion: {
                        description: "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
                        type: ['string', 'null'],
                      },
                      selfLink: {
                        description: 'selfLink is a URL representing this object. Populated by the system. Read-only.',
                        type: ['string', 'null'],
                      },
                    },
                    additionalProperties: false,
                  },
                  reason: {
                    description: 'A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.',
                    type: ['string', 'null'],
                  },
                  status: {
                    description: 'Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status',
                    type: ['string', 'null'],
                  },
                },
                'x-kubernetes-group-version-kind': [
                  {
                    group: '',
                    kind: 'Status',
                    version: 'v1',
                  },
                ],
                additionalProperties: false,
              },
            },
            additionalProperties: false,
          },
          labels: {
            description: 'Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels',
            type: 'object',
            additionalProperties: {
              type: ['string', 'null'],
            },
          },
          name: {
            description: 'Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
            type: ['string', 'null'],
          },
          namespace: {
            description: 'Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces',
            type: ['string', 'null'],
          },
          ownerReferences: {
            description: 'List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.',
            type: ['array', 'null'],
            items: {
              description: 'OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.',
              required: ['apiVersion', 'kind', 'name', 'uid'],
              properties: {
                apiVersion: {
                  description: 'API version of the referent.',
                  type: 'string',
                },
                blockOwnerDeletion: {
                  description: 'If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.',
                  type: 'boolean',
                },
                controller: {
                  description: 'If true, this reference points to the managing controller.',
                  type: 'boolean',
                },
                kind: {
                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                  type: 'string',
                },
                name: {
                  description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
                  type: 'string',
                },
                uid: {
                  description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                  type: 'string',
                },
              },
              additionalProperties: false,
            },
            'x-kubernetes-patch-merge-key': 'uid',
            'x-kubernetes-patch-strategy': 'merge',
          },
          resourceVersion: {
            description:
              'An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency',
            type: ['string', 'null'],
          },
          selfLink: {
            description: 'SelfLink is a URL representing this object. Populated by the system. Read-only.',
            type: ['string', 'null'],
          },
          uid: {
            description: 'UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
            type: ['string', 'null'],
          },
        },
        additionalProperties: false,
      },
      spec: {
        description: 'CronJobSpec describes how the job execution will look like and when it will actually run.',
        required: ['schedule', 'jobTemplate'],
        properties: {
          concurrencyPolicy: {
            description: 'Specifies how to treat concurrent executions of a Job. Valid values are: - "Allow" (default): allows CronJobs to run concurrently; - "Forbid": forbids concurrent runs, skipping next run if previous run hasn\'t finished yet; - "Replace": cancels currently running job and replaces it with a new one',
            type: ['string', 'null'],
          },
          failedJobsHistoryLimit: {
            description: 'The number of failed finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.',
            type: 'integer',
            format: 'int32',
          },
          jobTemplate: {
            description: 'JobTemplateSpec describes the data a Job should have when created from a template',
            properties: {
              metadata: {
                description: 'ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.',
                properties: {
                  annotations: {
                    description: 'Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations',
                    type: 'object',
                    additionalProperties: {
                      type: ['string', 'null'],
                    },
                  },
                  clusterName: {
                    description: 'The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.',
                    type: ['string', 'null'],
                  },
                  creationTimestamp: {
                    description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                    type: ['string', 'null'],
                    format: 'date-time',
                  },
                  deletionGracePeriodSeconds: {
                    description: 'Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.',
                    type: 'integer',
                    format: 'int64',
                  },
                  deletionTimestamp: {
                    description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                    type: ['string', 'null'],
                    format: 'date-time',
                  },
                  finalizers: {
                    description: 'Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.',
                    type: ['array', 'null'],
                    items: {
                      type: ['string', 'null'],
                    },
                    'x-kubernetes-patch-strategy': 'merge',
                  },
                  generateName: {
                    description:
                      'GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency',
                    type: ['string', 'null'],
                  },
                  generation: {
                    description: 'A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.',
                    type: 'integer',
                    format: 'int64',
                  },
                  initializers: {
                    description: 'Initializers tracks the progress of initialization.',
                    required: ['pending'],
                    properties: {
                      pending: {
                        description: 'Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.',
                        type: 'array',
                        items: {
                          description: 'Initializer is information about an initializer that has not yet completed.',
                          required: ['name'],
                          properties: {
                            name: {
                              description: 'name of the process that is responsible for initializing this object.',
                              type: 'string',
                            },
                          },
                          additionalProperties: false,
                        },
                        'x-kubernetes-patch-merge-key': 'name',
                        'x-kubernetes-patch-strategy': 'merge',
                      },
                      result: {
                        description: "Status is a return value for calls that don't return other objects.",
                        properties: {
                          apiVersion: {
                            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
                            type: ['string', 'null'],
                            enum: ['v1'],
                          },
                          code: {
                            description: 'Suggested HTTP return code for this status, 0 if not set.',
                            type: 'integer',
                            format: 'int32',
                          },
                          details: {
                            description: 'StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.',
                            properties: {
                              causes: {
                                description: 'The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.',
                                type: ['array', 'null'],
                                items: {
                                  description: 'StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.',
                                  properties: {
                                    field: {
                                      description: 'The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  "name" - the field "name" on the current resource\n  "items[0].name" - the field "name" on the first array entry in "items"',
                                      type: ['string', 'null'],
                                    },
                                    message: {
                                      description: 'A human-readable description of the cause of the error.  This field may be presented as-is to a reader.',
                                      type: ['string', 'null'],
                                    },
                                    reason: {
                                      description: 'A machine-readable description of the cause of the error. If this value is empty there is no information available.',
                                      type: ['string', 'null'],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                              },
                              group: {
                                description: 'The group attribute of the resource associated with the status StatusReason.',
                                type: ['string', 'null'],
                              },
                              kind: {
                                description: 'The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                                type: ['string', 'null'],
                              },
                              name: {
                                description: 'The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).',
                                type: ['string', 'null'],
                              },
                              retryAfterSeconds: {
                                description: 'If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.',
                                type: 'integer',
                                format: 'int32',
                              },
                              uid: {
                                description: 'UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                                type: ['string', 'null'],
                              },
                            },
                            additionalProperties: false,
                          },
                          kind: {
                            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                            type: ['string', 'null'],
                            enum: ['Status'],
                          },
                          message: {
                            description: 'A human-readable description of the status of this operation.',
                            type: ['string', 'null'],
                          },
                          metadata: {
                            description: 'ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.',
                            properties: {
                              continue: {
                                description:
                                  'continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response.',
                                type: ['string', 'null'],
                              },
                              resourceVersion: {
                                description: "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
                                type: ['string', 'null'],
                              },
                              selfLink: {
                                description: 'selfLink is a URL representing this object. Populated by the system. Read-only.',
                                type: ['string', 'null'],
                              },
                            },
                            additionalProperties: false,
                          },
                          reason: {
                            description: 'A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.',
                            type: ['string', 'null'],
                          },
                          status: {
                            description: 'Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status',
                            type: ['string', 'null'],
                          },
                        },
                        'x-kubernetes-group-version-kind': [
                          {
                            group: '',
                            kind: 'Status',
                            version: 'v1',
                          },
                        ],
                        additionalProperties: false,
                      },
                    },
                    additionalProperties: false,
                  },
                  labels: {
                    description: 'Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels',
                    type: 'object',
                    additionalProperties: {
                      type: ['string', 'null'],
                    },
                  },
                  name: {
                    description: 'Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
                    type: ['string', 'null'],
                  },
                  namespace: {
                    description: 'Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces',
                    type: ['string', 'null'],
                  },
                  ownerReferences: {
                    description: 'List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.',
                    type: ['array', 'null'],
                    items: {
                      description: 'OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.',
                      required: ['apiVersion', 'kind', 'name', 'uid'],
                      properties: {
                        apiVersion: {
                          description: 'API version of the referent.',
                          type: 'string',
                        },
                        blockOwnerDeletion: {
                          description: 'If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.',
                          type: 'boolean',
                        },
                        controller: {
                          description: 'If true, this reference points to the managing controller.',
                          type: 'boolean',
                        },
                        kind: {
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                          type: 'string',
                        },
                        name: {
                          description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
                          type: 'string',
                        },
                        uid: {
                          description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                          type: 'string',
                        },
                      },
                      additionalProperties: false,
                    },
                    'x-kubernetes-patch-merge-key': 'uid',
                    'x-kubernetes-patch-strategy': 'merge',
                  },
                  resourceVersion: {
                    description:
                      'An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency',
                    type: ['string', 'null'],
                  },
                  selfLink: {
                    description: 'SelfLink is a URL representing this object. Populated by the system. Read-only.',
                    type: ['string', 'null'],
                  },
                  uid: {
                    description: 'UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                    type: ['string', 'null'],
                  },
                },
                additionalProperties: false,
              },
              spec: {
                description: 'JobSpec describes how the job execution will look like.',
                required: ['template'],
                properties: {
                  activeDeadlineSeconds: {
                    description: 'Specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer',
                    type: 'integer',
                    format: 'int64',
                  },
                  backoffLimit: {
                    description: 'Specifies the number of retries before marking this job failed. Defaults to 6',
                    type: 'integer',
                    format: 'int32',
                  },
                  completions: {
                    description: 'Specifies the desired number of successfully finished pods the job should be run with.  Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/',
                    type: 'integer',
                    format: 'int32',
                  },
                  manualSelector: {
                    description:
                      'manualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template.  When true, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other jobs to not function correctly.  However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector',
                    type: 'boolean',
                  },
                  parallelism: {
                    description: 'Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/',
                    type: 'integer',
                    format: 'int32',
                  },
                  selector: {
                    description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
                    properties: {
                      matchExpressions: {
                        description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                        type: ['array', 'null'],
                        items: {
                          description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                          required: ['key', 'operator'],
                          properties: {
                            key: {
                              description: 'key is the label key that the selector applies to.',
                              type: 'string',
                              'x-kubernetes-patch-merge-key': 'key',
                              'x-kubernetes-patch-strategy': 'merge',
                            },
                            operator: {
                              description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                              type: 'string',
                            },
                            values: {
                              description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                              type: ['array', 'null'],
                              items: {
                                type: ['string', 'null'],
                              },
                            },
                          },
                          additionalProperties: false,
                        },
                      },
                      matchLabels: {
                        description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                        type: 'object',
                        additionalProperties: {
                          type: ['string', 'null'],
                        },
                      },
                    },
                    additionalProperties: false,
                  },
                  template: {
                    description: 'PodTemplateSpec describes the data a pod should have when created from a template',
                    properties: {
                      metadata: {
                        description: 'ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.',
                        properties: {
                          annotations: {
                            description: 'Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations',
                            type: 'object',
                            additionalProperties: {
                              type: ['string', 'null'],
                            },
                          },
                          clusterName: {
                            description: 'The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.',
                            type: ['string', 'null'],
                          },
                          creationTimestamp: {
                            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                            type: ['string', 'null'],
                            format: 'date-time',
                          },
                          deletionGracePeriodSeconds: {
                            description: 'Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.',
                            type: 'integer',
                            format: 'int64',
                          },
                          deletionTimestamp: {
                            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                            type: ['string', 'null'],
                            format: 'date-time',
                          },
                          finalizers: {
                            description: 'Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.',
                            type: ['array', 'null'],
                            items: {
                              type: ['string', 'null'],
                            },
                            'x-kubernetes-patch-strategy': 'merge',
                          },
                          generateName: {
                            description:
                              'GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency',
                            type: ['string', 'null'],
                          },
                          generation: {
                            description: 'A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.',
                            type: 'integer',
                            format: 'int64',
                          },
                          initializers: {
                            description: 'Initializers tracks the progress of initialization.',
                            required: ['pending'],
                            properties: {
                              pending: {
                                description: 'Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.',
                                type: 'array',
                                items: {
                                  description: 'Initializer is information about an initializer that has not yet completed.',
                                  required: ['name'],
                                  properties: {
                                    name: {
                                      description: 'name of the process that is responsible for initializing this object.',
                                      type: 'string',
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                'x-kubernetes-patch-merge-key': 'name',
                                'x-kubernetes-patch-strategy': 'merge',
                              },
                              result: {
                                description: "Status is a return value for calls that don't return other objects.",
                                properties: {
                                  apiVersion: {
                                    description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
                                    type: ['string', 'null'],
                                    enum: ['v1'],
                                  },
                                  code: {
                                    description: 'Suggested HTTP return code for this status, 0 if not set.',
                                    type: 'integer',
                                    format: 'int32',
                                  },
                                  details: {
                                    description: 'StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.',
                                    properties: {
                                      causes: {
                                        description: 'The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.',
                                        type: ['array', 'null'],
                                        items: {
                                          description: 'StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.',
                                          properties: {
                                            field: {
                                              description: 'The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  "name" - the field "name" on the current resource\n  "items[0].name" - the field "name" on the first array entry in "items"',
                                              type: ['string', 'null'],
                                            },
                                            message: {
                                              description: 'A human-readable description of the cause of the error.  This field may be presented as-is to a reader.',
                                              type: ['string', 'null'],
                                            },
                                            reason: {
                                              description: 'A machine-readable description of the cause of the error. If this value is empty there is no information available.',
                                              type: ['string', 'null'],
                                            },
                                          },
                                          additionalProperties: false,
                                        },
                                      },
                                      group: {
                                        description: 'The group attribute of the resource associated with the status StatusReason.',
                                        type: ['string', 'null'],
                                      },
                                      kind: {
                                        description: 'The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                                        type: ['string', 'null'],
                                      },
                                      name: {
                                        description: 'The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).',
                                        type: ['string', 'null'],
                                      },
                                      retryAfterSeconds: {
                                        description: 'If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.',
                                        type: 'integer',
                                        format: 'int32',
                                      },
                                      uid: {
                                        description: 'UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                                        type: ['string', 'null'],
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  kind: {
                                    description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                                    type: ['string', 'null'],
                                    enum: ['Status'],
                                  },
                                  message: {
                                    description: 'A human-readable description of the status of this operation.',
                                    type: ['string', 'null'],
                                  },
                                  metadata: {
                                    description: 'ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.',
                                    properties: {
                                      continue: {
                                        description:
                                          'continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response.',
                                        type: ['string', 'null'],
                                      },
                                      resourceVersion: {
                                        description: "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
                                        type: ['string', 'null'],
                                      },
                                      selfLink: {
                                        description: 'selfLink is a URL representing this object. Populated by the system. Read-only.',
                                        type: ['string', 'null'],
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  reason: {
                                    description: 'A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.',
                                    type: ['string', 'null'],
                                  },
                                  status: {
                                    description: 'Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status',
                                    type: ['string', 'null'],
                                  },
                                },
                                'x-kubernetes-group-version-kind': [
                                  {
                                    group: '',
                                    kind: 'Status',
                                    version: 'v1',
                                  },
                                ],
                                additionalProperties: false,
                              },
                            },
                            additionalProperties: false,
                          },
                          labels: {
                            description: 'Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels',
                            type: 'object',
                            additionalProperties: {
                              type: ['string', 'null'],
                            },
                          },
                          name: {
                            description: 'Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
                            type: ['string', 'null'],
                          },
                          namespace: {
                            description: 'Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces',
                            type: ['string', 'null'],
                          },
                          ownerReferences: {
                            description: 'List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.',
                            type: ['array', 'null'],
                            items: {
                              description: 'OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.',
                              required: ['apiVersion', 'kind', 'name', 'uid'],
                              properties: {
                                apiVersion: {
                                  description: 'API version of the referent.',
                                  type: 'string',
                                },
                                blockOwnerDeletion: {
                                  description: 'If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.',
                                  type: 'boolean',
                                },
                                controller: {
                                  description: 'If true, this reference points to the managing controller.',
                                  type: 'boolean',
                                },
                                kind: {
                                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                                  type: 'string',
                                },
                                name: {
                                  description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
                                  type: 'string',
                                },
                                uid: {
                                  description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                                  type: 'string',
                                },
                              },
                              additionalProperties: false,
                            },
                            'x-kubernetes-patch-merge-key': 'uid',
                            'x-kubernetes-patch-strategy': 'merge',
                          },
                          resourceVersion: {
                            description:
                              'An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency',
                            type: ['string', 'null'],
                          },
                          selfLink: {
                            description: 'SelfLink is a URL representing this object. Populated by the system. Read-only.',
                            type: ['string', 'null'],
                          },
                          uid: {
                            description: 'UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                            type: ['string', 'null'],
                          },
                        },
                        additionalProperties: false,
                      },
                      spec: {
                        description: 'PodSpec is a description of a pod.',
                        required: ['containers'],
                        properties: {
                          activeDeadlineSeconds: {
                            description: 'Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.',
                            type: 'integer',
                            format: 'int64',
                          },
                          affinity: {
                            description: 'Affinity is a group of affinity scheduling rules.',
                            properties: {
                              nodeAffinity: {
                                description: 'Node affinity is a group of node affinity scheduling rules.',
                                properties: {
                                  preferredDuringSchedulingIgnoredDuringExecution: {
                                    description:
                                      'The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.',
                                    type: ['array', 'null'],
                                    items: {
                                      description: "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
                                      required: ['weight', 'preference'],
                                      properties: {
                                        preference: {
                                          description: 'A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.',
                                          properties: {
                                            matchExpressions: {
                                              description: "A list of node selector requirements by node's labels.",
                                              type: ['array', 'null'],
                                              items: {
                                                description: 'A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                                required: ['key', 'operator'],
                                                properties: {
                                                  key: {
                                                    description: 'The label key that the selector applies to.',
                                                    type: 'string',
                                                  },
                                                  operator: {
                                                    description: "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                    type: 'string',
                                                  },
                                                  values: {
                                                    description: 'An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
                                                    type: ['array', 'null'],
                                                    items: {
                                                      type: ['string', 'null'],
                                                    },
                                                  },
                                                },
                                                additionalProperties: false,
                                              },
                                            },
                                            matchFields: {
                                              description: "A list of node selector requirements by node's fields.",
                                              type: ['array', 'null'],
                                              items: {
                                                description: 'A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                                required: ['key', 'operator'],
                                                properties: {
                                                  key: {
                                                    description: 'The label key that the selector applies to.',
                                                    type: 'string',
                                                  },
                                                  operator: {
                                                    description: "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                    type: 'string',
                                                  },
                                                  values: {
                                                    description: 'An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
                                                    type: ['array', 'null'],
                                                    items: {
                                                      type: ['string', 'null'],
                                                    },
                                                  },
                                                },
                                                additionalProperties: false,
                                              },
                                            },
                                          },
                                          additionalProperties: false,
                                        },
                                        weight: {
                                          description: 'Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.',
                                          type: 'integer',
                                          format: 'int32',
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                  },
                                  requiredDuringSchedulingIgnoredDuringExecution: {
                                    description: 'A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.',
                                    required: ['nodeSelectorTerms'],
                                    properties: {
                                      nodeSelectorTerms: {
                                        description: 'Required. A list of node selector terms. The terms are ORed.',
                                        type: 'array',
                                        items: {
                                          description: 'A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.',
                                          properties: {
                                            matchExpressions: {
                                              description: "A list of node selector requirements by node's labels.",
                                              type: ['array', 'null'],
                                              items: {
                                                description: 'A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                                required: ['key', 'operator'],
                                                properties: {
                                                  key: {
                                                    description: 'The label key that the selector applies to.',
                                                    type: 'string',
                                                  },
                                                  operator: {
                                                    description: "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                    type: 'string',
                                                  },
                                                  values: {
                                                    description: 'An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
                                                    type: ['array', 'null'],
                                                    items: {
                                                      type: ['string', 'null'],
                                                    },
                                                  },
                                                },
                                                additionalProperties: false,
                                              },
                                            },
                                            matchFields: {
                                              description: "A list of node selector requirements by node's fields.",
                                              type: ['array', 'null'],
                                              items: {
                                                description: 'A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                                required: ['key', 'operator'],
                                                properties: {
                                                  key: {
                                                    description: 'The label key that the selector applies to.',
                                                    type: 'string',
                                                  },
                                                  operator: {
                                                    description: "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                    type: 'string',
                                                  },
                                                  values: {
                                                    description: 'An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
                                                    type: ['array', 'null'],
                                                    items: {
                                                      type: ['string', 'null'],
                                                    },
                                                  },
                                                },
                                                additionalProperties: false,
                                              },
                                            },
                                          },
                                          additionalProperties: false,
                                        },
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                additionalProperties: false,
                              },
                              podAffinity: {
                                description: 'Pod affinity is a group of inter pod affinity scheduling rules.',
                                properties: {
                                  preferredDuringSchedulingIgnoredDuringExecution: {
                                    description:
                                      'The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.',
                                    type: ['array', 'null'],
                                    items: {
                                      description: 'The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)',
                                      required: ['weight', 'podAffinityTerm'],
                                      properties: {
                                        podAffinityTerm: {
                                          description: 'Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running',
                                          required: ['topologyKey'],
                                          properties: {
                                            labelSelector: {
                                              description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
                                              properties: {
                                                matchExpressions: {
                                                  description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                                                  type: ['array', 'null'],
                                                  items: {
                                                    description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                                    required: ['key', 'operator'],
                                                    properties: {
                                                      key: {
                                                        description: 'key is the label key that the selector applies to.',
                                                        type: 'string',
                                                        'x-kubernetes-patch-merge-key': 'key',
                                                        'x-kubernetes-patch-strategy': 'merge',
                                                      },
                                                      operator: {
                                                        description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                        type: 'string',
                                                      },
                                                      values: {
                                                        description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                                                        type: ['array', 'null'],
                                                        items: {
                                                          type: ['string', 'null'],
                                                        },
                                                      },
                                                    },
                                                    additionalProperties: false,
                                                  },
                                                },
                                                matchLabels: {
                                                  description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                                                  type: 'object',
                                                  additionalProperties: {
                                                    type: ['string', 'null'],
                                                  },
                                                },
                                              },
                                              additionalProperties: false,
                                            },
                                            namespaces: {
                                              description: 'namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod\'s namespace"',
                                              type: ['array', 'null'],
                                              items: {
                                                type: ['string', 'null'],
                                              },
                                            },
                                            topologyKey: {
                                              description: 'This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
                                              type: 'string',
                                            },
                                          },
                                          additionalProperties: false,
                                        },
                                        weight: {
                                          description: 'weight associated with matching the corresponding podAffinityTerm, in the range 1-100.',
                                          type: 'integer',
                                          format: 'int32',
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                  },
                                  requiredDuringSchedulingIgnoredDuringExecution: {
                                    description:
                                      'If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.',
                                    type: ['array', 'null'],
                                    items: {
                                      description: 'Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running',
                                      required: ['topologyKey'],
                                      properties: {
                                        labelSelector: {
                                          description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
                                          properties: {
                                            matchExpressions: {
                                              description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                                              type: ['array', 'null'],
                                              items: {
                                                description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                                required: ['key', 'operator'],
                                                properties: {
                                                  key: {
                                                    description: 'key is the label key that the selector applies to.',
                                                    type: 'string',
                                                    'x-kubernetes-patch-merge-key': 'key',
                                                    'x-kubernetes-patch-strategy': 'merge',
                                                  },
                                                  operator: {
                                                    description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                    type: 'string',
                                                  },
                                                  values: {
                                                    description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                                                    type: ['array', 'null'],
                                                    items: {
                                                      type: ['string', 'null'],
                                                    },
                                                  },
                                                },
                                                additionalProperties: false,
                                              },
                                            },
                                            matchLabels: {
                                              description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                                              type: 'object',
                                              additionalProperties: {
                                                type: ['string', 'null'],
                                              },
                                            },
                                          },
                                          additionalProperties: false,
                                        },
                                        namespaces: {
                                          description: 'namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod\'s namespace"',
                                          type: ['array', 'null'],
                                          items: {
                                            type: ['string', 'null'],
                                          },
                                        },
                                        topologyKey: {
                                          description: 'This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
                                          type: 'string',
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                  },
                                },
                                additionalProperties: false,
                              },
                              podAntiAffinity: {
                                description: 'Pod anti affinity is a group of inter pod anti affinity scheduling rules.',
                                properties: {
                                  preferredDuringSchedulingIgnoredDuringExecution: {
                                    description:
                                      'The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.',
                                    type: ['array', 'null'],
                                    items: {
                                      description: 'The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)',
                                      required: ['weight', 'podAffinityTerm'],
                                      properties: {
                                        podAffinityTerm: {
                                          description: 'Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running',
                                          required: ['topologyKey'],
                                          properties: {
                                            labelSelector: {
                                              description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
                                              properties: {
                                                matchExpressions: {
                                                  description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                                                  type: ['array', 'null'],
                                                  items: {
                                                    description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                                    required: ['key', 'operator'],
                                                    properties: {
                                                      key: {
                                                        description: 'key is the label key that the selector applies to.',
                                                        type: 'string',
                                                        'x-kubernetes-patch-merge-key': 'key',
                                                        'x-kubernetes-patch-strategy': 'merge',
                                                      },
                                                      operator: {
                                                        description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                        type: 'string',
                                                      },
                                                      values: {
                                                        description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                                                        type: ['array', 'null'],
                                                        items: {
                                                          type: ['string', 'null'],
                                                        },
                                                      },
                                                    },
                                                    additionalProperties: false,
                                                  },
                                                },
                                                matchLabels: {
                                                  description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                                                  type: 'object',
                                                  additionalProperties: {
                                                    type: ['string', 'null'],
                                                  },
                                                },
                                              },
                                              additionalProperties: false,
                                            },
                                            namespaces: {
                                              description: 'namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod\'s namespace"',
                                              type: ['array', 'null'],
                                              items: {
                                                type: ['string', 'null'],
                                              },
                                            },
                                            topologyKey: {
                                              description: 'This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
                                              type: 'string',
                                            },
                                          },
                                          additionalProperties: false,
                                        },
                                        weight: {
                                          description: 'weight associated with matching the corresponding podAffinityTerm, in the range 1-100.',
                                          type: 'integer',
                                          format: 'int32',
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                  },
                                  requiredDuringSchedulingIgnoredDuringExecution: {
                                    description:
                                      'If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.',
                                    type: ['array', 'null'],
                                    items: {
                                      description: 'Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running',
                                      required: ['topologyKey'],
                                      properties: {
                                        labelSelector: {
                                          description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
                                          properties: {
                                            matchExpressions: {
                                              description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                                              type: ['array', 'null'],
                                              items: {
                                                description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                                                required: ['key', 'operator'],
                                                properties: {
                                                  key: {
                                                    description: 'key is the label key that the selector applies to.',
                                                    type: 'string',
                                                    'x-kubernetes-patch-merge-key': 'key',
                                                    'x-kubernetes-patch-strategy': 'merge',
                                                  },
                                                  operator: {
                                                    description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                    type: 'string',
                                                  },
                                                  values: {
                                                    description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                                                    type: ['array', 'null'],
                                                    items: {
                                                      type: ['string', 'null'],
                                                    },
                                                  },
                                                },
                                                additionalProperties: false,
                                              },
                                            },
                                            matchLabels: {
                                              description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                                              type: 'object',
                                              additionalProperties: {
                                                type: ['string', 'null'],
                                              },
                                            },
                                          },
                                          additionalProperties: false,
                                        },
                                        namespaces: {
                                          description: 'namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod\'s namespace"',
                                          type: ['array', 'null'],
                                          items: {
                                            type: ['string', 'null'],
                                          },
                                        },
                                        topologyKey: {
                                          description: 'This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
                                          type: 'string',
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                  },
                                },
                                additionalProperties: false,
                              },
                            },
                            additionalProperties: false,
                          },
                          automountServiceAccountToken: {
                            description: 'AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.',
                            type: 'boolean',
                          },
                          containers: {
                            description: 'List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.',
                            type: 'array',
                            items: {
                              description: 'A single application container that you want to run within a pod.',
                              required: ['name'],
                              properties: {
                                args: {
                                  description:
                                    "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                                command: {
                                  description:
                                    "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                                env: {
                                  description: 'List of environment variables to set in the container. Cannot be updated.',
                                  type: ['array', 'null'],
                                  items: {
                                    description: 'EnvVar represents an environment variable present in a Container.',
                                    required: ['name'],
                                    properties: {
                                      name: {
                                        description: 'Name of the environment variable. Must be a C_IDENTIFIER.',
                                        type: 'string',
                                      },
                                      value: {
                                        description: 'Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".',
                                        type: ['string', 'null'],
                                      },
                                      valueFrom: {
                                        description: 'EnvVarSource represents a source for the value of an EnvVar.',
                                        properties: {
                                          configMapKeyRef: {
                                            description: 'Selects a key from a ConfigMap.',
                                            required: ['key'],
                                            properties: {
                                              key: {
                                                description: 'The key to select.',
                                                type: 'string',
                                              },
                                              name: {
                                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                                type: ['string', 'null'],
                                              },
                                              optional: {
                                                description: "Specify whether the ConfigMap or it's key must be defined",
                                                type: 'boolean',
                                              },
                                            },
                                            additionalProperties: false,
                                          },
                                          fieldRef: {
                                            description: 'ObjectFieldSelector selects an APIVersioned field of an object.',
                                            required: ['fieldPath'],
                                            properties: {
                                              apiVersion: {
                                                description: 'Version of the schema the FieldPath is written in terms of, defaults to "v1".',
                                                type: ['string', 'null'],
                                              },
                                              fieldPath: {
                                                description: 'Path of the field to select in the specified API version.',
                                                type: 'string',
                                              },
                                            },
                                            additionalProperties: false,
                                          },
                                          resourceFieldRef: {
                                            description: 'ResourceFieldSelector represents container resources (cpu, memory) and their output format',
                                            required: ['resource'],
                                            properties: {
                                              containerName: {
                                                description: 'Container name: required for volumes, optional for env vars',
                                                type: ['string', 'null'],
                                              },
                                              divisor: {
                                                oneOf: [
                                                  {
                                                    type: ['string', 'null'],
                                                  },
                                                  {
                                                    type: 'integer',
                                                  },
                                                ],
                                              },
                                              resource: {
                                                description: 'Required: resource to select',
                                                type: 'string',
                                              },
                                            },
                                            additionalProperties: false,
                                          },
                                          secretKeyRef: {
                                            description: 'SecretKeySelector selects a key of a Secret.',
                                            required: ['key'],
                                            properties: {
                                              key: {
                                                description: 'The key of the secret to select from.  Must be a valid secret key.',
                                                type: 'string',
                                              },
                                              name: {
                                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                                type: ['string', 'null'],
                                              },
                                              optional: {
                                                description: "Specify whether the Secret or it's key must be defined",
                                                type: 'boolean',
                                              },
                                            },
                                            additionalProperties: false,
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  'x-kubernetes-patch-merge-key': 'name',
                                  'x-kubernetes-patch-strategy': 'merge',
                                },
                                envFrom: {
                                  description: 'List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.',
                                  type: ['array', 'null'],
                                  items: {
                                    description: 'EnvFromSource represents the source of a set of ConfigMaps',
                                    properties: {
                                      configMapRef: {
                                        description: "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
                                        properties: {
                                          name: {
                                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                            type: ['string', 'null'],
                                          },
                                          optional: {
                                            description: 'Specify whether the ConfigMap must be defined',
                                            type: 'boolean',
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                      prefix: {
                                        description: 'An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.',
                                        type: ['string', 'null'],
                                      },
                                      secretRef: {
                                        description: "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
                                        properties: {
                                          name: {
                                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                            type: ['string', 'null'],
                                          },
                                          optional: {
                                            description: 'Specify whether the Secret must be defined',
                                            type: 'boolean',
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                image: {
                                  description: 'Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.',
                                  type: ['string', 'null'],
                                },
                                imagePullPolicy: {
                                  description: 'Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images',
                                  type: ['string', 'null'],
                                },
                                lifecycle: {
                                  description: 'Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.',
                                  properties: {
                                    postStart: {
                                      description: 'Handler defines a specific action that should be taken',
                                      properties: {
                                        exec: {
                                          description: 'ExecAction describes a "run in container" action.',
                                          properties: {
                                            command: {
                                              description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                              type: ['array', 'null'],
                                              items: {
                                                type: ['string', 'null'],
                                              },
                                            },
                                          },
                                          additionalProperties: false,
                                        },
                                        httpGet: {
                                          description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                                          required: ['port'],
                                          properties: {
                                            host: {
                                              description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                              type: ['string', 'null'],
                                            },
                                            httpHeaders: {
                                              description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                              type: ['array', 'null'],
                                              items: {
                                                description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                                required: ['name', 'value'],
                                                properties: {
                                                  name: {
                                                    description: 'The header field name',
                                                    type: 'string',
                                                  },
                                                  value: {
                                                    description: 'The header field value',
                                                    type: 'string',
                                                  },
                                                },
                                                additionalProperties: false,
                                              },
                                            },
                                            path: {
                                              description: 'Path to access on the HTTP server.',
                                              type: ['string', 'null'],
                                            },
                                            port: {
                                              oneOf: [
                                                {
                                                  type: ['string', 'null'],
                                                },
                                                {
                                                  type: 'integer',
                                                },
                                              ],
                                            },
                                            scheme: {
                                              description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                              type: ['string', 'null'],
                                            },
                                          },
                                          additionalProperties: false,
                                        },
                                        tcpSocket: {
                                          description: 'TCPSocketAction describes an action based on opening a socket',
                                          required: ['port'],
                                          properties: {
                                            host: {
                                              description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                              type: ['string', 'null'],
                                            },
                                            port: {
                                              oneOf: [
                                                {
                                                  type: ['string', 'null'],
                                                },
                                                {
                                                  type: 'integer',
                                                },
                                              ],
                                            },
                                          },
                                          additionalProperties: false,
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                    preStop: {
                                      description: 'Handler defines a specific action that should be taken',
                                      properties: {
                                        exec: {
                                          description: 'ExecAction describes a "run in container" action.',
                                          properties: {
                                            command: {
                                              description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                              type: ['array', 'null'],
                                              items: {
                                                type: ['string', 'null'],
                                              },
                                            },
                                          },
                                          additionalProperties: false,
                                        },
                                        httpGet: {
                                          description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                                          required: ['port'],
                                          properties: {
                                            host: {
                                              description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                              type: ['string', 'null'],
                                            },
                                            httpHeaders: {
                                              description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                              type: ['array', 'null'],
                                              items: {
                                                description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                                required: ['name', 'value'],
                                                properties: {
                                                  name: {
                                                    description: 'The header field name',
                                                    type: 'string',
                                                  },
                                                  value: {
                                                    description: 'The header field value',
                                                    type: 'string',
                                                  },
                                                },
                                                additionalProperties: false,
                                              },
                                            },
                                            path: {
                                              description: 'Path to access on the HTTP server.',
                                              type: ['string', 'null'],
                                            },
                                            port: {
                                              oneOf: [
                                                {
                                                  type: ['string', 'null'],
                                                },
                                                {
                                                  type: 'integer',
                                                },
                                              ],
                                            },
                                            scheme: {
                                              description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                              type: ['string', 'null'],
                                            },
                                          },
                                          additionalProperties: false,
                                        },
                                        tcpSocket: {
                                          description: 'TCPSocketAction describes an action based on opening a socket',
                                          required: ['port'],
                                          properties: {
                                            host: {
                                              description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                              type: ['string', 'null'],
                                            },
                                            port: {
                                              oneOf: [
                                                {
                                                  type: ['string', 'null'],
                                                },
                                                {
                                                  type: 'integer',
                                                },
                                              ],
                                            },
                                          },
                                          additionalProperties: false,
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                livenessProbe: {
                                  description: 'Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.',
                                  properties: {
                                    exec: {
                                      description: 'ExecAction describes a "run in container" action.',
                                      properties: {
                                        command: {
                                          description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                          type: ['array', 'null'],
                                          items: {
                                            type: ['string', 'null'],
                                          },
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                    failureThreshold: {
                                      description: 'Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
                                      type: 'integer',
                                      format: 'int32',
                                    },
                                    httpGet: {
                                      description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                                      required: ['port'],
                                      properties: {
                                        host: {
                                          description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                          type: ['string', 'null'],
                                        },
                                        httpHeaders: {
                                          description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                          type: ['array', 'null'],
                                          items: {
                                            description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                            required: ['name', 'value'],
                                            properties: {
                                              name: {
                                                description: 'The header field name',
                                                type: 'string',
                                              },
                                              value: {
                                                description: 'The header field value',
                                                type: 'string',
                                              },
                                            },
                                            additionalProperties: false,
                                          },
                                        },
                                        path: {
                                          description: 'Path to access on the HTTP server.',
                                          type: ['string', 'null'],
                                        },
                                        port: {
                                          oneOf: [
                                            {
                                              type: ['string', 'null'],
                                            },
                                            {
                                              type: 'integer',
                                            },
                                          ],
                                        },
                                        scheme: {
                                          description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                          type: ['string', 'null'],
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                    initialDelaySeconds: {
                                      description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                                      type: 'integer',
                                      format: 'int32',
                                    },
                                    periodSeconds: {
                                      description: 'How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
                                      type: 'integer',
                                      format: 'int32',
                                    },
                                    successThreshold: {
                                      description: 'Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.',
                                      type: 'integer',
                                      format: 'int32',
                                    },
                                    tcpSocket: {
                                      description: 'TCPSocketAction describes an action based on opening a socket',
                                      required: ['port'],
                                      properties: {
                                        host: {
                                          description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                          type: ['string', 'null'],
                                        },
                                        port: {
                                          oneOf: [
                                            {
                                              type: ['string', 'null'],
                                            },
                                            {
                                              type: 'integer',
                                            },
                                          ],
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                    timeoutSeconds: {
                                      description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                                      type: 'integer',
                                      format: 'int32',
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                name: {
                                  description: 'Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.',
                                  type: 'string',
                                },
                                ports: {
                                  description: 'List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.',
                                  type: ['array', 'null'],
                                  items: {
                                    description: 'ContainerPort represents a network port in a single container.',
                                    required: ['containerPort'],
                                    properties: {
                                      containerPort: {
                                        description: "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
                                        type: 'integer',
                                        format: 'int32',
                                      },
                                      hostIP: {
                                        description: 'What host IP to bind the external port to.',
                                        type: ['string', 'null'],
                                      },
                                      hostPort: {
                                        description: 'Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.',
                                        type: 'integer',
                                        format: 'int32',
                                      },
                                      name: {
                                        description: 'If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.',
                                        type: ['string', 'null'],
                                      },
                                      protocol: {
                                        description: 'Protocol for port. Must be UDP or TCP. Defaults to "TCP".',
                                        type: ['string', 'null'],
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  'x-kubernetes-patch-merge-key': 'containerPort',
                                  'x-kubernetes-patch-strategy': 'merge',
                                },
                                readinessProbe: {
                                  description: 'Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.',
                                  properties: {
                                    exec: {
                                      description: 'ExecAction describes a "run in container" action.',
                                      properties: {
                                        command: {
                                          description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                          type: ['array', 'null'],
                                          items: {
                                            type: ['string', 'null'],
                                          },
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                    failureThreshold: {
                                      description: 'Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
                                      type: 'integer',
                                      format: 'int32',
                                    },
                                    httpGet: {
                                      description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                                      required: ['port'],
                                      properties: {
                                        host: {
                                          description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                          type: ['string', 'null'],
                                        },
                                        httpHeaders: {
                                          description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                          type: ['array', 'null'],
                                          items: {
                                            description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                            required: ['name', 'value'],
                                            properties: {
                                              name: {
                                                description: 'The header field name',
                                                type: 'string',
                                              },
                                              value: {
                                                description: 'The header field value',
                                                type: 'string',
                                              },
                                            },
                                            additionalProperties: false,
                                          },
                                        },
                                        path: {
                                          description: 'Path to access on the HTTP server.',
                                          type: ['string', 'null'],
                                        },
                                        port: {
                                          oneOf: [
                                            {
                                              type: ['string', 'null'],
                                            },
                                            {
                                              type: 'integer',
                                            },
                                          ],
                                        },
                                        scheme: {
                                          description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                          type: ['string', 'null'],
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                    initialDelaySeconds: {
                                      description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                                      type: 'integer',
                                      format: 'int32',
                                    },
                                    periodSeconds: {
                                      description: 'How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
                                      type: 'integer',
                                      format: 'int32',
                                    },
                                    successThreshold: {
                                      description: 'Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.',
                                      type: 'integer',
                                      format: 'int32',
                                    },
                                    tcpSocket: {
                                      description: 'TCPSocketAction describes an action based on opening a socket',
                                      required: ['port'],
                                      properties: {
                                        host: {
                                          description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                          type: ['string', 'null'],
                                        },
                                        port: {
                                          oneOf: [
                                            {
                                              type: ['string', 'null'],
                                            },
                                            {
                                              type: 'integer',
                                            },
                                          ],
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                    timeoutSeconds: {
                                      description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                                      type: 'integer',
                                      format: 'int32',
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                resources: {
                                  description: 'ResourceRequirements describes the compute resource requirements.',
                                  properties: {
                                    limits: {
                                      description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/',
                                      type: 'object',
                                      additionalProperties: {
                                        oneOf: [
                                          {
                                            type: ['string', 'null'],
                                          },
                                          {
                                            type: 'integer',
                                          },
                                        ],
                                      },
                                    },
                                    requests: {
                                      description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/',
                                      type: 'object',
                                      additionalProperties: {
                                        oneOf: [
                                          {
                                            type: ['string', 'null'],
                                          },
                                          {
                                            type: 'integer',
                                          },
                                        ],
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                securityContext: {
                                  description: 'SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.',
                                  properties: {
                                    allowPrivilegeEscalation: {
                                      description: 'AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN',
                                      type: 'boolean',
                                    },
                                    capabilities: {
                                      description: 'Adds and removes POSIX capabilities from running containers.',
                                      properties: {
                                        add: {
                                          description: 'Added capabilities',
                                          type: ['array', 'null'],
                                          items: {
                                            type: ['string', 'null'],
                                          },
                                        },
                                        drop: {
                                          description: 'Removed capabilities',
                                          type: ['array', 'null'],
                                          items: {
                                            type: ['string', 'null'],
                                          },
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                    privileged: {
                                      description: 'Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.',
                                      type: 'boolean',
                                    },
                                    readOnlyRootFilesystem: {
                                      description: 'Whether this container has a read-only root filesystem. Default is false.',
                                      type: 'boolean',
                                    },
                                    runAsGroup: {
                                      description: 'The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                                      type: 'integer',
                                      format: 'int64',
                                    },
                                    runAsNonRoot: {
                                      description: 'Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                                      type: 'boolean',
                                    },
                                    runAsUser: {
                                      description: 'The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                                      type: 'integer',
                                      format: 'int64',
                                    },
                                    seLinuxOptions: {
                                      description: 'SELinuxOptions are the labels to be applied to the container',
                                      properties: {
                                        level: {
                                          description: 'Level is SELinux level label that applies to the container.',
                                          type: ['string', 'null'],
                                        },
                                        role: {
                                          description: 'Role is a SELinux role label that applies to the container.',
                                          type: ['string', 'null'],
                                        },
                                        type: {
                                          description: 'Type is a SELinux type label that applies to the container.',
                                          type: ['string', 'null'],
                                        },
                                        user: {
                                          description: 'User is a SELinux user label that applies to the container.',
                                          type: ['string', 'null'],
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                stdin: {
                                  description: 'Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.',
                                  type: 'boolean',
                                },
                                stdinOnce: {
                                  description:
                                    'Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false',
                                  type: 'boolean',
                                },
                                terminationMessagePath: {
                                  description: "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                                  type: ['string', 'null'],
                                },
                                terminationMessagePolicy: {
                                  description: 'Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.',
                                  type: ['string', 'null'],
                                },
                                tty: {
                                  description: "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                                  type: 'boolean',
                                },
                                volumeDevices: {
                                  description: 'volumeDevices is the list of block devices to be used by the container. This is an alpha feature and may change in the future.',
                                  type: ['array', 'null'],
                                  items: {
                                    description: 'volumeDevice describes a mapping of a raw block device within a container.',
                                    required: ['name', 'devicePath'],
                                    properties: {
                                      devicePath: {
                                        description: 'devicePath is the path inside of the container that the device will be mapped to.',
                                        type: 'string',
                                      },
                                      name: {
                                        description: 'name must match the name of a persistentVolumeClaim in the pod',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  'x-kubernetes-patch-merge-key': 'devicePath',
                                  'x-kubernetes-patch-strategy': 'merge',
                                },
                                volumeMounts: {
                                  description: "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                                  type: ['array', 'null'],
                                  items: {
                                    description: 'VolumeMount describes a mounting of a Volume within a container.',
                                    required: ['name', 'mountPath'],
                                    properties: {
                                      mountPath: {
                                        description: "Path within the container at which the volume should be mounted.  Must not contain ':'.",
                                        type: 'string',
                                      },
                                      mountPropagation: {
                                        description: 'mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.',
                                        type: ['string', 'null'],
                                      },
                                      name: {
                                        description: 'This must match the Name of a Volume.',
                                        type: 'string',
                                      },
                                      readOnly: {
                                        description: 'Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.',
                                        type: 'boolean',
                                      },
                                      subPath: {
                                        description: 'Path within the volume from which the container\'s volume should be mounted. Defaults to "" (volume\'s root).',
                                        type: ['string', 'null'],
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  'x-kubernetes-patch-merge-key': 'mountPath',
                                  'x-kubernetes-patch-strategy': 'merge',
                                },
                                workingDir: {
                                  description: "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            'x-kubernetes-patch-merge-key': 'name',
                            'x-kubernetes-patch-strategy': 'merge',
                          },
                          dnsConfig: {
                            description: 'PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.',
                            properties: {
                              nameservers: {
                                description: 'A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.',
                                type: ['array', 'null'],
                                items: {
                                  type: ['string', 'null'],
                                },
                              },
                              options: {
                                description: 'A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.',
                                type: ['array', 'null'],
                                items: {
                                  description: 'PodDNSConfigOption defines DNS resolver options of a pod.',
                                  properties: {
                                    name: {
                                      description: 'Required.',
                                      type: ['string', 'null'],
                                    },
                                    value: {
                                      type: ['string', 'null'],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                              },
                              searches: {
                                description: 'A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.',
                                type: ['array', 'null'],
                                items: {
                                  type: ['string', 'null'],
                                },
                              },
                            },
                            additionalProperties: false,
                          },
                          dnsPolicy: {
                            description: "Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.",
                            type: ['string', 'null'],
                          },
                          hostAliases: {
                            description: "HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.",
                            type: ['array', 'null'],
                            items: {
                              description: "HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.",
                              properties: {
                                hostnames: {
                                  description: 'Hostnames for the above IP address.',
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                                ip: {
                                  description: 'IP address of the host file entry.',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            'x-kubernetes-patch-merge-key': 'ip',
                            'x-kubernetes-patch-strategy': 'merge',
                          },
                          hostIPC: {
                            description: "Use the host's ipc namespace. Optional: Default to false.",
                            type: 'boolean',
                          },
                          hostNetwork: {
                            description: "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.",
                            type: 'boolean',
                          },
                          hostPID: {
                            description: "Use the host's pid namespace. Optional: Default to false.",
                            type: 'boolean',
                          },
                          hostname: {
                            description: "Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.",
                            type: ['string', 'null'],
                          },
                          imagePullSecrets: {
                            description: 'ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod',
                            type: ['array', 'null'],
                            items: {
                              description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                              properties: {
                                name: {
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            'x-kubernetes-patch-merge-key': 'name',
                            'x-kubernetes-patch-strategy': 'merge',
                          },
                          initContainers: {
                            description:
                              'List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/',
                            type: ['array', 'null'],
                            items: {
                              description: 'A single application container that you want to run within a pod.',
                              required: ['name'],
                              properties: {
                                args: {
                                  description:
                                    "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                                command: {
                                  description:
                                    "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                                env: {
                                  description: 'List of environment variables to set in the container. Cannot be updated.',
                                  type: ['array', 'null'],
                                  items: {
                                    description: 'EnvVar represents an environment variable present in a Container.',
                                    required: ['name'],
                                    properties: {
                                      name: {
                                        description: 'Name of the environment variable. Must be a C_IDENTIFIER.',
                                        type: 'string',
                                      },
                                      value: {
                                        description: 'Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".',
                                        type: ['string', 'null'],
                                      },
                                      valueFrom: {
                                        description: 'EnvVarSource represents a source for the value of an EnvVar.',
                                        properties: {
                                          configMapKeyRef: {
                                            description: 'Selects a key from a ConfigMap.',
                                            required: ['key'],
                                            properties: {
                                              key: {
                                                description: 'The key to select.',
                                                type: 'string',
                                              },
                                              name: {
                                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                                type: ['string', 'null'],
                                              },
                                              optional: {
                                                description: "Specify whether the ConfigMap or it's key must be defined",
                                                type: 'boolean',
                                              },
                                            },
                                            additionalProperties: false,
                                          },
                                          fieldRef: {
                                            description: 'ObjectFieldSelector selects an APIVersioned field of an object.',
                                            required: ['fieldPath'],
                                            properties: {
                                              apiVersion: {
                                                description: 'Version of the schema the FieldPath is written in terms of, defaults to "v1".',
                                                type: ['string', 'null'],
                                              },
                                              fieldPath: {
                                                description: 'Path of the field to select in the specified API version.',
                                                type: 'string',
                                              },
                                            },
                                            additionalProperties: false,
                                          },
                                          resourceFieldRef: {
                                            description: 'ResourceFieldSelector represents container resources (cpu, memory) and their output format',
                                            required: ['resource'],
                                            properties: {
                                              containerName: {
                                                description: 'Container name: required for volumes, optional for env vars',
                                                type: ['string', 'null'],
                                              },
                                              divisor: {
                                                oneOf: [
                                                  {
                                                    type: ['string', 'null'],
                                                  },
                                                  {
                                                    type: 'integer',
                                                  },
                                                ],
                                              },
                                              resource: {
                                                description: 'Required: resource to select',
                                                type: 'string',
                                              },
                                            },
                                            additionalProperties: false,
                                          },
                                          secretKeyRef: {
                                            description: 'SecretKeySelector selects a key of a Secret.',
                                            required: ['key'],
                                            properties: {
                                              key: {
                                                description: 'The key of the secret to select from.  Must be a valid secret key.',
                                                type: 'string',
                                              },
                                              name: {
                                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                                type: ['string', 'null'],
                                              },
                                              optional: {
                                                description: "Specify whether the Secret or it's key must be defined",
                                                type: 'boolean',
                                              },
                                            },
                                            additionalProperties: false,
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  'x-kubernetes-patch-merge-key': 'name',
                                  'x-kubernetes-patch-strategy': 'merge',
                                },
                                envFrom: {
                                  description: 'List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.',
                                  type: ['array', 'null'],
                                  items: {
                                    description: 'EnvFromSource represents the source of a set of ConfigMaps',
                                    properties: {
                                      configMapRef: {
                                        description: "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
                                        properties: {
                                          name: {
                                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                            type: ['string', 'null'],
                                          },
                                          optional: {
                                            description: 'Specify whether the ConfigMap must be defined',
                                            type: 'boolean',
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                      prefix: {
                                        description: 'An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.',
                                        type: ['string', 'null'],
                                      },
                                      secretRef: {
                                        description: "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
                                        properties: {
                                          name: {
                                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                            type: ['string', 'null'],
                                          },
                                          optional: {
                                            description: 'Specify whether the Secret must be defined',
                                            type: 'boolean',
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                },
                                image: {
                                  description: 'Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.',
                                  type: ['string', 'null'],
                                },
                                imagePullPolicy: {
                                  description: 'Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images',
                                  type: ['string', 'null'],
                                },
                                lifecycle: {
                                  description: 'Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.',
                                  properties: {
                                    postStart: {
                                      description: 'Handler defines a specific action that should be taken',
                                      properties: {
                                        exec: {
                                          description: 'ExecAction describes a "run in container" action.',
                                          properties: {
                                            command: {
                                              description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                              type: ['array', 'null'],
                                              items: {
                                                type: ['string', 'null'],
                                              },
                                            },
                                          },
                                          additionalProperties: false,
                                        },
                                        httpGet: {
                                          description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                                          required: ['port'],
                                          properties: {
                                            host: {
                                              description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                              type: ['string', 'null'],
                                            },
                                            httpHeaders: {
                                              description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                              type: ['array', 'null'],
                                              items: {
                                                description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                                required: ['name', 'value'],
                                                properties: {
                                                  name: {
                                                    description: 'The header field name',
                                                    type: 'string',
                                                  },
                                                  value: {
                                                    description: 'The header field value',
                                                    type: 'string',
                                                  },
                                                },
                                                additionalProperties: false,
                                              },
                                            },
                                            path: {
                                              description: 'Path to access on the HTTP server.',
                                              type: ['string', 'null'],
                                            },
                                            port: {
                                              oneOf: [
                                                {
                                                  type: ['string', 'null'],
                                                },
                                                {
                                                  type: 'integer',
                                                },
                                              ],
                                            },
                                            scheme: {
                                              description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                              type: ['string', 'null'],
                                            },
                                          },
                                          additionalProperties: false,
                                        },
                                        tcpSocket: {
                                          description: 'TCPSocketAction describes an action based on opening a socket',
                                          required: ['port'],
                                          properties: {
                                            host: {
                                              description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                              type: ['string', 'null'],
                                            },
                                            port: {
                                              oneOf: [
                                                {
                                                  type: ['string', 'null'],
                                                },
                                                {
                                                  type: 'integer',
                                                },
                                              ],
                                            },
                                          },
                                          additionalProperties: false,
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                    preStop: {
                                      description: 'Handler defines a specific action that should be taken',
                                      properties: {
                                        exec: {
                                          description: 'ExecAction describes a "run in container" action.',
                                          properties: {
                                            command: {
                                              description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                              type: ['array', 'null'],
                                              items: {
                                                type: ['string', 'null'],
                                              },
                                            },
                                          },
                                          additionalProperties: false,
                                        },
                                        httpGet: {
                                          description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                                          required: ['port'],
                                          properties: {
                                            host: {
                                              description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                              type: ['string', 'null'],
                                            },
                                            httpHeaders: {
                                              description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                              type: ['array', 'null'],
                                              items: {
                                                description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                                required: ['name', 'value'],
                                                properties: {
                                                  name: {
                                                    description: 'The header field name',
                                                    type: 'string',
                                                  },
                                                  value: {
                                                    description: 'The header field value',
                                                    type: 'string',
                                                  },
                                                },
                                                additionalProperties: false,
                                              },
                                            },
                                            path: {
                                              description: 'Path to access on the HTTP server.',
                                              type: ['string', 'null'],
                                            },
                                            port: {
                                              oneOf: [
                                                {
                                                  type: ['string', 'null'],
                                                },
                                                {
                                                  type: 'integer',
                                                },
                                              ],
                                            },
                                            scheme: {
                                              description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                              type: ['string', 'null'],
                                            },
                                          },
                                          additionalProperties: false,
                                        },
                                        tcpSocket: {
                                          description: 'TCPSocketAction describes an action based on opening a socket',
                                          required: ['port'],
                                          properties: {
                                            host: {
                                              description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                              type: ['string', 'null'],
                                            },
                                            port: {
                                              oneOf: [
                                                {
                                                  type: ['string', 'null'],
                                                },
                                                {
                                                  type: 'integer',
                                                },
                                              ],
                                            },
                                          },
                                          additionalProperties: false,
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                livenessProbe: {
                                  description: 'Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.',
                                  properties: {
                                    exec: {
                                      description: 'ExecAction describes a "run in container" action.',
                                      properties: {
                                        command: {
                                          description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                          type: ['array', 'null'],
                                          items: {
                                            type: ['string', 'null'],
                                          },
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                    failureThreshold: {
                                      description: 'Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
                                      type: 'integer',
                                      format: 'int32',
                                    },
                                    httpGet: {
                                      description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                                      required: ['port'],
                                      properties: {
                                        host: {
                                          description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                          type: ['string', 'null'],
                                        },
                                        httpHeaders: {
                                          description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                          type: ['array', 'null'],
                                          items: {
                                            description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                            required: ['name', 'value'],
                                            properties: {
                                              name: {
                                                description: 'The header field name',
                                                type: 'string',
                                              },
                                              value: {
                                                description: 'The header field value',
                                                type: 'string',
                                              },
                                            },
                                            additionalProperties: false,
                                          },
                                        },
                                        path: {
                                          description: 'Path to access on the HTTP server.',
                                          type: ['string', 'null'],
                                        },
                                        port: {
                                          oneOf: [
                                            {
                                              type: ['string', 'null'],
                                            },
                                            {
                                              type: 'integer',
                                            },
                                          ],
                                        },
                                        scheme: {
                                          description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                          type: ['string', 'null'],
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                    initialDelaySeconds: {
                                      description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                                      type: 'integer',
                                      format: 'int32',
                                    },
                                    periodSeconds: {
                                      description: 'How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
                                      type: 'integer',
                                      format: 'int32',
                                    },
                                    successThreshold: {
                                      description: 'Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.',
                                      type: 'integer',
                                      format: 'int32',
                                    },
                                    tcpSocket: {
                                      description: 'TCPSocketAction describes an action based on opening a socket',
                                      required: ['port'],
                                      properties: {
                                        host: {
                                          description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                          type: ['string', 'null'],
                                        },
                                        port: {
                                          oneOf: [
                                            {
                                              type: ['string', 'null'],
                                            },
                                            {
                                              type: 'integer',
                                            },
                                          ],
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                    timeoutSeconds: {
                                      description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                                      type: 'integer',
                                      format: 'int32',
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                name: {
                                  description: 'Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.',
                                  type: 'string',
                                },
                                ports: {
                                  description: 'List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.',
                                  type: ['array', 'null'],
                                  items: {
                                    description: 'ContainerPort represents a network port in a single container.',
                                    required: ['containerPort'],
                                    properties: {
                                      containerPort: {
                                        description: "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
                                        type: 'integer',
                                        format: 'int32',
                                      },
                                      hostIP: {
                                        description: 'What host IP to bind the external port to.',
                                        type: ['string', 'null'],
                                      },
                                      hostPort: {
                                        description: 'Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.',
                                        type: 'integer',
                                        format: 'int32',
                                      },
                                      name: {
                                        description: 'If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.',
                                        type: ['string', 'null'],
                                      },
                                      protocol: {
                                        description: 'Protocol for port. Must be UDP or TCP. Defaults to "TCP".',
                                        type: ['string', 'null'],
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  'x-kubernetes-patch-merge-key': 'containerPort',
                                  'x-kubernetes-patch-strategy': 'merge',
                                },
                                readinessProbe: {
                                  description: 'Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.',
                                  properties: {
                                    exec: {
                                      description: 'ExecAction describes a "run in container" action.',
                                      properties: {
                                        command: {
                                          description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                          type: ['array', 'null'],
                                          items: {
                                            type: ['string', 'null'],
                                          },
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                    failureThreshold: {
                                      description: 'Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
                                      type: 'integer',
                                      format: 'int32',
                                    },
                                    httpGet: {
                                      description: 'HTTPGetAction describes an action based on HTTP Get requests.',
                                      required: ['port'],
                                      properties: {
                                        host: {
                                          description: 'Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
                                          type: ['string', 'null'],
                                        },
                                        httpHeaders: {
                                          description: 'Custom headers to set in the request. HTTP allows repeated headers.',
                                          type: ['array', 'null'],
                                          items: {
                                            description: 'HTTPHeader describes a custom header to be used in HTTP probes',
                                            required: ['name', 'value'],
                                            properties: {
                                              name: {
                                                description: 'The header field name',
                                                type: 'string',
                                              },
                                              value: {
                                                description: 'The header field value',
                                                type: 'string',
                                              },
                                            },
                                            additionalProperties: false,
                                          },
                                        },
                                        path: {
                                          description: 'Path to access on the HTTP server.',
                                          type: ['string', 'null'],
                                        },
                                        port: {
                                          oneOf: [
                                            {
                                              type: ['string', 'null'],
                                            },
                                            {
                                              type: 'integer',
                                            },
                                          ],
                                        },
                                        scheme: {
                                          description: 'Scheme to use for connecting to the host. Defaults to HTTP.',
                                          type: ['string', 'null'],
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                    initialDelaySeconds: {
                                      description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                                      type: 'integer',
                                      format: 'int32',
                                    },
                                    periodSeconds: {
                                      description: 'How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
                                      type: 'integer',
                                      format: 'int32',
                                    },
                                    successThreshold: {
                                      description: 'Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.',
                                      type: 'integer',
                                      format: 'int32',
                                    },
                                    tcpSocket: {
                                      description: 'TCPSocketAction describes an action based on opening a socket',
                                      required: ['port'],
                                      properties: {
                                        host: {
                                          description: 'Optional: Host name to connect to, defaults to the pod IP.',
                                          type: ['string', 'null'],
                                        },
                                        port: {
                                          oneOf: [
                                            {
                                              type: ['string', 'null'],
                                            },
                                            {
                                              type: 'integer',
                                            },
                                          ],
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                    timeoutSeconds: {
                                      description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
                                      type: 'integer',
                                      format: 'int32',
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                resources: {
                                  description: 'ResourceRequirements describes the compute resource requirements.',
                                  properties: {
                                    limits: {
                                      description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/',
                                      type: 'object',
                                      additionalProperties: {
                                        oneOf: [
                                          {
                                            type: ['string', 'null'],
                                          },
                                          {
                                            type: 'integer',
                                          },
                                        ],
                                      },
                                    },
                                    requests: {
                                      description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/',
                                      type: 'object',
                                      additionalProperties: {
                                        oneOf: [
                                          {
                                            type: ['string', 'null'],
                                          },
                                          {
                                            type: 'integer',
                                          },
                                        ],
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                securityContext: {
                                  description: 'SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.',
                                  properties: {
                                    allowPrivilegeEscalation: {
                                      description: 'AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN',
                                      type: 'boolean',
                                    },
                                    capabilities: {
                                      description: 'Adds and removes POSIX capabilities from running containers.',
                                      properties: {
                                        add: {
                                          description: 'Added capabilities',
                                          type: ['array', 'null'],
                                          items: {
                                            type: ['string', 'null'],
                                          },
                                        },
                                        drop: {
                                          description: 'Removed capabilities',
                                          type: ['array', 'null'],
                                          items: {
                                            type: ['string', 'null'],
                                          },
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                    privileged: {
                                      description: 'Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.',
                                      type: 'boolean',
                                    },
                                    readOnlyRootFilesystem: {
                                      description: 'Whether this container has a read-only root filesystem. Default is false.',
                                      type: 'boolean',
                                    },
                                    runAsGroup: {
                                      description: 'The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                                      type: 'integer',
                                      format: 'int64',
                                    },
                                    runAsNonRoot: {
                                      description: 'Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                                      type: 'boolean',
                                    },
                                    runAsUser: {
                                      description: 'The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                                      type: 'integer',
                                      format: 'int64',
                                    },
                                    seLinuxOptions: {
                                      description: 'SELinuxOptions are the labels to be applied to the container',
                                      properties: {
                                        level: {
                                          description: 'Level is SELinux level label that applies to the container.',
                                          type: ['string', 'null'],
                                        },
                                        role: {
                                          description: 'Role is a SELinux role label that applies to the container.',
                                          type: ['string', 'null'],
                                        },
                                        type: {
                                          description: 'Type is a SELinux type label that applies to the container.',
                                          type: ['string', 'null'],
                                        },
                                        user: {
                                          description: 'User is a SELinux user label that applies to the container.',
                                          type: ['string', 'null'],
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                stdin: {
                                  description: 'Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.',
                                  type: 'boolean',
                                },
                                stdinOnce: {
                                  description:
                                    'Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false',
                                  type: 'boolean',
                                },
                                terminationMessagePath: {
                                  description: "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                                  type: ['string', 'null'],
                                },
                                terminationMessagePolicy: {
                                  description: 'Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.',
                                  type: ['string', 'null'],
                                },
                                tty: {
                                  description: "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                                  type: 'boolean',
                                },
                                volumeDevices: {
                                  description: 'volumeDevices is the list of block devices to be used by the container. This is an alpha feature and may change in the future.',
                                  type: ['array', 'null'],
                                  items: {
                                    description: 'volumeDevice describes a mapping of a raw block device within a container.',
                                    required: ['name', 'devicePath'],
                                    properties: {
                                      devicePath: {
                                        description: 'devicePath is the path inside of the container that the device will be mapped to.',
                                        type: 'string',
                                      },
                                      name: {
                                        description: 'name must match the name of a persistentVolumeClaim in the pod',
                                        type: 'string',
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  'x-kubernetes-patch-merge-key': 'devicePath',
                                  'x-kubernetes-patch-strategy': 'merge',
                                },
                                volumeMounts: {
                                  description: "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                                  type: ['array', 'null'],
                                  items: {
                                    description: 'VolumeMount describes a mounting of a Volume within a container.',
                                    required: ['name', 'mountPath'],
                                    properties: {
                                      mountPath: {
                                        description: "Path within the container at which the volume should be mounted.  Must not contain ':'.",
                                        type: 'string',
                                      },
                                      mountPropagation: {
                                        description: 'mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.',
                                        type: ['string', 'null'],
                                      },
                                      name: {
                                        description: 'This must match the Name of a Volume.',
                                        type: 'string',
                                      },
                                      readOnly: {
                                        description: 'Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.',
                                        type: 'boolean',
                                      },
                                      subPath: {
                                        description: 'Path within the volume from which the container\'s volume should be mounted. Defaults to "" (volume\'s root).',
                                        type: ['string', 'null'],
                                      },
                                    },
                                    additionalProperties: false,
                                  },
                                  'x-kubernetes-patch-merge-key': 'mountPath',
                                  'x-kubernetes-patch-strategy': 'merge',
                                },
                                workingDir: {
                                  description: "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                            'x-kubernetes-patch-merge-key': 'name',
                            'x-kubernetes-patch-strategy': 'merge',
                          },
                          nodeName: {
                            description: 'NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.',
                            type: ['string', 'null'],
                          },
                          nodeSelector: {
                            description: "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
                            type: 'object',
                            additionalProperties: {
                              type: ['string', 'null'],
                            },
                          },
                          priority: {
                            description: 'The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.',
                            type: 'integer',
                            format: 'int32',
                          },
                          priorityClassName: {
                            description: 'If specified, indicates the pod\'s priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.',
                            type: ['string', 'null'],
                          },
                          readinessGates: {
                            description: 'If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://github.com/kubernetes/community/blob/master/keps/sig-network/0007-pod-ready%2B%2B.md',
                            type: ['array', 'null'],
                            items: {
                              description: 'PodReadinessGate contains the reference to a pod condition',
                              required: ['conditionType'],
                              properties: {
                                conditionType: {
                                  description: "ConditionType refers to a condition in the pod's condition list with matching type.",
                                  type: 'string',
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          restartPolicy: {
                            description: 'Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy',
                            type: ['string', 'null'],
                          },
                          schedulerName: {
                            description: 'If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.',
                            type: ['string', 'null'],
                          },
                          securityContext: {
                            description: 'PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.',
                            properties: {
                              fsGroup: {
                                description: "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume.",
                                type: 'integer',
                                format: 'int64',
                              },
                              runAsGroup: {
                                description: 'The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.',
                                type: 'integer',
                                format: 'int64',
                              },
                              runAsNonRoot: {
                                description: 'Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
                                type: 'boolean',
                              },
                              runAsUser: {
                                description: 'The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.',
                                type: 'integer',
                                format: 'int64',
                              },
                              seLinuxOptions: {
                                description: 'SELinuxOptions are the labels to be applied to the container',
                                properties: {
                                  level: {
                                    description: 'Level is SELinux level label that applies to the container.',
                                    type: ['string', 'null'],
                                  },
                                  role: {
                                    description: 'Role is a SELinux role label that applies to the container.',
                                    type: ['string', 'null'],
                                  },
                                  type: {
                                    description: 'Type is a SELinux type label that applies to the container.',
                                    type: ['string', 'null'],
                                  },
                                  user: {
                                    description: 'User is a SELinux user label that applies to the container.',
                                    type: ['string', 'null'],
                                  },
                                },
                                additionalProperties: false,
                              },
                              supplementalGroups: {
                                description: "A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.",
                                type: ['array', 'null'],
                                items: {
                                  type: 'integer',
                                  format: 'int64',
                                },
                              },
                              sysctls: {
                                description: 'Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.',
                                type: ['array', 'null'],
                                items: {
                                  description: 'Sysctl defines a kernel parameter to be set',
                                  required: ['name', 'value'],
                                  properties: {
                                    name: {
                                      description: 'Name of a property to set',
                                      type: 'string',
                                    },
                                    value: {
                                      description: 'Value of a property to set',
                                      type: 'string',
                                    },
                                  },
                                  additionalProperties: false,
                                },
                              },
                            },
                            additionalProperties: false,
                          },
                          serviceAccount: {
                            description: 'DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.',
                            type: ['string', 'null'],
                          },
                          serviceAccountName: {
                            description: 'ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/',
                            type: ['string', 'null'],
                          },
                          shareProcessNamespace: {
                            description: 'Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false. This field is alpha-level and is honored only by servers that enable the PodShareProcessNamespace feature.',
                            type: 'boolean',
                          },
                          subdomain: {
                            description: 'If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.',
                            type: ['string', 'null'],
                          },
                          terminationGracePeriodSeconds: {
                            description:
                              'Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.',
                            type: 'integer',
                            format: 'int64',
                          },
                          tolerations: {
                            description: "If specified, the pod's tolerations.",
                            type: ['array', 'null'],
                            items: {
                              description: 'The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.',
                              properties: {
                                effect: {
                                  description: 'Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.',
                                  type: ['string', 'null'],
                                },
                                key: {
                                  description: 'Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.',
                                  type: ['string', 'null'],
                                },
                                operator: {
                                  description: "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                                  type: ['string', 'null'],
                                },
                                tolerationSeconds: {
                                  description: 'TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.',
                                  type: 'integer',
                                  format: 'int64',
                                },
                                value: {
                                  description: 'Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.',
                                  type: ['string', 'null'],
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          volumes: {
                            description: 'List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes',
                            type: ['array', 'null'],
                            items: {
                              description: 'Volume represents a named volume in a pod that may be accessed by any container in the pod.',
                              required: ['name'],
                              properties: {
                                awsElasticBlockStore: {
                                  description: 'Represents a Persistent Disk resource in AWS.\n\nAn AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.',
                                  required: ['volumeID'],
                                  properties: {
                                    fsType: {
                                      description: 'Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore',
                                      type: ['string', 'null'],
                                    },
                                    partition: {
                                      description: 'The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).',
                                      type: 'integer',
                                      format: 'int32',
                                    },
                                    readOnly: {
                                      description: 'Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore',
                                      type: 'boolean',
                                    },
                                    volumeID: {
                                      description: 'Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore',
                                      type: 'string',
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                azureDisk: {
                                  description: 'AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.',
                                  required: ['diskName', 'diskURI'],
                                  properties: {
                                    cachingMode: {
                                      description: 'Host Caching mode: None, Read Only, Read Write.',
                                      type: ['string', 'null'],
                                    },
                                    diskName: {
                                      description: 'The Name of the data disk in the blob storage',
                                      type: 'string',
                                    },
                                    diskURI: {
                                      description: 'The URI the data disk in the blob storage',
                                      type: 'string',
                                    },
                                    fsType: {
                                      description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                                      type: ['string', 'null'],
                                    },
                                    kind: {
                                      description: 'Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared',
                                      type: ['string', 'null'],
                                    },
                                    readOnly: {
                                      description: 'Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                                      type: 'boolean',
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                azureFile: {
                                  description: 'AzureFile represents an Azure File Service mount on the host and bind mount to the pod.',
                                  required: ['secretName', 'shareName'],
                                  properties: {
                                    readOnly: {
                                      description: 'Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                                      type: 'boolean',
                                    },
                                    secretName: {
                                      description: 'the name of secret that contains Azure Storage Account Name and Key',
                                      type: 'string',
                                    },
                                    shareName: {
                                      description: 'Share Name',
                                      type: 'string',
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                cephfs: {
                                  description: 'Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.',
                                  required: ['monitors'],
                                  properties: {
                                    monitors: {
                                      description: 'Required: Monitors is a collection of Ceph monitors More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it',
                                      type: 'array',
                                      items: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                    path: {
                                      description: 'Optional: Used as the mounted root, rather than the full Ceph tree, default is /',
                                      type: ['string', 'null'],
                                    },
                                    readOnly: {
                                      description: 'Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it',
                                      type: 'boolean',
                                    },
                                    secretFile: {
                                      description: 'Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it',
                                      type: ['string', 'null'],
                                    },
                                    secretRef: {
                                      description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                                      properties: {
                                        name: {
                                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                          type: ['string', 'null'],
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                    user: {
                                      description: 'Optional: User is the rados user name, default is admin More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it',
                                      type: ['string', 'null'],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                cinder: {
                                  description: 'Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.',
                                  required: ['volumeID'],
                                  properties: {
                                    fsType: {
                                      description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md',
                                      type: ['string', 'null'],
                                    },
                                    readOnly: {
                                      description: 'Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md',
                                      type: 'boolean',
                                    },
                                    secretRef: {
                                      description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                                      properties: {
                                        name: {
                                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                          type: ['string', 'null'],
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                    volumeID: {
                                      description: 'volume id used to identify the volume in cinder More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md',
                                      type: 'string',
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                configMap: {
                                  description: "Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.",
                                  properties: {
                                    defaultMode: {
                                      description: 'Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                      type: 'integer',
                                      format: 'int32',
                                    },
                                    items: {
                                      description:
                                        "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'Maps a string key to a path within a volume.',
                                        required: ['key', 'path'],
                                        properties: {
                                          key: {
                                            description: 'The key to project.',
                                            type: 'string',
                                          },
                                          mode: {
                                            description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                            type: 'integer',
                                            format: 'int32',
                                          },
                                          path: {
                                            description: "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                                            type: 'string',
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    name: {
                                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                      type: ['string', 'null'],
                                    },
                                    optional: {
                                      description: "Specify whether the ConfigMap or it's keys must be defined",
                                      type: 'boolean',
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                downwardAPI: {
                                  description: 'DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.',
                                  properties: {
                                    defaultMode: {
                                      description: 'Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                      type: 'integer',
                                      format: 'int32',
                                    },
                                    items: {
                                      description: 'Items is a list of downward API volume file',
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'DownwardAPIVolumeFile represents information to create the file containing the pod field',
                                        required: ['path'],
                                        properties: {
                                          fieldRef: {
                                            description: 'ObjectFieldSelector selects an APIVersioned field of an object.',
                                            required: ['fieldPath'],
                                            properties: {
                                              apiVersion: {
                                                description: 'Version of the schema the FieldPath is written in terms of, defaults to "v1".',
                                                type: ['string', 'null'],
                                              },
                                              fieldPath: {
                                                description: 'Path of the field to select in the specified API version.',
                                                type: 'string',
                                              },
                                            },
                                            additionalProperties: false,
                                          },
                                          mode: {
                                            description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                            type: 'integer',
                                            format: 'int32',
                                          },
                                          path: {
                                            description: "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
                                            type: 'string',
                                          },
                                          resourceFieldRef: {
                                            description: 'ResourceFieldSelector represents container resources (cpu, memory) and their output format',
                                            required: ['resource'],
                                            properties: {
                                              containerName: {
                                                description: 'Container name: required for volumes, optional for env vars',
                                                type: ['string', 'null'],
                                              },
                                              divisor: {
                                                oneOf: [
                                                  {
                                                    type: ['string', 'null'],
                                                  },
                                                  {
                                                    type: 'integer',
                                                  },
                                                ],
                                              },
                                              resource: {
                                                description: 'Required: resource to select',
                                                type: 'string',
                                              },
                                            },
                                            additionalProperties: false,
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                emptyDir: {
                                  description: 'Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.',
                                  properties: {
                                    medium: {
                                      description: 'What type of storage medium should back this directory. The default is "" which means to use the node\'s default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir',
                                      type: ['string', 'null'],
                                    },
                                    sizeLimit: {
                                      oneOf: [
                                        {
                                          type: ['string', 'null'],
                                        },
                                        {
                                          type: 'integer',
                                        },
                                      ],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                fc: {
                                  description: 'Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.',
                                  properties: {
                                    fsType: {
                                      description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                                      type: ['string', 'null'],
                                    },
                                    lun: {
                                      description: 'Optional: FC target lun number',
                                      type: 'integer',
                                      format: 'int32',
                                    },
                                    readOnly: {
                                      description: 'Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                                      type: 'boolean',
                                    },
                                    targetWWNs: {
                                      description: 'Optional: FC target worldwide names (WWNs)',
                                      type: ['array', 'null'],
                                      items: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                    wwids: {
                                      description: 'Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.',
                                      type: ['array', 'null'],
                                      items: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                flexVolume: {
                                  description: 'FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.',
                                  required: ['driver'],
                                  properties: {
                                    driver: {
                                      description: 'Driver is the name of the driver to use for this volume.',
                                      type: 'string',
                                    },
                                    fsType: {
                                      description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.',
                                      type: ['string', 'null'],
                                    },
                                    options: {
                                      description: 'Optional: Extra command options if any.',
                                      type: 'object',
                                      additionalProperties: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                    readOnly: {
                                      description: 'Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                                      type: 'boolean',
                                    },
                                    secretRef: {
                                      description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                                      properties: {
                                        name: {
                                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                          type: ['string', 'null'],
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                flocker: {
                                  description: 'Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.',
                                  properties: {
                                    datasetName: {
                                      description: 'Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated',
                                      type: ['string', 'null'],
                                    },
                                    datasetUUID: {
                                      description: 'UUID of the dataset. This is unique identifier of a Flocker dataset',
                                      type: ['string', 'null'],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                gcePersistentDisk: {
                                  description: 'Represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.',
                                  required: ['pdName'],
                                  properties: {
                                    fsType: {
                                      description: 'Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
                                      type: ['string', 'null'],
                                    },
                                    partition: {
                                      description: 'The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
                                      type: 'integer',
                                      format: 'int32',
                                    },
                                    pdName: {
                                      description: 'Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
                                      type: 'string',
                                    },
                                    readOnly: {
                                      description: 'ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
                                      type: 'boolean',
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                gitRepo: {
                                  description: "Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.\n\nDEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.",
                                  required: ['repository'],
                                  properties: {
                                    directory: {
                                      description: "Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.",
                                      type: ['string', 'null'],
                                    },
                                    repository: {
                                      description: 'Repository URL',
                                      type: 'string',
                                    },
                                    revision: {
                                      description: 'Commit hash for the specified revision.',
                                      type: ['string', 'null'],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                glusterfs: {
                                  description: 'Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.',
                                  required: ['endpoints', 'path'],
                                  properties: {
                                    endpoints: {
                                      description: 'EndpointsName is the endpoint name that details Glusterfs topology. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod',
                                      type: 'string',
                                    },
                                    path: {
                                      description: 'Path is the Glusterfs volume path. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod',
                                      type: 'string',
                                    },
                                    readOnly: {
                                      description: 'ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod',
                                      type: 'boolean',
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                hostPath: {
                                  description: 'Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.',
                                  required: ['path'],
                                  properties: {
                                    path: {
                                      description: 'Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath',
                                      type: 'string',
                                    },
                                    type: {
                                      description: 'Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath',
                                      type: ['string', 'null'],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                iscsi: {
                                  description: 'Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.',
                                  required: ['targetPortal', 'iqn', 'lun'],
                                  properties: {
                                    chapAuthDiscovery: {
                                      description: 'whether support iSCSI Discovery CHAP authentication',
                                      type: 'boolean',
                                    },
                                    chapAuthSession: {
                                      description: 'whether support iSCSI Session CHAP authentication',
                                      type: 'boolean',
                                    },
                                    fsType: {
                                      description: 'Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi',
                                      type: ['string', 'null'],
                                    },
                                    initiatorName: {
                                      description: 'Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.',
                                      type: ['string', 'null'],
                                    },
                                    iqn: {
                                      description: 'Target iSCSI Qualified Name.',
                                      type: 'string',
                                    },
                                    iscsiInterface: {
                                      description: "iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
                                      type: ['string', 'null'],
                                    },
                                    lun: {
                                      description: 'iSCSI Target Lun number.',
                                      type: 'integer',
                                      format: 'int32',
                                    },
                                    portals: {
                                      description: 'iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).',
                                      type: ['array', 'null'],
                                      items: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                    readOnly: {
                                      description: 'ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.',
                                      type: 'boolean',
                                    },
                                    secretRef: {
                                      description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                                      properties: {
                                        name: {
                                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                          type: ['string', 'null'],
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                    targetPortal: {
                                      description: 'iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).',
                                      type: 'string',
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                name: {
                                  description: "Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                                  type: 'string',
                                },
                                nfs: {
                                  description: 'Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.',
                                  required: ['server', 'path'],
                                  properties: {
                                    path: {
                                      description: 'Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs',
                                      type: 'string',
                                    },
                                    readOnly: {
                                      description: 'ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs',
                                      type: 'boolean',
                                    },
                                    server: {
                                      description: 'Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs',
                                      type: 'string',
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                persistentVolumeClaim: {
                                  description: "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).",
                                  required: ['claimName'],
                                  properties: {
                                    claimName: {
                                      description: 'ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims',
                                      type: 'string',
                                    },
                                    readOnly: {
                                      description: 'Will force the ReadOnly setting in VolumeMounts. Default false.',
                                      type: 'boolean',
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                photonPersistentDisk: {
                                  description: 'Represents a Photon Controller persistent disk resource.',
                                  required: ['pdID'],
                                  properties: {
                                    fsType: {
                                      description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                                      type: ['string', 'null'],
                                    },
                                    pdID: {
                                      description: 'ID that identifies Photon Controller persistent disk',
                                      type: 'string',
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                portworxVolume: {
                                  description: 'PortworxVolumeSource represents a Portworx volume resource.',
                                  required: ['volumeID'],
                                  properties: {
                                    fsType: {
                                      description: 'FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.',
                                      type: ['string', 'null'],
                                    },
                                    readOnly: {
                                      description: 'Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                                      type: 'boolean',
                                    },
                                    volumeID: {
                                      description: 'VolumeID uniquely identifies a Portworx volume',
                                      type: 'string',
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                projected: {
                                  description: 'Represents a projected volume source',
                                  required: ['sources'],
                                  properties: {
                                    defaultMode: {
                                      description: 'Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                      type: 'integer',
                                      format: 'int32',
                                    },
                                    sources: {
                                      description: 'list of volume projections',
                                      type: 'array',
                                      items: {
                                        description: 'Projection that may be projected along with other supported volume types',
                                        properties: {
                                          configMap: {
                                            description: "Adapts a ConfigMap into a projected volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.",
                                            properties: {
                                              items: {
                                                description:
                                                  "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                                                type: ['array', 'null'],
                                                items: {
                                                  description: 'Maps a string key to a path within a volume.',
                                                  required: ['key', 'path'],
                                                  properties: {
                                                    key: {
                                                      description: 'The key to project.',
                                                      type: 'string',
                                                    },
                                                    mode: {
                                                      description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                                      type: 'integer',
                                                      format: 'int32',
                                                    },
                                                    path: {
                                                      description: "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                                                      type: 'string',
                                                    },
                                                  },
                                                  additionalProperties: false,
                                                },
                                              },
                                              name: {
                                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                                type: ['string', 'null'],
                                              },
                                              optional: {
                                                description: "Specify whether the ConfigMap or it's keys must be defined",
                                                type: 'boolean',
                                              },
                                            },
                                            additionalProperties: false,
                                          },
                                          downwardAPI: {
                                            description: 'Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.',
                                            properties: {
                                              items: {
                                                description: 'Items is a list of DownwardAPIVolume file',
                                                type: ['array', 'null'],
                                                items: {
                                                  description: 'DownwardAPIVolumeFile represents information to create the file containing the pod field',
                                                  required: ['path'],
                                                  properties: {
                                                    fieldRef: {
                                                      description: 'ObjectFieldSelector selects an APIVersioned field of an object.',
                                                      required: ['fieldPath'],
                                                      properties: {
                                                        apiVersion: {
                                                          description: 'Version of the schema the FieldPath is written in terms of, defaults to "v1".',
                                                          type: ['string', 'null'],
                                                        },
                                                        fieldPath: {
                                                          description: 'Path of the field to select in the specified API version.',
                                                          type: 'string',
                                                        },
                                                      },
                                                      additionalProperties: false,
                                                    },
                                                    mode: {
                                                      description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                                      type: 'integer',
                                                      format: 'int32',
                                                    },
                                                    path: {
                                                      description: "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
                                                      type: 'string',
                                                    },
                                                    resourceFieldRef: {
                                                      description: 'ResourceFieldSelector represents container resources (cpu, memory) and their output format',
                                                      required: ['resource'],
                                                      properties: {
                                                        containerName: {
                                                          description: 'Container name: required for volumes, optional for env vars',
                                                          type: ['string', 'null'],
                                                        },
                                                        divisor: {
                                                          oneOf: [
                                                            {
                                                              type: ['string', 'null'],
                                                            },
                                                            {
                                                              type: 'integer',
                                                            },
                                                          ],
                                                        },
                                                        resource: {
                                                          description: 'Required: resource to select',
                                                          type: 'string',
                                                        },
                                                      },
                                                      additionalProperties: false,
                                                    },
                                                  },
                                                  additionalProperties: false,
                                                },
                                              },
                                            },
                                            additionalProperties: false,
                                          },
                                          secret: {
                                            description: "Adapts a secret into a projected volume.\n\nThe contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.",
                                            properties: {
                                              items: {
                                                description:
                                                  "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                                                type: ['array', 'null'],
                                                items: {
                                                  description: 'Maps a string key to a path within a volume.',
                                                  required: ['key', 'path'],
                                                  properties: {
                                                    key: {
                                                      description: 'The key to project.',
                                                      type: 'string',
                                                    },
                                                    mode: {
                                                      description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                                      type: 'integer',
                                                      format: 'int32',
                                                    },
                                                    path: {
                                                      description: "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                                                      type: 'string',
                                                    },
                                                  },
                                                  additionalProperties: false,
                                                },
                                              },
                                              name: {
                                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                                type: ['string', 'null'],
                                              },
                                              optional: {
                                                description: 'Specify whether the Secret or its key must be defined',
                                                type: 'boolean',
                                              },
                                            },
                                            additionalProperties: false,
                                          },
                                          serviceAccountToken: {
                                            description: 'ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).',
                                            required: ['path'],
                                            properties: {
                                              audience: {
                                                description: 'Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.',
                                                type: ['string', 'null'],
                                              },
                                              expirationSeconds: {
                                                description: 'ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.',
                                                type: 'integer',
                                                format: 'int64',
                                              },
                                              path: {
                                                description: 'Path is the path relative to the mount point of the file to project the token into.',
                                                type: 'string',
                                              },
                                            },
                                            additionalProperties: false,
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                quobyte: {
                                  description: 'Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.',
                                  required: ['registry', 'volume'],
                                  properties: {
                                    group: {
                                      description: 'Group to map volume access to Default is no group',
                                      type: ['string', 'null'],
                                    },
                                    readOnly: {
                                      description: 'ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.',
                                      type: 'boolean',
                                    },
                                    registry: {
                                      description: 'Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes',
                                      type: 'string',
                                    },
                                    user: {
                                      description: 'User to map volume access to Defaults to serivceaccount user',
                                      type: ['string', 'null'],
                                    },
                                    volume: {
                                      description: 'Volume is a string that references an already created Quobyte volume by name.',
                                      type: 'string',
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                rbd: {
                                  description: 'Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.',
                                  required: ['monitors', 'image'],
                                  properties: {
                                    fsType: {
                                      description: 'Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd',
                                      type: ['string', 'null'],
                                    },
                                    image: {
                                      description: 'The rados image name. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                                      type: 'string',
                                    },
                                    keyring: {
                                      description: 'Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                                      type: ['string', 'null'],
                                    },
                                    monitors: {
                                      description: 'A collection of Ceph monitors. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                                      type: 'array',
                                      items: {
                                        type: ['string', 'null'],
                                      },
                                    },
                                    pool: {
                                      description: 'The rados pool name. Default is rbd. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                                      type: ['string', 'null'],
                                    },
                                    readOnly: {
                                      description: 'ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                                      type: 'boolean',
                                    },
                                    secretRef: {
                                      description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                                      properties: {
                                        name: {
                                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                          type: ['string', 'null'],
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                    user: {
                                      description: 'The rados user name. Default is admin. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                                      type: ['string', 'null'],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                scaleIO: {
                                  description: 'ScaleIOVolumeSource represents a persistent ScaleIO volume',
                                  required: ['gateway', 'system', 'secretRef'],
                                  properties: {
                                    fsType: {
                                      description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                                      type: ['string', 'null'],
                                    },
                                    gateway: {
                                      description: 'The host address of the ScaleIO API Gateway.',
                                      type: 'string',
                                    },
                                    protectionDomain: {
                                      description: 'The name of the ScaleIO Protection Domain for the configured storage.',
                                      type: ['string', 'null'],
                                    },
                                    readOnly: {
                                      description: 'Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                                      type: 'boolean',
                                    },
                                    secretRef: {
                                      description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                                      properties: {
                                        name: {
                                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                          type: ['string', 'null'],
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                    sslEnabled: {
                                      description: 'Flag to enable/disable SSL communication with Gateway, default false',
                                      type: 'boolean',
                                    },
                                    storageMode: {
                                      description: 'Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.',
                                      type: ['string', 'null'],
                                    },
                                    storagePool: {
                                      description: 'The ScaleIO Storage Pool associated with the protection domain.',
                                      type: ['string', 'null'],
                                    },
                                    system: {
                                      description: 'The name of the storage system as configured in ScaleIO.',
                                      type: 'string',
                                    },
                                    volumeName: {
                                      description: 'The name of a volume already created in the ScaleIO system that is associated with this volume source.',
                                      type: ['string', 'null'],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                secret: {
                                  description: "Adapts a Secret into a volume.\n\nThe contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.",
                                  properties: {
                                    defaultMode: {
                                      description: 'Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                      type: 'integer',
                                      format: 'int32',
                                    },
                                    items: {
                                      description:
                                        "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                                      type: ['array', 'null'],
                                      items: {
                                        description: 'Maps a string key to a path within a volume.',
                                        required: ['key', 'path'],
                                        properties: {
                                          key: {
                                            description: 'The key to project.',
                                            type: 'string',
                                          },
                                          mode: {
                                            description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
                                            type: 'integer',
                                            format: 'int32',
                                          },
                                          path: {
                                            description: "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                                            type: 'string',
                                          },
                                        },
                                        additionalProperties: false,
                                      },
                                    },
                                    optional: {
                                      description: "Specify whether the Secret or it's keys must be defined",
                                      type: 'boolean',
                                    },
                                    secretName: {
                                      description: "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
                                      type: ['string', 'null'],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                storageos: {
                                  description: 'Represents a StorageOS persistent volume resource.',
                                  properties: {
                                    fsType: {
                                      description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                                      type: ['string', 'null'],
                                    },
                                    readOnly: {
                                      description: 'Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                                      type: 'boolean',
                                    },
                                    secretRef: {
                                      description: 'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
                                      properties: {
                                        name: {
                                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                                          type: ['string', 'null'],
                                        },
                                      },
                                      additionalProperties: false,
                                    },
                                    volumeName: {
                                      description: 'VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.',
                                      type: ['string', 'null'],
                                    },
                                    volumeNamespace: {
                                      description: 'VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod\'s namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.',
                                      type: ['string', 'null'],
                                    },
                                  },
                                  additionalProperties: false,
                                },
                                vsphereVolume: {
                                  description: 'Represents a vSphere volume resource.',
                                  required: ['volumePath'],
                                  properties: {
                                    fsType: {
                                      description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                                      type: ['string', 'null'],
                                    },
                                    storagePolicyID: {
                                      description: 'Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.',
                                      type: ['string', 'null'],
                                    },
                                    storagePolicyName: {
                                      description: 'Storage Policy Based Management (SPBM) profile name.',
                                      type: ['string', 'null'],
                                    },
                                    volumePath: {
                                      description: 'Path that identifies vSphere volume vmdk',
                                      type: 'string',
                                    },
                                  },
                                  additionalProperties: false,
                                },
                              },
                              additionalProperties: false,
                            },
                            'x-kubernetes-patch-merge-key': 'name',
                            'x-kubernetes-patch-strategy': 'merge,retainKeys',
                          },
                        },
                        additionalProperties: false,
                      },
                    },
                    additionalProperties: false,
                  },
                },
                additionalProperties: false,
              },
            },
            additionalProperties: false,
          },
          schedule: {
            description: 'The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.',
            type: 'string',
          },
          startingDeadlineSeconds: {
            description: 'Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.',
            type: 'integer',
            format: 'int64',
          },
          successfulJobsHistoryLimit: {
            description: 'The number of successful finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified. Defaults to 3.',
            type: 'integer',
            format: 'int32',
          },
          suspend: {
            description: 'This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.',
            type: 'boolean',
          },
        },
        additionalProperties: false,
      },
      status: {
        description: 'CronJobStatus represents the current state of a cron job.',
        properties: {
          active: {
            description: 'A list of pointers to currently running jobs.',
            type: ['array', 'null'],
            items: {
              description: 'ObjectReference contains enough information to let you inspect or modify the referred object.',
              properties: {
                apiVersion: {
                  description: 'API version of the referent.',
                  type: ['string', 'null'],
                },
                fieldPath: {
                  description:
                    'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.',
                  type: ['string', 'null'],
                },
                kind: {
                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                  type: ['string', 'null'],
                },
                name: {
                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                  type: ['string', 'null'],
                },
                namespace: {
                  description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
                  type: ['string', 'null'],
                },
                resourceVersion: {
                  description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency',
                  type: ['string', 'null'],
                },
                uid: {
                  description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids',
                  type: ['string', 'null'],
                },
              },
              additionalProperties: false,
            },
          },
          lastScheduleTime: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            type: ['string', 'null'],
            format: 'date-time',
          },
        },
        additionalProperties: false,
      },
    },
    'x-kubernetes-group-version-kind': [
      {
        group: 'batch',
        kind: 'CronJob',
        version: 'v1beta1',
      },
    ],
    additionalProperties: false,
    $schema: 'http://json-schema.org/schema#',
    type: 'object',
  })
  .setIn([referenceForModel(k8sModels.ServiceModel), 'default'], {
    description: 'Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.',
    properties: {
      apiVersion: {
        description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
        type: ['string', 'null'],
        enum: ['v1'],
      },
      kind: {
        description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
        type: ['string', 'null'],
        enum: ['Service'],
      },
      metadata: {
        description: 'ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.',
        properties: {
          annotations: {
            description: 'Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations',
            type: 'object',
            additionalProperties: {
              type: ['string', 'null'],
            },
          },
          clusterName: {
            description: 'The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.',
            type: ['string', 'null'],
          },
          creationTimestamp: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            type: ['string', 'null'],
            format: 'date-time',
          },
          deletionGracePeriodSeconds: {
            description: 'Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.',
            type: 'integer',
            format: 'int64',
          },
          deletionTimestamp: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            type: ['string', 'null'],
            format: 'date-time',
          },
          finalizers: {
            description: 'Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.',
            type: ['array', 'null'],
            items: {
              type: ['string', 'null'],
            },
            'x-kubernetes-patch-strategy': 'merge',
          },
          generateName: {
            description:
              'GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency',
            type: ['string', 'null'],
          },
          generation: {
            description: 'A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.',
            type: 'integer',
            format: 'int64',
          },
          initializers: {
            description: 'Initializers tracks the progress of initialization.',
            required: ['pending'],
            properties: {
              pending: {
                description: 'Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.',
                type: 'array',
                items: {
                  description: 'Initializer is information about an initializer that has not yet completed.',
                  required: ['name'],
                  properties: {
                    name: {
                      description: 'name of the process that is responsible for initializing this object.',
                      type: 'string',
                    },
                  },
                  additionalProperties: false,
                },
                'x-kubernetes-patch-merge-key': 'name',
                'x-kubernetes-patch-strategy': 'merge',
              },
              result: {
                description: "Status is a return value for calls that don't return other objects.",
                properties: {
                  apiVersion: {
                    description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
                    type: ['string', 'null'],
                    enum: ['v1'],
                  },
                  code: {
                    description: 'Suggested HTTP return code for this status, 0 if not set.',
                    type: 'integer',
                    format: 'int32',
                  },
                  details: {
                    description: 'StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.',
                    properties: {
                      causes: {
                        description: 'The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.',
                        type: ['array', 'null'],
                        items: {
                          description: 'StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.',
                          properties: {
                            field: {
                              description: 'The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  "name" - the field "name" on the current resource\n  "items[0].name" - the field "name" on the first array entry in "items"',
                              type: ['string', 'null'],
                            },
                            message: {
                              description: 'A human-readable description of the cause of the error.  This field may be presented as-is to a reader.',
                              type: ['string', 'null'],
                            },
                            reason: {
                              description: 'A machine-readable description of the cause of the error. If this value is empty there is no information available.',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                      },
                      group: {
                        description: 'The group attribute of the resource associated with the status StatusReason.',
                        type: ['string', 'null'],
                      },
                      kind: {
                        description: 'The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                        type: ['string', 'null'],
                      },
                      name: {
                        description: 'The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).',
                        type: ['string', 'null'],
                      },
                      retryAfterSeconds: {
                        description: 'If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.',
                        type: 'integer',
                        format: 'int32',
                      },
                      uid: {
                        description: 'UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                        type: ['string', 'null'],
                      },
                    },
                    additionalProperties: false,
                  },
                  kind: {
                    description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                    type: ['string', 'null'],
                    enum: ['Status'],
                  },
                  message: {
                    description: 'A human-readable description of the status of this operation.',
                    type: ['string', 'null'],
                  },
                  metadata: {
                    description: 'ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.',
                    properties: {
                      continue: {
                        description:
                          'continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response.',
                        type: ['string', 'null'],
                      },
                      resourceVersion: {
                        description: "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
                        type: ['string', 'null'],
                      },
                      selfLink: {
                        description: 'selfLink is a URL representing this object. Populated by the system. Read-only.',
                        type: ['string', 'null'],
                      },
                    },
                    additionalProperties: false,
                  },
                  reason: {
                    description: 'A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.',
                    type: ['string', 'null'],
                  },
                  status: {
                    description: 'Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status',
                    type: ['string', 'null'],
                  },
                },
                'x-kubernetes-group-version-kind': [
                  {
                    group: '',
                    kind: 'Status',
                    version: 'v1',
                  },
                ],
                additionalProperties: false,
              },
            },
            additionalProperties: false,
          },
          labels: {
            description: 'Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels',
            type: 'object',
            additionalProperties: {
              type: ['string', 'null'],
            },
          },
          name: {
            description: 'Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
            type: ['string', 'null'],
          },
          namespace: {
            description: 'Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces',
            type: ['string', 'null'],
          },
          ownerReferences: {
            description: 'List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.',
            type: ['array', 'null'],
            items: {
              description: 'OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.',
              required: ['apiVersion', 'kind', 'name', 'uid'],
              properties: {
                apiVersion: {
                  description: 'API version of the referent.',
                  type: 'string',
                },
                blockOwnerDeletion: {
                  description: 'If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.',
                  type: 'boolean',
                },
                controller: {
                  description: 'If true, this reference points to the managing controller.',
                  type: 'boolean',
                },
                kind: {
                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                  type: 'string',
                },
                name: {
                  description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
                  type: 'string',
                },
                uid: {
                  description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                  type: 'string',
                },
              },
              additionalProperties: false,
            },
            'x-kubernetes-patch-merge-key': 'uid',
            'x-kubernetes-patch-strategy': 'merge',
          },
          resourceVersion: {
            description:
              'An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency',
            type: ['string', 'null'],
          },
          selfLink: {
            description: 'SelfLink is a URL representing this object. Populated by the system. Read-only.',
            type: ['string', 'null'],
          },
          uid: {
            description: 'UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
            type: ['string', 'null'],
          },
        },
        additionalProperties: false,
      },
      spec: {
        description: 'ServiceSpec describes the attributes that a user creates on a service.',
        properties: {
          clusterIP: {
            description:
              'clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are "None", empty string (""), or a valid IP address. "None" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies',
            type: ['string', 'null'],
          },
          externalIPs: {
            description: 'externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.',
            type: ['array', 'null'],
            items: {
              type: ['string', 'null'],
            },
          },
          externalName: {
            description: 'externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.',
            type: ['string', 'null'],
          },
          externalTrafficPolicy: {
            description: 'externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.',
            type: ['string', 'null'],
          },
          healthCheckNodePort: {
            description: 'healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.',
            type: 'integer',
            format: 'int32',
          },
          loadBalancerIP: {
            description: 'Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.',
            type: ['string', 'null'],
          },
          loadBalancerSourceRanges: {
            description: 'If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/',
            type: ['array', 'null'],
            items: {
              type: ['string', 'null'],
            },
          },
          ports: {
            description: 'The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies',
            type: ['array', 'null'],
            items: {
              description: "ServicePort contains information on service's port.",
              required: ['port'],
              properties: {
                name: {
                  description: "The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. This maps to the 'Name' field in EndpointPort objects. Optional if only one ServicePort is defined on this service.",
                  type: ['string', 'null'],
                },
                nodePort: {
                  description: 'The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport',
                  type: 'integer',
                  format: 'int32',
                },
                port: {
                  description: 'The port that will be exposed by this service.',
                  type: 'integer',
                  format: 'int32',
                },
                protocol: {
                  description: 'The IP protocol for this port. Supports "TCP" and "UDP". Default is TCP.',
                  type: ['string', 'null'],
                },
                targetPort: {
                  oneOf: [
                    {
                      type: ['string', 'null'],
                    },
                    {
                      type: 'integer',
                    },
                  ],
                },
              },
              additionalProperties: false,
            },
            'x-kubernetes-patch-merge-key': 'port',
            'x-kubernetes-patch-strategy': 'merge',
          },
          publishNotReadyAddresses: {
            description: "publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery.",
            type: 'boolean',
          },
          selector: {
            description: 'Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/',
            type: 'object',
            additionalProperties: {
              type: ['string', 'null'],
            },
          },
          sessionAffinity: {
            description: 'Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies',
            type: ['string', 'null'],
          },
          sessionAffinityConfig: {
            description: 'SessionAffinityConfig represents the configurations of session affinity.',
            properties: {
              clientIP: {
                description: 'ClientIPConfig represents the configurations of Client IP based session affinity.',
                properties: {
                  timeoutSeconds: {
                    description: 'timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).',
                    type: 'integer',
                    format: 'int32',
                  },
                },
                additionalProperties: false,
              },
            },
            additionalProperties: false,
          },
          type: {
            description:
              'type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ExternalName" maps to the specified externalName. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services---service-types',
            type: ['string', 'null'],
          },
        },
        required: ['ports'],
        if: {
          properties: {
            type: {
              enum: ['ExternalName'],
            },
          },
        },
        then: {
          not: { required: ['ports'] },
        },
        additionalProperties: false,
      },
      status: {
        description: 'ServiceStatus represents the current status of a service.',
        properties: {
          loadBalancer: {
            description: 'LoadBalancerStatus represents the status of a load-balancer.',
            properties: {
              ingress: {
                description: 'Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.',
                type: ['array', 'null'],
                items: {
                  description: 'LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.',
                  properties: {
                    hostname: {
                      description: 'Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)',
                      type: ['string', 'null'],
                    },
                    ip: {
                      description: 'IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)',
                      type: ['string', 'null'],
                    },
                  },
                  additionalProperties: false,
                },
              },
            },
            additionalProperties: false,
          },
        },
        additionalProperties: false,
      },
    },
    'x-kubernetes-group-version-kind': [
      {
        group: '',
        kind: 'Service',
        version: 'v1',
      },
    ],
    additionalProperties: false,
    $schema: 'http://json-schema.org/schema#',
    type: 'object',
  })
  .setIn([referenceForModel(k8sModels.IngressModel), 'default'], {
    description: 'IngressSpec describes the Ingress the user wishes to exist.',
    properties: {
      backend: {
        description: 'IngressBackend describes all endpoints for a given service and port.',
        properties: {
          resource: {
            description: 'TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.',
            properties: {
              apiGroup: {
                description: 'APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.',
                type: ['string', 'null'],
              },
              kind: {
                description: 'Kind is the type of resource being referenced',
                type: 'string',
              },
              name: {
                description: 'Name is the name of resource being referenced',
                type: 'string',
              },
            },
            required: ['kind', 'name'],
            type: ['object', 'null'],
          },
          serviceName: {
            description: 'Specifies the name of the referenced service.',
            type: ['string', 'null'],
          },
          servicePort: {
            oneOf: [
              {
                type: ['string', 'null'],
              },
              {
                type: ['integer', 'null'],
              },
            ],
          },
        },
        type: ['object', 'null'],
      },
      ingressClassName: {
        description:
          'IngressClassName is the name of the IngressClass cluster resource. The associated IngressClass defines which controller will implement the resource. This replaces the deprecated `kubernetes.io/ingress.class` annotation. For backwards compatibility, when that annotation is set, it must be given precedence over this field. The controller may emit a warning if the field and annotation have different values. Implementations of this API should ignore Ingresses without a class specified. An IngressClass resource may be marked as default, which can be used to set a default value for this field. For more information, refer to the IngressClass documentation.',
        type: ['string', 'null'],
      },
      rules: {
        description: 'A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.',
        items: {
          description: 'IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.',
          properties: {
            host: {
              description:
                'Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the "host" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to\n   the IP in the Spec of the parent Ingress.\n2. The `:` delimiter is not respected because ports are not allowed.\n\t  Currently the port of an Ingress is implicitly :80 for http and\n\t  :443 for https.\nBoth these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.\n\nHost can be "precise" which is a domain name without the terminating dot of a network host (e.g. "foo.bar.com") or "wildcard", which is a domain name prefixed with a single wildcard label (e.g. "*.foo.com"). The wildcard character \'*\' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == "*"). Requests will be matched against the Host field in the following way: 1. If Host is precise, the request matches this rule if the http host header is equal to Host. 2. If Host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule.',
              type: ['string', 'null'],
            },
            http: {
              description: "HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.",
              properties: {
                paths: {
                  description: 'A collection of paths that map requests to backends.',
                  items: {
                    description: 'HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.',
                    properties: {
                      backend: {
                        description: 'IngressBackend describes all endpoints for a given service and port.',
                        properties: {
                          resource: {
                            description: 'TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.',
                            properties: {
                              apiGroup: {
                                description: 'APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.',
                                type: ['string', 'null'],
                              },
                              kind: {
                                description: 'Kind is the type of resource being referenced',
                                type: 'string',
                              },
                              name: {
                                description: 'Name is the name of resource being referenced',
                                type: 'string',
                              },
                            },
                            required: ['kind', 'name'],
                            type: ['object', 'null'],
                          },
                          serviceName: {
                            description: 'Specifies the name of the referenced service.',
                            type: ['string', 'null'],
                          },
                          servicePort: {
                            oneOf: [
                              {
                                type: ['string', 'null'],
                              },
                              {
                                type: ['integer', 'null'],
                              },
                            ],
                          },
                        },
                        type: 'object',
                      },
                      path: {
                        description: 'Path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986. Paths must begin with a \'/\'. When unspecified, all paths from incoming requests are matched.',
                        type: ['string', 'null'],
                      },
                      pathType: {
                        description:
                          "PathType determines the interpretation of the Path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is\n  done on a path element by element basis. A path element refers is the\n  list of labels in the path split by the '/' separator. A request is a\n  match for path p if every p is an element-wise prefix of p of the\n  request path. Note that if the last element of the path is a substring\n  of the last element in request path, it is not a match (e.g. /foo/bar\n  matches /foo/bar/baz, but does not match /foo/barbaz).\n* ImplementationSpecific: Interpretation of the Path matching is up to\n  the IngressClass. Implementations can treat this as a separate PathType\n  or treat it identically to Prefix or Exact path types.\nImplementations are required to support all path types. Defaults to ImplementationSpecific.",
                        type: ['string', 'null'],
                      },
                    },
                    required: ['backend'],
                    type: ['object', 'null'],
                  },
                  type: 'array',
                },
              },
              required: ['paths'],
              type: ['object', 'null'],
            },
          },
          type: ['object', 'null'],
        },
        type: ['array', 'null'],
      },
      tls: {
        description: 'TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.',
        items: {
          description: 'IngressTLS describes the transport layer security associated with an Ingress.',
          properties: {
            hosts: {
              description: 'Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.',
              items: {
                type: ['string', 'null'],
              },
              type: ['array', 'null'],
            },
            secretName: {
              description: 'SecretName is the name of the secret used to terminate TLS traffic on port 443. Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.',
              type: ['string', 'null'],
            },
          },
          type: ['object', 'null'],
        },
        type: ['array', 'null'],
      },
    },
    type: 'object',
    $schema: 'http://json-schema.org/schema#',
  })
  .setIn([referenceForModel(k8sModels.NetworkPolicyModel), 'default'], {
    description: 'NetworkPolicy describes what network traffic is allowed for a set of Pods',
    properties: {
      apiVersion: {
        description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
        type: ['string', 'null'],
        enum: ['networking.k8s.io/v1'],
      },
      kind: {
        description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
        type: ['string', 'null'],
        enum: ['NetworkPolicy'],
      },
      metadata: {
        description: 'ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.',
        properties: {
          annotations: {
            description: 'Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations',
            type: 'object',
            additionalProperties: {
              type: ['string', 'null'],
            },
          },
          clusterName: {
            description: 'The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.',
            type: ['string', 'null'],
          },
          creationTimestamp: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            type: ['string', 'null'],
            format: 'date-time',
          },
          deletionGracePeriodSeconds: {
            description: 'Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.',
            type: 'integer',
            format: 'int64',
          },
          deletionTimestamp: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            type: ['string', 'null'],
            format: 'date-time',
          },
          finalizers: {
            description: 'Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.',
            type: ['array', 'null'],
            items: {
              type: ['string', 'null'],
            },
            'x-kubernetes-patch-strategy': 'merge',
          },
          generateName: {
            description:
              'GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency',
            type: ['string', 'null'],
          },
          generation: {
            description: 'A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.',
            type: 'integer',
            format: 'int64',
          },
          initializers: {
            description: 'Initializers tracks the progress of initialization.',
            required: ['pending'],
            properties: {
              pending: {
                description: 'Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.',
                type: 'array',
                items: {
                  description: 'Initializer is information about an initializer that has not yet completed.',
                  required: ['name'],
                  properties: {
                    name: {
                      description: 'name of the process that is responsible for initializing this object.',
                      type: 'string',
                    },
                  },
                  additionalProperties: false,
                },
                'x-kubernetes-patch-merge-key': 'name',
                'x-kubernetes-patch-strategy': 'merge',
              },
              result: {
                description: "Status is a return value for calls that don't return other objects.",
                properties: {
                  apiVersion: {
                    description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
                    type: ['string', 'null'],
                    enum: ['v1'],
                  },
                  code: {
                    description: 'Suggested HTTP return code for this status, 0 if not set.',
                    type: 'integer',
                    format: 'int32',
                  },
                  details: {
                    description: 'StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.',
                    properties: {
                      causes: {
                        description: 'The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.',
                        type: ['array', 'null'],
                        items: {
                          description: 'StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.',
                          properties: {
                            field: {
                              description: 'The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  "name" - the field "name" on the current resource\n  "items[0].name" - the field "name" on the first array entry in "items"',
                              type: ['string', 'null'],
                            },
                            message: {
                              description: 'A human-readable description of the cause of the error.  This field may be presented as-is to a reader.',
                              type: ['string', 'null'],
                            },
                            reason: {
                              description: 'A machine-readable description of the cause of the error. If this value is empty there is no information available.',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                      },
                      group: {
                        description: 'The group attribute of the resource associated with the status StatusReason.',
                        type: ['string', 'null'],
                      },
                      kind: {
                        description: 'The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                        type: ['string', 'null'],
                      },
                      name: {
                        description: 'The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).',
                        type: ['string', 'null'],
                      },
                      retryAfterSeconds: {
                        description: 'If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.',
                        type: 'integer',
                        format: 'int32',
                      },
                      uid: {
                        description: 'UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                        type: ['string', 'null'],
                      },
                    },
                    additionalProperties: false,
                  },
                  kind: {
                    description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                    type: ['string', 'null'],
                    enum: ['Status'],
                  },
                  message: {
                    description: 'A human-readable description of the status of this operation.',
                    type: ['string', 'null'],
                  },
                  metadata: {
                    description: 'ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.',
                    properties: {
                      continue: {
                        description:
                          'continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response.',
                        type: ['string', 'null'],
                      },
                      resourceVersion: {
                        description: "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
                        type: ['string', 'null'],
                      },
                      selfLink: {
                        description: 'selfLink is a URL representing this object. Populated by the system. Read-only.',
                        type: ['string', 'null'],
                      },
                    },
                    additionalProperties: false,
                  },
                  reason: {
                    description: 'A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.',
                    type: ['string', 'null'],
                  },
                  status: {
                    description: 'Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status',
                    type: ['string', 'null'],
                  },
                },
                'x-kubernetes-group-version-kind': [
                  {
                    group: '',
                    kind: 'Status',
                    version: 'v1',
                  },
                ],
                additionalProperties: false,
              },
            },
            additionalProperties: false,
          },
          labels: {
            description: 'Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels',
            type: 'object',
            additionalProperties: {
              type: ['string', 'null'],
            },
          },
          name: {
            description: 'Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
            type: ['string', 'null'],
          },
          namespace: {
            description: 'Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces',
            type: ['string', 'null'],
          },
          ownerReferences: {
            description: 'List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.',
            type: ['array', 'null'],
            items: {
              description: 'OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.',
              required: ['apiVersion', 'kind', 'name', 'uid'],
              properties: {
                apiVersion: {
                  description: 'API version of the referent.',
                  type: 'string',
                },
                blockOwnerDeletion: {
                  description: 'If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.',
                  type: 'boolean',
                },
                controller: {
                  description: 'If true, this reference points to the managing controller.',
                  type: 'boolean',
                },
                kind: {
                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                  type: 'string',
                },
                name: {
                  description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
                  type: 'string',
                },
                uid: {
                  description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                  type: 'string',
                },
              },
              additionalProperties: false,
            },
            'x-kubernetes-patch-merge-key': 'uid',
            'x-kubernetes-patch-strategy': 'merge',
          },
          resourceVersion: {
            description:
              'An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency',
            type: ['string', 'null'],
          },
          selfLink: {
            description: 'SelfLink is a URL representing this object. Populated by the system. Read-only.',
            type: ['string', 'null'],
          },
          uid: {
            description: 'UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
            type: ['string', 'null'],
          },
        },
        additionalProperties: false,
      },
      spec: {
        description: 'NetworkPolicySpec provides the specification of a NetworkPolicy',
        required: ['podSelector'],
        properties: {
          egress: {
            description:
              'List of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8',
            type: ['array', 'null'],
            items: {
              description: "NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to. This type is beta-level in 1.8",
              properties: {
                ports: {
                  description: 'List of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.',
                  type: ['array', 'null'],
                  items: {
                    description: 'NetworkPolicyPort describes a port to allow traffic on',
                    properties: {
                      port: {
                        oneOf: [
                          {
                            type: ['string', 'null'],
                          },
                          {
                            type: 'integer',
                          },
                        ],
                      },
                      protocol: {
                        description: 'The protocol (TCP or UDP) which traffic must match. If not specified, this field defaults to TCP.',
                        type: ['string', 'null'],
                      },
                    },
                    additionalProperties: false,
                  },
                },
                to: {
                  description: 'List of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.',
                  type: ['array', 'null'],
                  items: {
                    description: 'NetworkPolicyPeer describes a peer to allow traffic from. Only certain combinations of fields are allowed',
                    properties: {
                      ipBlock: {
                        description: 'IPBlock describes a particular CIDR (Ex. "192.168.1.1/24") that is allowed to the pods matched by a NetworkPolicySpec\'s podSelector. The except entry describes CIDRs that should not be included within this rule.',
                        required: ['cidr'],
                        properties: {
                          cidr: {
                            description: 'CIDR is a string representing the IP Block Valid examples are "192.168.1.1/24"',
                            type: 'string',
                          },
                          except: {
                            description: 'Except is a slice of CIDRs that should not be included within an IP Block Valid examples are "192.168.1.1/24" Except values will be rejected if they are outside the CIDR range',
                            type: ['array', 'null'],
                            items: {
                              type: ['string', 'null'],
                            },
                          },
                        },
                        additionalProperties: false,
                      },
                      namespaceSelector: {
                        description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
                        properties: {
                          matchExpressions: {
                            description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                            type: ['array', 'null'],
                            items: {
                              description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                              required: ['key', 'operator'],
                              properties: {
                                key: {
                                  description: 'key is the label key that the selector applies to.',
                                  type: 'string',
                                  'x-kubernetes-patch-merge-key': 'key',
                                  'x-kubernetes-patch-strategy': 'merge',
                                },
                                operator: {
                                  description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                  type: 'string',
                                },
                                values: {
                                  description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          matchLabels: {
                            description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                            type: 'object',
                            additionalProperties: {
                              type: ['string', 'null'],
                            },
                          },
                        },
                        additionalProperties: false,
                      },
                      podSelector: {
                        description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
                        properties: {
                          matchExpressions: {
                            description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                            type: ['array', 'null'],
                            items: {
                              description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                              required: ['key', 'operator'],
                              properties: {
                                key: {
                                  description: 'key is the label key that the selector applies to.',
                                  type: 'string',
                                  'x-kubernetes-patch-merge-key': 'key',
                                  'x-kubernetes-patch-strategy': 'merge',
                                },
                                operator: {
                                  description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                  type: 'string',
                                },
                                values: {
                                  description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          matchLabels: {
                            description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                            type: 'object',
                            additionalProperties: {
                              type: ['string', 'null'],
                            },
                          },
                        },
                        additionalProperties: false,
                      },
                    },
                    additionalProperties: false,
                  },
                },
              },
              additionalProperties: false,
            },
          },
          ingress: {
            description:
              "List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)",
            type: ['array', 'null'],
            items: {
              description: "NetworkPolicyIngressRule describes a particular set of traffic that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and from.",
              properties: {
                from: {
                  description: 'List of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least on item, this rule allows traffic only if the traffic matches at least one item in the from list.',
                  type: ['array', 'null'],
                  items: {
                    description: 'NetworkPolicyPeer describes a peer to allow traffic from. Only certain combinations of fields are allowed',
                    properties: {
                      ipBlock: {
                        description: 'IPBlock describes a particular CIDR (Ex. "192.168.1.1/24") that is allowed to the pods matched by a NetworkPolicySpec\'s podSelector. The except entry describes CIDRs that should not be included within this rule.',
                        required: ['cidr'],
                        properties: {
                          cidr: {
                            description: 'CIDR is a string representing the IP Block Valid examples are "192.168.1.1/24"',
                            type: 'string',
                          },
                          except: {
                            description: 'Except is a slice of CIDRs that should not be included within an IP Block Valid examples are "192.168.1.1/24" Except values will be rejected if they are outside the CIDR range',
                            type: ['array', 'null'],
                            items: {
                              type: ['string', 'null'],
                            },
                          },
                        },
                        additionalProperties: false,
                      },
                      namespaceSelector: {
                        description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
                        properties: {
                          matchExpressions: {
                            description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                            type: ['array', 'null'],
                            items: {
                              description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                              required: ['key', 'operator'],
                              properties: {
                                key: {
                                  description: 'key is the label key that the selector applies to.',
                                  type: 'string',
                                  'x-kubernetes-patch-merge-key': 'key',
                                  'x-kubernetes-patch-strategy': 'merge',
                                },
                                operator: {
                                  description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                  type: 'string',
                                },
                                values: {
                                  description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          matchLabels: {
                            description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                            type: 'object',
                            additionalProperties: {
                              type: ['string', 'null'],
                            },
                          },
                        },
                        additionalProperties: false,
                      },
                      podSelector: {
                        description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
                        properties: {
                          matchExpressions: {
                            description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                            type: ['array', 'null'],
                            items: {
                              description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                              required: ['key', 'operator'],
                              properties: {
                                key: {
                                  description: 'key is the label key that the selector applies to.',
                                  type: 'string',
                                  'x-kubernetes-patch-merge-key': 'key',
                                  'x-kubernetes-patch-strategy': 'merge',
                                },
                                operator: {
                                  description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                  type: 'string',
                                },
                                values: {
                                  description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                                  type: ['array', 'null'],
                                  items: {
                                    type: ['string', 'null'],
                                  },
                                },
                              },
                              additionalProperties: false,
                            },
                          },
                          matchLabels: {
                            description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                            type: 'object',
                            additionalProperties: {
                              type: ['string', 'null'],
                            },
                          },
                        },
                        additionalProperties: false,
                      },
                    },
                    additionalProperties: false,
                  },
                },
                ports: {
                  description: 'List of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.',
                  type: ['array', 'null'],
                  items: {
                    description: 'NetworkPolicyPort describes a port to allow traffic on',
                    properties: {
                      port: {
                        oneOf: [
                          {
                            type: ['string', 'null'],
                          },
                          {
                            type: 'integer',
                          },
                        ],
                      },
                      protocol: {
                        description: 'The protocol (TCP or UDP) which traffic must match. If not specified, this field defaults to TCP.',
                        type: ['string', 'null'],
                      },
                    },
                    additionalProperties: false,
                  },
                },
              },
              additionalProperties: false,
            },
          },
          podSelector: {
            description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
            properties: {
              matchExpressions: {
                description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                type: ['array', 'null'],
                items: {
                  description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                  required: ['key', 'operator'],
                  properties: {
                    key: {
                      description: 'key is the label key that the selector applies to.',
                      type: 'string',
                      'x-kubernetes-patch-merge-key': 'key',
                      'x-kubernetes-patch-strategy': 'merge',
                    },
                    operator: {
                      description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                      type: 'string',
                    },
                    values: {
                      description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                      type: ['array', 'null'],
                      items: {
                        type: ['string', 'null'],
                      },
                    },
                  },
                  additionalProperties: false,
                },
              },
              matchLabels: {
                description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                type: 'object',
                additionalProperties: {
                  type: ['string', 'null'],
                },
              },
            },
            additionalProperties: false,
          },
          policyTypes: {
            description:
              'List of rule types that the NetworkPolicy relates to. Valid options are Ingress, Egress, or Ingress,Egress. If this field is not specified, it will default based on the existence of Ingress or Egress rules; policies that contain an Egress section are assumed to affect Egress, and all policies (whether or not they contain an Ingress section) are assumed to affect Ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ "Egress" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include "Egress" (since such a policy would not include an Egress section and would otherwise default to just [ "Ingress" ]). This field is beta-level in 1.8',
            type: ['array', 'null'],
            items: {
              type: ['string', 'null'],
            },
          },
        },
        additionalProperties: false,
      },
    },
    'x-kubernetes-group-version-kind': [
      {
        group: 'networking.k8s.io',
        kind: 'NetworkPolicy',
        version: 'v1',
      },
    ],
    additionalProperties: false,
    $schema: 'http://json-schema.org/schema#',
    type: 'object',
  })
  .setIn([referenceForModel(k8sModels.PersistentVolumeClaimModel), 'default'], {
    description: "PersistentVolumeClaim is a user's request for and claim to a persistent volume",
    properties: {
      apiVersion: {
        description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
        type: ['string', 'null'],
        enum: ['v1'],
      },
      kind: {
        description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
        type: ['string', 'null'],
        enum: ['PersistentVolumeClaim'],
      },
      metadata: {
        description: 'ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.',
        properties: {
          annotations: {
            additionalProperties: {
              type: ['string', 'null'],
            },
            description: 'Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations',
            type: ['object', 'null'],
          },
          clusterName: {
            description: 'The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.',
            type: ['string', 'null'],
          },
          creationTimestamp: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            format: 'date-time',
            type: ['string', 'null'],
          },
          deletionGracePeriodSeconds: {
            description: 'Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.',
            format: 'int64',
            type: ['integer', 'null'],
          },
          deletionTimestamp: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            format: 'date-time',
            type: ['string', 'null'],
          },
          finalizers: {
            description:
              'Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.',
            items: {
              type: ['string', 'null'],
            },
            type: ['array', 'null'],
            'x-kubernetes-patch-strategy': 'merge',
          },
          generateName: {
            description:
              'GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency',
            type: ['string', 'null'],
          },
          generation: {
            description: 'A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.',
            format: 'int64',
            type: ['integer', 'null'],
          },
          labels: {
            additionalProperties: {
              type: ['string', 'null'],
            },
            description: 'Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels',
            type: ['object', 'null'],
          },
          managedFields: {
            description: "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
            items: {
              description: 'ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.',
              properties: {
                apiVersion: {
                  description: 'APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.',
                  type: ['string', 'null'],
                },
                fieldsType: {
                  description: 'FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"',
                  type: ['string', 'null'],
                },
                fieldsV1: {
                  description:
                    "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
                  type: ['object', 'null'],
                },
                manager: {
                  description: 'Manager is an identifier of the workflow managing these fields.',
                  type: ['string', 'null'],
                },
                operation: {
                  description: "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
                  type: ['string', 'null'],
                },
                time: {
                  description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                  format: 'date-time',
                  type: ['string', 'null'],
                },
              },
              type: ['object', 'null'],
            },
            type: ['array', 'null'],
          },
          name: {
            description: 'Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
            type: ['string', 'null'],
          },
          namespace: {
            description: 'Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces',
            type: ['string', 'null'],
          },
          ownerReferences: {
            description: 'List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.',
            items: {
              description: 'OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.',
              properties: {
                apiVersion: {
                  description: 'API version of the referent.',
                  type: 'string',
                },
                blockOwnerDeletion: {
                  description: 'If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.',
                  type: ['boolean', 'null'],
                },
                controller: {
                  description: 'If true, this reference points to the managing controller.',
                  type: ['boolean', 'null'],
                },
                kind: {
                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
                  type: 'string',
                },
                name: {
                  description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
                  type: 'string',
                },
                uid: {
                  description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                  type: 'string',
                },
              },
              required: ['apiVersion', 'kind', 'name', 'uid'],
              type: ['object', 'null'],
            },
            type: ['array', 'null'],
            'x-kubernetes-patch-merge-key': 'uid',
            'x-kubernetes-patch-strategy': 'merge',
          },
          resourceVersion: {
            description:
              'An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency',
            type: ['string', 'null'],
          },
          selfLink: {
            description: 'SelfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.',
            type: ['string', 'null'],
          },
          uid: {
            description: 'UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
            type: ['string', 'null'],
          },
        },
        type: ['object', 'null'],
      },
      spec: {
        description: 'PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes',
        properties: {
          accessModes: {
            description: 'AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1',
            items: {
              type: ['string', 'null'],
              enum: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany'],
            },
            type: ['array', 'null'],
          },
          dataSource: {
            description: 'TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.',
            properties: {
              apiGroup: {
                description: 'APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.',
                type: ['string', 'null'],
              },
              kind: {
                description: 'Kind is the type of resource being referenced',
                type: 'string',
              },
              name: {
                description: 'Name is the name of resource being referenced',
                type: 'string',
              },
            },
            required: ['kind', 'name'],
            type: ['object', 'null'],
          },
          resources: {
            description: 'Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources',
            properties: {
              limits: {
                properties: {
                  storage: {
                    type: ['string', 'null'],
                  },
                  'ephemeral-storage': {
                    type: ['string', 'null'],
                  },
                },
                description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/',
                type: ['object', 'null'],
              },
              requests: {
                properties: {
                  storage: {
                    type: ['string', 'null'],
                  },
                  'ephemeral-storage': {
                    type: ['string', 'null'],
                  },
                },
                description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/',
                type: ['object', 'null'],
              },
            },
            type: ['object', 'null'],
          },
          selector: {
            description: 'A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
            properties: {
              matchExpressions: {
                description: 'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                items: {
                  description: 'A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                  properties: {
                    key: {
                      description: 'key is the label key that the selector applies to.',
                      type: 'string',
                      'x-kubernetes-patch-merge-key': 'key',
                      'x-kubernetes-patch-strategy': 'merge',
                    },
                    operator: {
                      description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                      type: 'string',
                    },
                    values: {
                      description: 'values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                      items: {
                        type: ['string', 'null'],
                      },
                      type: ['array', 'null'],
                    },
                  },
                  required: ['key', 'operator'],
                  type: ['object', 'null'],
                },
                type: ['array', 'null'],
              },
              matchLabels: {
                additionalProperties: {
                  type: ['string', 'null'],
                },
                propertyNames: 'Labels',
                description: 'matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
                type: ['object', 'null'],
              },
            },
            type: ['object', 'null'],
          },
          storageClassName: {
            description: 'Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1',
            type: ['string', 'null'],
          },
          volumeMode: {
            description: 'volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.',
            type: ['string', 'null'],
          },
          volumeName: {
            description: 'VolumeName is the binding reference to the PersistentVolume backing this claim.',
            type: ['string', 'null'],
          },
        },
        type: ['object', 'null'],
      },
      status: {
        description: 'PersistentVolumeClaimStatus is the current status of a persistent volume claim.',
        properties: {
          accessModes: {
            description: 'AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1',
            items: {
              type: ['string', 'null'],
            },
            type: ['array', 'null'],
          },
          capacity: {
            additionalProperties: {
              oneOf: [
                {
                  type: ['string', 'null'],
                },
                {
                  type: ['number', 'null'],
                },
              ],
            },
            description: 'Represents the actual resources of the underlying volume.',
            type: ['object', 'null'],
          },
          conditions: {
            description: "Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.",
            items: {
              description: 'PersistentVolumeClaimCondition contails details about state of pvc',
              properties: {
                lastProbeTime: {
                  description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                  format: 'date-time',
                  type: ['string', 'null'],
                },
                lastTransitionTime: {
                  description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                  format: 'date-time',
                  type: ['string', 'null'],
                },
                message: {
                  description: 'Human-readable message indicating details about last transition.',
                  type: ['string', 'null'],
                },
                reason: {
                  description: 'Unique, this should be a short, machine understandable string that gives the reason for condition\'s last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.',
                  type: ['string', 'null'],
                },
                status: {
                  type: 'string',
                },
                type: {
                  type: 'string',
                },
              },
              required: ['type', 'status'],
              type: ['object', 'null'],
            },
            type: ['array', 'null'],
            'x-kubernetes-patch-merge-key': 'type',
            'x-kubernetes-patch-strategy': 'merge',
          },
          phase: {
            description: 'Phase represents the current phase of PersistentVolumeClaim.',
            type: ['string', 'null'],
          },
        },
        type: ['object', 'null'],
      },
    },
    type: 'object',
    'x-kubernetes-group-version-kind': [
      {
        group: '',
        kind: 'PersistentVolumeClaim',
        version: 'v1',
      },
    ],
    $schema: 'http://json-schema.org/schema#',
  })
  .setIn([referenceForModel(k8sModels.PersistentVolumeModel), 'default'], {
    description: 'PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes',
    properties: {
      apiVersion: {
        description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
        type: ['string', 'null'],
        enum: ['v1'],
      },
      kind: {
        description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
        type: ['string', 'null'],
        enum: ['PersistentVolume'],
      },
      metadata: {
        description: 'ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.',
        properties: {
          annotations: {
            description: 'Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations',
            type: 'object',
            additionalProperties: {
              type: ['string', 'null'],
            },
          },
          clusterName: {
            description: 'The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.',
            type: ['string', 'null'],
          },
          creationTimestamp: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            type: ['string', 'null'],
            format: 'date-time',
          },
          deletionGracePeriodSeconds: {
            description: 'Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.',
            type: 'integer',
            format: 'int64',
          },
          deletionTimestamp: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            type: ['string', 'null'],
            format: 'date-time',
          },
          finalizers: {
            description: 'Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.',
            type: ['array', 'null'],
            items: {
              type: ['string', 'null'],
            },
            'x-kubernetes-patch-strategy': 'merge',
          },
          generateName: {
            description:
              'GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency',
            type: ['string', 'null'],
          },
          generation: {
            description: 'A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.',
            type: 'integer',
            format: 'int64',
          },
          initializers: {
            description: 'Initializers tracks the progress of initialization.',
            required: ['pending'],
            properties: {
              pending: {
                description: 'Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.',
                type: 'array',
                items: {
                  description: 'Initializer is information about an initializer that has not yet completed.',
                  required: ['name'],
                  properties: {
                    name: {
                      description: 'name of the process that is responsible for initializing this object.',
                      type: 'string',
                    },
                  },
                  additionalProperties: false,
                },
                'x-kubernetes-patch-merge-key': 'name',
                'x-kubernetes-patch-strategy': 'merge',
              },
              result: {
                description: "Status is a return value for calls that don't return other objects.",
                properties: {
                  apiVersion: {
                    description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
                    type: ['string', 'null'],
                    enum: ['v1'],
                  },
                  code: {
                    description: 'Suggested HTTP return code for this status, 0 if not set.',
                    type: 'integer',
                    format: 'int32',
                  },
                  details: {
                    description: 'StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.',
                    properties: {
                      causes: {
                        description: 'The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.',
                        type: ['array', 'null'],
                        items: {
                          description: 'StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.',
                          properties: {
                            field: {
                              description: 'The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  "name" - the field "name" on the current resource\n  "items[0].name" - the field "name" on the first array entry in "items"',
                              type: ['string', 'null'],
                            },
                            message: {
                              description: 'A human-readable description of the cause of the error.  This field may be presented as-is to a reader.',
                              type: ['string', 'null'],
                            },
                            reason: {
                              description: 'A machine-readable description of the cause of the error. If this value is empty there is no information available.',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                      },
                      group: {
                        description: 'The group attribute of the resource associated with the status StatusReason.',
                        type: ['string', 'null'],
                      },
                      kind: {
                        description: 'The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                        type: ['string', 'null'],
                      },
                      name: {
                        description: 'The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).',
                        type: ['string', 'null'],
                      },
                      retryAfterSeconds: {
                        description: 'If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.',
                        type: 'integer',
                        format: 'int32',
                      },
                      uid: {
                        description: 'UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                        type: ['string', 'null'],
                      },
                    },
                    additionalProperties: false,
                  },
                  kind: {
                    description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                    type: ['string', 'null'],
                    enum: ['Status'],
                  },
                  message: {
                    description: 'A human-readable description of the status of this operation.',
                    type: ['string', 'null'],
                  },
                  metadata: {
                    description: 'ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.',
                    properties: {
                      continue: {
                        description:
                          'continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response.',
                        type: ['string', 'null'],
                      },
                      resourceVersion: {
                        description: "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
                        type: ['string', 'null'],
                      },
                      selfLink: {
                        description: 'selfLink is a URL representing this object. Populated by the system. Read-only.',
                        type: ['string', 'null'],
                      },
                    },
                    additionalProperties: false,
                  },
                  reason: {
                    description: 'A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.',
                    type: ['string', 'null'],
                  },
                  status: {
                    description: 'Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status',
                    type: ['string', 'null'],
                  },
                },
                'x-kubernetes-group-version-kind': [
                  {
                    group: '',
                    kind: 'Status',
                    version: 'v1',
                  },
                ],
                additionalProperties: false,
              },
            },
            additionalProperties: false,
          },
          labels: {
            description: 'Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels',
            type: 'object',
            additionalProperties: {
              type: ['string', 'null'],
            },
          },
          name: {
            description: 'Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
            type: ['string', 'null'],
          },
          namespace: {
            description: 'Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces',
            type: ['string', 'null'],
          },
          ownerReferences: {
            description: 'List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.',
            type: ['array', 'null'],
            items: {
              description: 'OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.',
              required: ['apiVersion', 'kind', 'name', 'uid'],
              properties: {
                apiVersion: {
                  description: 'API version of the referent.',
                  type: 'string',
                },
                blockOwnerDeletion: {
                  description: 'If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.',
                  type: 'boolean',
                },
                controller: {
                  description: 'If true, this reference points to the managing controller.',
                  type: 'boolean',
                },
                kind: {
                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                  type: 'string',
                },
                name: {
                  description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
                  type: 'string',
                },
                uid: {
                  description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                  type: 'string',
                },
              },
              additionalProperties: false,
            },
            'x-kubernetes-patch-merge-key': 'uid',
            'x-kubernetes-patch-strategy': 'merge',
          },
          resourceVersion: {
            description:
              'An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency',
            type: ['string', 'null'],
          },
          selfLink: {
            description: 'SelfLink is a URL representing this object. Populated by the system. Read-only.',
            type: ['string', 'null'],
          },
          uid: {
            description: 'UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
            type: ['string', 'null'],
          },
        },
        additionalProperties: false,
      },
      spec: {
        description: 'PersistentVolumeSpec is the specification of a persistent volume.',
        properties: {
          accessModes: {
            description: 'AccessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes',
            type: ['array', 'null'],
            items: {
              type: ['string', 'null'],
            },
          },
          awsElasticBlockStore: {
            description: 'Represents a Persistent Disk resource in AWS.\n\nAn AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.',
            required: ['volumeID'],
            properties: {
              fsType: {
                description: 'Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore',
                type: ['string', 'null'],
              },
              partition: {
                description: 'The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).',
                type: 'integer',
                format: 'int32',
              },
              readOnly: {
                description: 'Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore',
                type: 'boolean',
              },
              volumeID: {
                description: 'Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore',
                type: 'string',
              },
            },
            additionalProperties: false,
          },
          azureDisk: {
            description: 'AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.',
            required: ['diskName', 'diskURI'],
            properties: {
              cachingMode: {
                description: 'Host Caching mode: None, Read Only, Read Write.',
                type: ['string', 'null'],
              },
              diskName: {
                description: 'The Name of the data disk in the blob storage',
                type: 'string',
              },
              diskURI: {
                description: 'The URI the data disk in the blob storage',
                type: 'string',
              },
              fsType: {
                description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                type: ['string', 'null'],
              },
              kind: {
                description: 'Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared',
                type: ['string', 'null'],
              },
              readOnly: {
                description: 'Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                type: 'boolean',
              },
            },
            additionalProperties: false,
          },
          azureFile: {
            description: 'AzureFile represents an Azure File Service mount on the host and bind mount to the pod.',
            required: ['secretName', 'shareName'],
            properties: {
              readOnly: {
                description: 'Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                type: 'boolean',
              },
              secretName: {
                description: 'the name of secret that contains Azure Storage Account Name and Key',
                type: 'string',
              },
              secretNamespace: {
                description: 'the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod',
                type: ['string', 'null'],
              },
              shareName: {
                description: 'Share Name',
                type: 'string',
              },
            },
            additionalProperties: false,
          },
          capacity: {
            description: "A description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity",
            type: 'object',
            additionalProperties: {
              oneOf: [
                {
                  type: ['string', 'null'],
                },
                {
                  type: 'integer',
                },
              ],
            },
          },
          cephfs: {
            description: 'Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.',
            required: ['monitors'],
            properties: {
              monitors: {
                description: 'Required: Monitors is a collection of Ceph monitors More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it',
                type: 'array',
                items: {
                  type: ['string', 'null'],
                },
              },
              path: {
                description: 'Optional: Used as the mounted root, rather than the full Ceph tree, default is /',
                type: ['string', 'null'],
              },
              readOnly: {
                description: 'Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it',
                type: 'boolean',
              },
              secretFile: {
                description: 'Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it',
                type: ['string', 'null'],
              },
              secretRef: {
                description: 'SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace',
                properties: {
                  name: {
                    description: 'Name is unique within a namespace to reference a secret resource.',
                    type: ['string', 'null'],
                  },
                  namespace: {
                    description: 'Namespace defines the space within which the secret name must be unique.',
                    type: ['string', 'null'],
                  },
                },
                additionalProperties: false,
              },
              user: {
                description: 'Optional: User is the rados user name, default is admin More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it',
                type: ['string', 'null'],
              },
            },
            additionalProperties: false,
          },
          cinder: {
            description: 'Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.',
            required: ['volumeID'],
            properties: {
              fsType: {
                description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md',
                type: ['string', 'null'],
              },
              readOnly: {
                description: 'Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md',
                type: 'boolean',
              },
              secretRef: {
                description: 'SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace',
                properties: {
                  name: {
                    description: 'Name is unique within a namespace to reference a secret resource.',
                    type: ['string', 'null'],
                  },
                  namespace: {
                    description: 'Namespace defines the space within which the secret name must be unique.',
                    type: ['string', 'null'],
                  },
                },
                additionalProperties: false,
              },
              volumeID: {
                description: 'volume id used to identify the volume in cinder More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md',
                type: 'string',
              },
            },
            additionalProperties: false,
          },
          claimRef: {
            description: 'ObjectReference contains enough information to let you inspect or modify the referred object.',
            properties: {
              apiVersion: {
                description: 'API version of the referent.',
                type: ['string', 'null'],
              },
              fieldPath: {
                description:
                  'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.',
                type: ['string', 'null'],
              },
              kind: {
                description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                type: ['string', 'null'],
              },
              name: {
                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                type: ['string', 'null'],
              },
              namespace: {
                description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
                type: ['string', 'null'],
              },
              resourceVersion: {
                description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency',
                type: ['string', 'null'],
              },
              uid: {
                description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids',
                type: ['string', 'null'],
              },
            },
            additionalProperties: false,
          },
          csi: {
            description: 'Represents storage that is managed by an external CSI volume driver (Beta feature)',
            required: ['driver', 'volumeHandle'],
            properties: {
              controllerPublishSecretRef: {
                description: 'SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace',
                properties: {
                  name: {
                    description: 'Name is unique within a namespace to reference a secret resource.',
                    type: ['string', 'null'],
                  },
                  namespace: {
                    description: 'Namespace defines the space within which the secret name must be unique.',
                    type: ['string', 'null'],
                  },
                },
                additionalProperties: false,
              },
              driver: {
                description: 'Driver is the name of the driver to use for this volume. Required.',
                type: 'string',
              },
              fsType: {
                description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs".',
                type: ['string', 'null'],
              },
              nodePublishSecretRef: {
                description: 'SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace',
                properties: {
                  name: {
                    description: 'Name is unique within a namespace to reference a secret resource.',
                    type: ['string', 'null'],
                  },
                  namespace: {
                    description: 'Namespace defines the space within which the secret name must be unique.',
                    type: ['string', 'null'],
                  },
                },
                additionalProperties: false,
              },
              nodeStageSecretRef: {
                description: 'SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace',
                properties: {
                  name: {
                    description: 'Name is unique within a namespace to reference a secret resource.',
                    type: ['string', 'null'],
                  },
                  namespace: {
                    description: 'Namespace defines the space within which the secret name must be unique.',
                    type: ['string', 'null'],
                  },
                },
                additionalProperties: false,
              },
              readOnly: {
                description: 'Optional: The value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).',
                type: 'boolean',
              },
              volumeAttributes: {
                description: 'Attributes of the volume to publish.',
                type: 'object',
                additionalProperties: {
                  type: ['string', 'null'],
                },
              },
              volumeHandle: {
                description: 'VolumeHandle is the unique volume name returned by the CSI volume plugin\u2019s CreateVolume to refer to the volume on all subsequent calls. Required.',
                type: 'string',
              },
            },
            additionalProperties: false,
          },
          fc: {
            description: 'Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.',
            properties: {
              fsType: {
                description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                type: ['string', 'null'],
              },
              lun: {
                description: 'Optional: FC target lun number',
                type: 'integer',
                format: 'int32',
              },
              readOnly: {
                description: 'Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                type: 'boolean',
              },
              targetWWNs: {
                description: 'Optional: FC target worldwide names (WWNs)',
                type: ['array', 'null'],
                items: {
                  type: ['string', 'null'],
                },
              },
              wwids: {
                description: 'Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.',
                type: ['array', 'null'],
                items: {
                  type: ['string', 'null'],
                },
              },
            },
            additionalProperties: false,
          },
          flexVolume: {
            description: 'FlexPersistentVolumeSource represents a generic persistent volume resource that is provisioned/attached using an exec based plugin.',
            required: ['driver'],
            properties: {
              driver: {
                description: 'Driver is the name of the driver to use for this volume.',
                type: 'string',
              },
              fsType: {
                description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.',
                type: ['string', 'null'],
              },
              options: {
                description: 'Optional: Extra command options if any.',
                type: 'object',
                additionalProperties: {
                  type: ['string', 'null'],
                },
              },
              readOnly: {
                description: 'Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                type: 'boolean',
              },
              secretRef: {
                description: 'SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace',
                properties: {
                  name: {
                    description: 'Name is unique within a namespace to reference a secret resource.',
                    type: ['string', 'null'],
                  },
                  namespace: {
                    description: 'Namespace defines the space within which the secret name must be unique.',
                    type: ['string', 'null'],
                  },
                },
                additionalProperties: false,
              },
            },
            additionalProperties: false,
          },
          flocker: {
            description: 'Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.',
            properties: {
              datasetName: {
                description: 'Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated',
                type: ['string', 'null'],
              },
              datasetUUID: {
                description: 'UUID of the dataset. This is unique identifier of a Flocker dataset',
                type: ['string', 'null'],
              },
            },
            additionalProperties: false,
          },
          gcePersistentDisk: {
            description: 'Represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.',
            required: ['pdName'],
            properties: {
              fsType: {
                description: 'Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
                type: ['string', 'null'],
              },
              partition: {
                description: 'The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
                type: 'integer',
                format: 'int32',
              },
              pdName: {
                description: 'Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
                type: 'string',
              },
              readOnly: {
                description: 'ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
                type: 'boolean',
              },
            },
            additionalProperties: false,
          },
          glusterfs: {
            description: 'Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.',
            required: ['endpoints', 'path'],
            properties: {
              endpoints: {
                description: 'EndpointsName is the endpoint name that details Glusterfs topology. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod',
                type: 'string',
              },
              path: {
                description: 'Path is the Glusterfs volume path. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod',
                type: 'string',
              },
              readOnly: {
                description: 'ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod',
                type: 'boolean',
              },
            },
            additionalProperties: false,
          },
          hostPath: {
            description: 'Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.',
            required: ['path'],
            properties: {
              path: {
                description: 'Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath',
                type: 'string',
              },
              type: {
                description: 'Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath',
                type: ['string', 'null'],
              },
            },
            additionalProperties: false,
          },
          iscsi: {
            description: 'ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.',
            required: ['targetPortal', 'iqn', 'lun'],
            properties: {
              chapAuthDiscovery: {
                description: 'whether support iSCSI Discovery CHAP authentication',
                type: 'boolean',
              },
              chapAuthSession: {
                description: 'whether support iSCSI Session CHAP authentication',
                type: 'boolean',
              },
              fsType: {
                description: 'Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi',
                type: ['string', 'null'],
              },
              initiatorName: {
                description: 'Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.',
                type: ['string', 'null'],
              },
              iqn: {
                description: 'Target iSCSI Qualified Name.',
                type: 'string',
              },
              iscsiInterface: {
                description: "iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
                type: ['string', 'null'],
              },
              lun: {
                description: 'iSCSI Target Lun number.',
                type: 'integer',
                format: 'int32',
              },
              portals: {
                description: 'iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).',
                type: ['array', 'null'],
                items: {
                  type: ['string', 'null'],
                },
              },
              readOnly: {
                description: 'ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.',
                type: 'boolean',
              },
              secretRef: {
                description: 'SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace',
                properties: {
                  name: {
                    description: 'Name is unique within a namespace to reference a secret resource.',
                    type: ['string', 'null'],
                  },
                  namespace: {
                    description: 'Namespace defines the space within which the secret name must be unique.',
                    type: ['string', 'null'],
                  },
                },
                additionalProperties: false,
              },
              targetPortal: {
                description: 'iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).',
                type: 'string',
              },
            },
            additionalProperties: false,
          },
          local: {
            description: 'Local represents directly-attached storage with node affinity (Beta feature)',
            required: ['path'],
            properties: {
              path: {
                description: 'The full path to the volume on the node. It can be either a directory or block device (disk, partition, ...). Directories can be represented only by PersistentVolume with VolumeMode=Filesystem. Block devices can be represented only by VolumeMode=Block, which also requires the BlockVolume alpha feature gate to be enabled.',
                type: 'string',
              },
            },
            additionalProperties: false,
          },
          mountOptions: {
            description: 'A list of mount options, e.g. ["ro", "soft"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options',
            type: ['array', 'null'],
            items: {
              type: ['string', 'null'],
            },
          },
          nfs: {
            description: 'Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.',
            required: ['server', 'path'],
            properties: {
              path: {
                description: 'Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs',
                type: 'string',
              },
              readOnly: {
                description: 'ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs',
                type: 'boolean',
              },
              server: {
                description: 'Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs',
                type: 'string',
              },
            },
            additionalProperties: false,
          },
          nodeAffinity: {
            description: 'VolumeNodeAffinity defines constraints that limit what nodes this volume can be accessed from.',
            properties: {
              required: {
                description: 'A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.',
                required: ['nodeSelectorTerms'],
                properties: {
                  nodeSelectorTerms: {
                    description: 'Required. A list of node selector terms. The terms are ORed.',
                    type: 'array',
                    items: {
                      description: 'A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.',
                      properties: {
                        matchExpressions: {
                          description: "A list of node selector requirements by node's labels.",
                          type: ['array', 'null'],
                          items: {
                            description: 'A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                            required: ['key', 'operator'],
                            properties: {
                              key: {
                                description: 'The label key that the selector applies to.',
                                type: 'string',
                              },
                              operator: {
                                description: "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                type: 'string',
                              },
                              values: {
                                description: 'An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
                                type: ['array', 'null'],
                                items: {
                                  type: ['string', 'null'],
                                },
                              },
                            },
                            additionalProperties: false,
                          },
                        },
                        matchFields: {
                          description: "A list of node selector requirements by node's fields.",
                          type: ['array', 'null'],
                          items: {
                            description: 'A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.',
                            required: ['key', 'operator'],
                            properties: {
                              key: {
                                description: 'The label key that the selector applies to.',
                                type: 'string',
                              },
                              operator: {
                                description: "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                type: 'string',
                              },
                              values: {
                                description: 'An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
                                type: ['array', 'null'],
                                items: {
                                  type: ['string', 'null'],
                                },
                              },
                            },
                            additionalProperties: false,
                          },
                        },
                      },
                      additionalProperties: false,
                    },
                  },
                },
                additionalProperties: false,
              },
            },
            additionalProperties: false,
          },
          persistentVolumeReclaimPolicy: {
            description: 'What happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming',
            type: ['string', 'null'],
          },
          photonPersistentDisk: {
            description: 'Represents a Photon Controller persistent disk resource.',
            required: ['pdID'],
            properties: {
              fsType: {
                description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                type: ['string', 'null'],
              },
              pdID: {
                description: 'ID that identifies Photon Controller persistent disk',
                type: 'string',
              },
            },
            additionalProperties: false,
          },
          portworxVolume: {
            description: 'PortworxVolumeSource represents a Portworx volume resource.',
            required: ['volumeID'],
            properties: {
              fsType: {
                description: 'FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.',
                type: ['string', 'null'],
              },
              readOnly: {
                description: 'Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                type: 'boolean',
              },
              volumeID: {
                description: 'VolumeID uniquely identifies a Portworx volume',
                type: 'string',
              },
            },
            additionalProperties: false,
          },
          quobyte: {
            description: 'Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.',
            required: ['registry', 'volume'],
            properties: {
              group: {
                description: 'Group to map volume access to Default is no group',
                type: ['string', 'null'],
              },
              readOnly: {
                description: 'ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.',
                type: 'boolean',
              },
              registry: {
                description: 'Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes',
                type: 'string',
              },
              user: {
                description: 'User to map volume access to Defaults to serivceaccount user',
                type: ['string', 'null'],
              },
              volume: {
                description: 'Volume is a string that references an already created Quobyte volume by name.',
                type: 'string',
              },
            },
            additionalProperties: false,
          },
          rbd: {
            description: 'Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.',
            required: ['monitors', 'image'],
            properties: {
              fsType: {
                description: 'Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd',
                type: ['string', 'null'],
              },
              image: {
                description: 'The rados image name. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                type: 'string',
              },
              keyring: {
                description: 'Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                type: ['string', 'null'],
              },
              monitors: {
                description: 'A collection of Ceph monitors. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                type: 'array',
                items: {
                  type: ['string', 'null'],
                },
              },
              pool: {
                description: 'The rados pool name. Default is rbd. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                type: ['string', 'null'],
              },
              readOnly: {
                description: 'ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                type: 'boolean',
              },
              secretRef: {
                description: 'SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace',
                properties: {
                  name: {
                    description: 'Name is unique within a namespace to reference a secret resource.',
                    type: ['string', 'null'],
                  },
                  namespace: {
                    description: 'Namespace defines the space within which the secret name must be unique.',
                    type: ['string', 'null'],
                  },
                },
                additionalProperties: false,
              },
              user: {
                description: 'The rados user name. Default is admin. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it',
                type: ['string', 'null'],
              },
            },
            additionalProperties: false,
          },
          scaleIO: {
            description: 'ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume',
            required: ['gateway', 'system', 'secretRef'],
            properties: {
              fsType: {
                description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                type: ['string', 'null'],
              },
              gateway: {
                description: 'The host address of the ScaleIO API Gateway.',
                type: 'string',
              },
              protectionDomain: {
                description: 'The name of the ScaleIO Protection Domain for the configured storage.',
                type: ['string', 'null'],
              },
              readOnly: {
                description: 'Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                type: 'boolean',
              },
              secretRef: {
                description: 'SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace',
                properties: {
                  name: {
                    description: 'Name is unique within a namespace to reference a secret resource.',
                    type: ['string', 'null'],
                  },
                  namespace: {
                    description: 'Namespace defines the space within which the secret name must be unique.',
                    type: ['string', 'null'],
                  },
                },
                additionalProperties: false,
              },
              sslEnabled: {
                description: 'Flag to enable/disable SSL communication with Gateway, default false',
                type: 'boolean',
              },
              storageMode: {
                description: 'Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.',
                type: ['string', 'null'],
              },
              storagePool: {
                description: 'The ScaleIO Storage Pool associated with the protection domain.',
                type: ['string', 'null'],
              },
              system: {
                description: 'The name of the storage system as configured in ScaleIO.',
                type: 'string',
              },
              volumeName: {
                description: 'The name of a volume already created in the ScaleIO system that is associated with this volume source.',
                type: ['string', 'null'],
              },
            },
            additionalProperties: false,
          },
          storageClassName: {
            description: 'Name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.',
            type: ['string', 'null'],
          },
          storageos: {
            description: 'Represents a StorageOS persistent volume resource.',
            properties: {
              fsType: {
                description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                type: ['string', 'null'],
              },
              readOnly: {
                description: 'Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
                type: 'boolean',
              },
              secretRef: {
                description: 'ObjectReference contains enough information to let you inspect or modify the referred object.',
                properties: {
                  apiVersion: {
                    description: 'API version of the referent.',
                    type: ['string', 'null'],
                  },
                  fieldPath: {
                    description:
                      'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.',
                    type: ['string', 'null'],
                  },
                  kind: {
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                    type: ['string', 'null'],
                  },
                  name: {
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
                    type: ['string', 'null'],
                  },
                  namespace: {
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
                    type: ['string', 'null'],
                  },
                  resourceVersion: {
                    description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency',
                    type: ['string', 'null'],
                  },
                  uid: {
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids',
                    type: ['string', 'null'],
                  },
                },
                additionalProperties: false,
              },
              volumeName: {
                description: 'VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.',
                type: ['string', 'null'],
              },
              volumeNamespace: {
                description: 'VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod\'s namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.',
                type: ['string', 'null'],
              },
            },
            additionalProperties: false,
          },
          volumeMode: {
            description: 'volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec. This is an alpha feature and may change in the future.',
            type: ['string', 'null'],
          },
          vsphereVolume: {
            description: 'Represents a vSphere volume resource.',
            required: ['volumePath'],
            properties: {
              fsType: {
                description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
                type: ['string', 'null'],
              },
              storagePolicyID: {
                description: 'Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.',
                type: ['string', 'null'],
              },
              storagePolicyName: {
                description: 'Storage Policy Based Management (SPBM) profile name.',
                type: ['string', 'null'],
              },
              volumePath: {
                description: 'Path that identifies vSphere volume vmdk',
                type: 'string',
              },
            },
            additionalProperties: false,
          },
        },
        additionalProperties: false,
      },
      status: {
        description: 'PersistentVolumeStatus is the current status of a persistent volume.',
        properties: {
          message: {
            description: 'A human-readable message indicating details about why the volume is in this state.',
            type: ['string', 'null'],
          },
          phase: {
            description: 'Phase indicates if a volume is available, bound to a claim, or released by a claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase',
            type: ['string', 'null'],
          },
          reason: {
            description: 'Reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.',
            type: ['string', 'null'],
          },
        },
        additionalProperties: false,
      },
    },
    'x-kubernetes-group-version-kind': [
      {
        group: '',
        kind: 'PersistentVolume',
        version: 'v1',
      },
    ],
    additionalProperties: false,
    $schema: 'http://json-schema.org/schema#',
    type: 'object',
  })
  .setIn([referenceForModel(k8sModels.NamespaceModel), 'default'], {
    description: 'Namespace provides a scope for Names. Use of multiple namespaces is optional.',
    properties: {
      apiVersion: {
        description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
        type: ['string', 'null'],
        enum: ['v1'],
      },
      kind: {
        description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
        type: ['string', 'null'],
        enum: ['Namespace'],
      },
      metadata: {
        description: 'ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.',
        properties: {
          annotations: {
            description: 'Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations',
            type: 'object',
            additionalProperties: {
              type: ['string', 'null'],
            },
          },
          clusterName: {
            description: 'The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.',
            type: ['string', 'null'],
          },
          creationTimestamp: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            type: ['string', 'null'],
            format: 'date-time',
          },
          deletionGracePeriodSeconds: {
            description: 'Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.',
            type: 'integer',
            format: 'int64',
          },
          deletionTimestamp: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            type: ['string', 'null'],
            format: 'date-time',
          },
          finalizers: {
            description: 'Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.',
            type: ['array', 'null'],
            items: {
              type: ['string', 'null'],
            },
            'x-kubernetes-patch-strategy': 'merge',
          },
          generateName: {
            description:
              'GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency',
            type: ['string', 'null'],
          },
          generation: {
            description: 'A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.',
            type: 'integer',
            format: 'int64',
          },
          initializers: {
            description: 'Initializers tracks the progress of initialization.',
            required: ['pending'],
            properties: {
              pending: {
                description: 'Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.',
                type: 'array',
                items: {
                  description: 'Initializer is information about an initializer that has not yet completed.',
                  required: ['name'],
                  properties: {
                    name: {
                      description: 'name of the process that is responsible for initializing this object.',
                      type: 'string',
                    },
                  },
                  additionalProperties: false,
                },
                'x-kubernetes-patch-merge-key': 'name',
                'x-kubernetes-patch-strategy': 'merge',
              },
              result: {
                description: "Status is a return value for calls that don't return other objects.",
                properties: {
                  apiVersion: {
                    description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
                    type: ['string', 'null'],
                    enum: ['v1'],
                  },
                  code: {
                    description: 'Suggested HTTP return code for this status, 0 if not set.',
                    type: 'integer',
                    format: 'int32',
                  },
                  details: {
                    description: 'StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.',
                    properties: {
                      causes: {
                        description: 'The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.',
                        type: ['array', 'null'],
                        items: {
                          description: 'StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.',
                          properties: {
                            field: {
                              description: 'The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  "name" - the field "name" on the current resource\n  "items[0].name" - the field "name" on the first array entry in "items"',
                              type: ['string', 'null'],
                            },
                            message: {
                              description: 'A human-readable description of the cause of the error.  This field may be presented as-is to a reader.',
                              type: ['string', 'null'],
                            },
                            reason: {
                              description: 'A machine-readable description of the cause of the error. If this value is empty there is no information available.',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                      },
                      group: {
                        description: 'The group attribute of the resource associated with the status StatusReason.',
                        type: ['string', 'null'],
                      },
                      kind: {
                        description: 'The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                        type: ['string', 'null'],
                      },
                      name: {
                        description: 'The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).',
                        type: ['string', 'null'],
                      },
                      retryAfterSeconds: {
                        description: 'If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.',
                        type: 'integer',
                        format: 'int32',
                      },
                      uid: {
                        description: 'UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                        type: ['string', 'null'],
                      },
                    },
                    additionalProperties: false,
                  },
                  kind: {
                    description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                    type: ['string', 'null'],
                    enum: ['Status'],
                  },
                  message: {
                    description: 'A human-readable description of the status of this operation.',
                    type: ['string', 'null'],
                  },
                  metadata: {
                    description: 'ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.',
                    properties: {
                      continue: {
                        description:
                          'continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response.',
                        type: ['string', 'null'],
                      },
                      resourceVersion: {
                        description: "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
                        type: ['string', 'null'],
                      },
                      selfLink: {
                        description: 'selfLink is a URL representing this object. Populated by the system. Read-only.',
                        type: ['string', 'null'],
                      },
                    },
                    additionalProperties: false,
                  },
                  reason: {
                    description: 'A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.',
                    type: ['string', 'null'],
                  },
                  status: {
                    description: 'Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status',
                    type: ['string', 'null'],
                  },
                },
                'x-kubernetes-group-version-kind': [
                  {
                    group: '',
                    kind: 'Status',
                    version: 'v1',
                  },
                ],
                additionalProperties: false,
              },
            },
            additionalProperties: false,
          },
          labels: {
            description: 'Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels',
            type: 'object',
            additionalProperties: {
              type: ['string', 'null'],
            },
          },
          name: {
            description: 'Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
            type: ['string', 'null'],
          },
          namespace: {
            description: 'Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces',
            type: ['string', 'null'],
          },
          ownerReferences: {
            description: 'List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.',
            type: ['array', 'null'],
            items: {
              description: 'OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.',
              required: ['apiVersion', 'kind', 'name', 'uid'],
              properties: {
                apiVersion: {
                  description: 'API version of the referent.',
                  type: 'string',
                },
                blockOwnerDeletion: {
                  description: 'If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.',
                  type: 'boolean',
                },
                controller: {
                  description: 'If true, this reference points to the managing controller.',
                  type: 'boolean',
                },
                kind: {
                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                  type: 'string',
                },
                name: {
                  description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
                  type: 'string',
                },
                uid: {
                  description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                  type: 'string',
                },
              },
              additionalProperties: false,
            },
            'x-kubernetes-patch-merge-key': 'uid',
            'x-kubernetes-patch-strategy': 'merge',
          },
          resourceVersion: {
            description:
              'An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency',
            type: ['string', 'null'],
          },
          selfLink: {
            description: 'SelfLink is a URL representing this object. Populated by the system. Read-only.',
            type: ['string', 'null'],
          },
          uid: {
            description: 'UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
            type: ['string', 'null'],
          },
        },
        additionalProperties: false,
      },
      spec: {
        description: 'NamespaceSpec describes the attributes on a Namespace.',
        properties: {
          finalizers: {
            description: 'Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/',
            type: ['array', 'null'],
            items: {
              type: ['string', 'null'],
            },
          },
        },
        additionalProperties: false,
      },
      status: {
        description: 'NamespaceStatus is information about the current status of a Namespace.',
        properties: {
          phase: {
            description: 'Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/',
            type: ['string', 'null'],
          },
        },
        additionalProperties: false,
      },
    },
    'x-kubernetes-group-version-kind': [
      {
        group: '',
        kind: 'Namespace',
        version: 'v1',
      },
    ],
    additionalProperties: false,
    $schema: 'http://json-schema.org/schema#',
    type: 'object',
  })
  .setIn([referenceForModel(k8sModels.LimitRangeModel), 'default'], {
    description: 'LimitRange sets resource usage limits for each kind of resource in a Namespace.',
    properties: {
      apiVersion: {
        description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
        type: ['string', 'null'],
        enum: ['v1'],
      },
      kind: {
        description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
        type: ['string', 'null'],
        enum: ['LimitRange'],
      },
      metadata: {
        description: 'ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.',
        properties: {
          annotations: {
            description: 'Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations',
            type: 'object',
            additionalProperties: {
              type: ['string', 'null'],
            },
          },
          clusterName: {
            description: 'The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.',
            type: ['string', 'null'],
          },
          creationTimestamp: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            type: ['string', 'null'],
            format: 'date-time',
          },
          deletionGracePeriodSeconds: {
            description: 'Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.',
            type: 'integer',
            format: 'int64',
          },
          deletionTimestamp: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            type: ['string', 'null'],
            format: 'date-time',
          },
          finalizers: {
            description: 'Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.',
            type: ['array', 'null'],
            items: {
              type: ['string', 'null'],
            },
            'x-kubernetes-patch-strategy': 'merge',
          },
          generateName: {
            description:
              'GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency',
            type: ['string', 'null'],
          },
          generation: {
            description: 'A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.',
            type: 'integer',
            format: 'int64',
          },
          initializers: {
            description: 'Initializers tracks the progress of initialization.',
            required: ['pending'],
            properties: {
              pending: {
                description: 'Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.',
                type: 'array',
                items: {
                  description: 'Initializer is information about an initializer that has not yet completed.',
                  required: ['name'],
                  properties: {
                    name: {
                      description: 'name of the process that is responsible for initializing this object.',
                      type: 'string',
                    },
                  },
                  additionalProperties: false,
                },
                'x-kubernetes-patch-merge-key': 'name',
                'x-kubernetes-patch-strategy': 'merge',
              },
              result: {
                description: "Status is a return value for calls that don't return other objects.",
                properties: {
                  apiVersion: {
                    description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
                    type: ['string', 'null'],
                    enum: ['v1'],
                  },
                  code: {
                    description: 'Suggested HTTP return code for this status, 0 if not set.',
                    type: 'integer',
                    format: 'int32',
                  },
                  details: {
                    description: 'StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.',
                    properties: {
                      causes: {
                        description: 'The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.',
                        type: ['array', 'null'],
                        items: {
                          description: 'StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.',
                          properties: {
                            field: {
                              description: 'The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  "name" - the field "name" on the current resource\n  "items[0].name" - the field "name" on the first array entry in "items"',
                              type: ['string', 'null'],
                            },
                            message: {
                              description: 'A human-readable description of the cause of the error.  This field may be presented as-is to a reader.',
                              type: ['string', 'null'],
                            },
                            reason: {
                              description: 'A machine-readable description of the cause of the error. If this value is empty there is no information available.',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                      },
                      group: {
                        description: 'The group attribute of the resource associated with the status StatusReason.',
                        type: ['string', 'null'],
                      },
                      kind: {
                        description: 'The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                        type: ['string', 'null'],
                      },
                      name: {
                        description: 'The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).',
                        type: ['string', 'null'],
                      },
                      retryAfterSeconds: {
                        description: 'If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.',
                        type: 'integer',
                        format: 'int32',
                      },
                      uid: {
                        description: 'UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                        type: ['string', 'null'],
                      },
                    },
                    additionalProperties: false,
                  },
                  kind: {
                    description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                    type: ['string', 'null'],
                    enum: ['Status'],
                  },
                  message: {
                    description: 'A human-readable description of the status of this operation.',
                    type: ['string', 'null'],
                  },
                  metadata: {
                    description: 'ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.',
                    properties: {
                      continue: {
                        description:
                          'continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response.',
                        type: ['string', 'null'],
                      },
                      resourceVersion: {
                        description: "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
                        type: ['string', 'null'],
                      },
                      selfLink: {
                        description: 'selfLink is a URL representing this object. Populated by the system. Read-only.',
                        type: ['string', 'null'],
                      },
                    },
                    additionalProperties: false,
                  },
                  reason: {
                    description: 'A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.',
                    type: ['string', 'null'],
                  },
                  status: {
                    description: 'Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status',
                    type: ['string', 'null'],
                  },
                },
                'x-kubernetes-group-version-kind': [
                  {
                    group: '',
                    kind: 'Status',
                    version: 'v1',
                  },
                ],
                additionalProperties: false,
              },
            },
            additionalProperties: false,
          },
          labels: {
            description: 'Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels',
            type: 'object',
            additionalProperties: {
              type: ['string', 'null'],
            },
          },
          name: {
            description: 'Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
            type: ['string', 'null'],
          },
          namespace: {
            description: 'Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces',
            type: ['string', 'null'],
          },
          ownerReferences: {
            description: 'List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.',
            type: ['array', 'null'],
            items: {
              description: 'OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.',
              required: ['apiVersion', 'kind', 'name', 'uid'],
              properties: {
                apiVersion: {
                  description: 'API version of the referent.',
                  type: 'string',
                },
                blockOwnerDeletion: {
                  description: 'If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.',
                  type: 'boolean',
                },
                controller: {
                  description: 'If true, this reference points to the managing controller.',
                  type: 'boolean',
                },
                kind: {
                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                  type: 'string',
                },
                name: {
                  description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
                  type: 'string',
                },
                uid: {
                  description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                  type: 'string',
                },
              },
              additionalProperties: false,
            },
            'x-kubernetes-patch-merge-key': 'uid',
            'x-kubernetes-patch-strategy': 'merge',
          },
          resourceVersion: {
            description:
              'An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency',
            type: ['string', 'null'],
          },
          selfLink: {
            description: 'SelfLink is a URL representing this object. Populated by the system. Read-only.',
            type: ['string', 'null'],
          },
          uid: {
            description: 'UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
            type: ['string', 'null'],
          },
        },
        additionalProperties: false,
      },
      spec: {
        description: 'LimitRangeSpec defines a min/max usage limit for resources that match on kind.',
        required: ['limits'],
        properties: {
          limits: {
            description: 'Limits is the list of LimitRangeItem objects that are enforced.',
            type: 'array',
            items: {
              description: 'LimitRangeItem defines a min/max usage limit for any resource that matches on kind.',
              properties: {
                default: {
                  description: 'Default resource requirement limit value by resource name if resource limit is omitted.',
                  type: 'object',
                  additionalProperties: {
                    oneOf: [
                      {
                        type: ['string', 'null'],
                      },
                      {
                        type: 'integer',
                      },
                    ],
                  },
                },
                defaultRequest: {
                  description: 'DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.',
                  type: 'object',
                  additionalProperties: {
                    oneOf: [
                      {
                        type: ['string', 'null'],
                      },
                      {
                        type: 'integer',
                      },
                    ],
                  },
                },
                max: {
                  description: 'Max usage constraints on this kind by resource name.',
                  type: 'object',
                  additionalProperties: {
                    oneOf: [
                      {
                        type: ['string', 'null'],
                      },
                      {
                        type: 'integer',
                      },
                    ],
                  },
                },
                maxLimitRequestRatio: {
                  description: 'MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.',
                  type: 'object',
                  additionalProperties: {
                    oneOf: [
                      {
                        type: ['string', 'null'],
                      },
                      {
                        type: 'integer',
                      },
                    ],
                  },
                },
                min: {
                  description: 'Min usage constraints on this kind by resource name.',
                  type: 'object',
                  additionalProperties: {
                    oneOf: [
                      {
                        type: ['string', 'null'],
                      },
                      {
                        type: 'integer',
                      },
                    ],
                  },
                },
                type: {
                  description: 'Type of resource that this limit applies to.',
                  type: ['string', 'null'],
                },
              },
              additionalProperties: false,
            },
          },
        },
        additionalProperties: false,
      },
    },
    'x-kubernetes-group-version-kind': [
      {
        group: '',
        kind: 'LimitRange',
        version: 'v1',
      },
    ],
    additionalProperties: false,
    $schema: 'http://json-schema.org/schema#',
    type: 'object',
  })
  .setIn([referenceForModel(k8sModels.ResourceQuotaModel), 'default'], {
    description: 'ResourceQuota sets aggregate quota restrictions enforced per namespace',
    properties: {
      apiVersion: {
        description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
        type: ['string', 'null'],
        enum: ['v1'],
      },
      kind: {
        description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
        type: ['string', 'null'],
        enum: ['ResourceQuota'],
      },
      metadata: {
        description: 'ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.',
        properties: {
          annotations: {
            description: 'Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations',
            type: 'object',
            additionalProperties: {
              type: ['string', 'null'],
            },
          },
          clusterName: {
            description: 'The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.',
            type: ['string', 'null'],
          },
          creationTimestamp: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            type: ['string', 'null'],
            format: 'date-time',
          },
          deletionGracePeriodSeconds: {
            description: 'Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.',
            type: 'integer',
            format: 'int64',
          },
          deletionTimestamp: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            type: ['string', 'null'],
            format: 'date-time',
          },
          finalizers: {
            description: 'Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.',
            type: ['array', 'null'],
            items: {
              type: ['string', 'null'],
            },
            'x-kubernetes-patch-strategy': 'merge',
          },
          generateName: {
            description:
              'GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency',
            type: ['string', 'null'],
          },
          generation: {
            description: 'A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.',
            type: 'integer',
            format: 'int64',
          },
          initializers: {
            description: 'Initializers tracks the progress of initialization.',
            required: ['pending'],
            properties: {
              pending: {
                description: 'Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.',
                type: 'array',
                items: {
                  description: 'Initializer is information about an initializer that has not yet completed.',
                  required: ['name'],
                  properties: {
                    name: {
                      description: 'name of the process that is responsible for initializing this object.',
                      type: 'string',
                    },
                  },
                  additionalProperties: false,
                },
                'x-kubernetes-patch-merge-key': 'name',
                'x-kubernetes-patch-strategy': 'merge',
              },
              result: {
                description: "Status is a return value for calls that don't return other objects.",
                properties: {
                  apiVersion: {
                    description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
                    type: ['string', 'null'],
                    enum: ['v1'],
                  },
                  code: {
                    description: 'Suggested HTTP return code for this status, 0 if not set.',
                    type: 'integer',
                    format: 'int32',
                  },
                  details: {
                    description: 'StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.',
                    properties: {
                      causes: {
                        description: 'The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.',
                        type: ['array', 'null'],
                        items: {
                          description: 'StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.',
                          properties: {
                            field: {
                              description: 'The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  "name" - the field "name" on the current resource\n  "items[0].name" - the field "name" on the first array entry in "items"',
                              type: ['string', 'null'],
                            },
                            message: {
                              description: 'A human-readable description of the cause of the error.  This field may be presented as-is to a reader.',
                              type: ['string', 'null'],
                            },
                            reason: {
                              description: 'A machine-readable description of the cause of the error. If this value is empty there is no information available.',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                      },
                      group: {
                        description: 'The group attribute of the resource associated with the status StatusReason.',
                        type: ['string', 'null'],
                      },
                      kind: {
                        description: 'The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                        type: ['string', 'null'],
                      },
                      name: {
                        description: 'The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).',
                        type: ['string', 'null'],
                      },
                      retryAfterSeconds: {
                        description: 'If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.',
                        type: 'integer',
                        format: 'int32',
                      },
                      uid: {
                        description: 'UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                        type: ['string', 'null'],
                      },
                    },
                    additionalProperties: false,
                  },
                  kind: {
                    description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                    type: ['string', 'null'],
                    enum: ['Status'],
                  },
                  message: {
                    description: 'A human-readable description of the status of this operation.',
                    type: ['string', 'null'],
                  },
                  metadata: {
                    description: 'ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.',
                    properties: {
                      continue: {
                        description:
                          'continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response.',
                        type: ['string', 'null'],
                      },
                      resourceVersion: {
                        description: "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
                        type: ['string', 'null'],
                      },
                      selfLink: {
                        description: 'selfLink is a URL representing this object. Populated by the system. Read-only.',
                        type: ['string', 'null'],
                      },
                    },
                    additionalProperties: false,
                  },
                  reason: {
                    description: 'A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.',
                    type: ['string', 'null'],
                  },
                  status: {
                    description: 'Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status',
                    type: ['string', 'null'],
                  },
                },
                'x-kubernetes-group-version-kind': [
                  {
                    group: '',
                    kind: 'Status',
                    version: 'v1',
                  },
                ],
                additionalProperties: false,
              },
            },
            additionalProperties: false,
          },
          labels: {
            description: 'Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels',
            type: 'object',
            additionalProperties: {
              type: ['string', 'null'],
            },
          },
          name: {
            description: 'Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
            type: ['string', 'null'],
          },
          namespace: {
            description: 'Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces',
            type: ['string', 'null'],
          },
          ownerReferences: {
            description: 'List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.',
            type: ['array', 'null'],
            items: {
              description: 'OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.',
              required: ['apiVersion', 'kind', 'name', 'uid'],
              properties: {
                apiVersion: {
                  description: 'API version of the referent.',
                  type: 'string',
                },
                blockOwnerDeletion: {
                  description: 'If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.',
                  type: 'boolean',
                },
                controller: {
                  description: 'If true, this reference points to the managing controller.',
                  type: 'boolean',
                },
                kind: {
                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                  type: 'string',
                },
                name: {
                  description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
                  type: 'string',
                },
                uid: {
                  description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                  type: 'string',
                },
              },
              additionalProperties: false,
            },
            'x-kubernetes-patch-merge-key': 'uid',
            'x-kubernetes-patch-strategy': 'merge',
          },
          resourceVersion: {
            description:
              'An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency',
            type: ['string', 'null'],
          },
          selfLink: {
            description: 'SelfLink is a URL representing this object. Populated by the system. Read-only.',
            type: ['string', 'null'],
          },
          uid: {
            description: 'UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
            type: ['string', 'null'],
          },
        },
        additionalProperties: false,
      },
      spec: {
        description: 'ResourceQuotaSpec defines the desired hard limits to enforce for Quota.',
        properties: {
          hard: {
            description: 'hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/',
            type: 'object',
            additionalProperties: {
              oneOf: [
                {
                  type: ['string', 'null'],
                },
                {
                  type: 'integer',
                },
              ],
            },
          },
          scopeSelector: {
            description: 'A scope selector represents the AND of the selectors represented by the scoped-resource selector requirements.',
            properties: {
              matchExpressions: {
                description: 'A list of scope selector requirements by scope of the resources.',
                type: ['array', 'null'],
                items: {
                  description: 'A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.',
                  required: ['scopeName', 'operator'],
                  properties: {
                    operator: {
                      description: "Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.",
                      type: 'string',
                    },
                    scopeName: {
                      description: 'The name of the scope that the selector applies to.',
                      type: 'string',
                    },
                    values: {
                      description: 'An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
                      type: ['array', 'null'],
                      items: {
                        type: ['string', 'null'],
                      },
                    },
                  },
                  additionalProperties: false,
                },
              },
            },
            additionalProperties: false,
          },
          scopes: {
            description: 'A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.',
            type: ['array', 'null'],
            items: {
              type: ['string', 'null'],
            },
          },
        },
        additionalProperties: false,
      },
      status: {
        description: 'ResourceQuotaStatus defines the enforced hard limits and observed use.',
        properties: {
          hard: {
            description: 'Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/',
            type: 'object',
            additionalProperties: {
              oneOf: [
                {
                  type: ['string', 'null'],
                },
                {
                  type: 'integer',
                },
              ],
            },
          },
          used: {
            description: 'Used is the current observed total usage of the resource in the namespace.',
            type: 'object',
            additionalProperties: {
              oneOf: [
                {
                  type: ['string', 'null'],
                },
                {
                  type: 'integer',
                },
              ],
            },
          },
        },
        additionalProperties: false,
      },
    },
    'x-kubernetes-group-version-kind': [
      {
        group: '',
        kind: 'ResourceQuota',
        version: 'v1',
      },
    ],
    additionalProperties: false,
    $schema: 'http://json-schema.org/schema#',
    type: 'object',
  })
  .setIn([referenceForModel(k8sModels.NodeModel), 'default'], {
    description: 'Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).',
    properties: {
      apiVersion: {
        description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
        type: ['string', 'null'],
        enum: ['v1'],
      },
      kind: {
        description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
        type: ['string', 'null'],
        enum: ['Node'],
      },
      metadata: {
        description: 'ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.',
        properties: {
          annotations: {
            description: 'Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations',
            type: 'object',
            additionalProperties: {
              type: ['string', 'null'],
            },
          },
          clusterName: {
            description: 'The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.',
            type: ['string', 'null'],
          },
          creationTimestamp: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            type: ['string', 'null'],
            format: 'date-time',
          },
          deletionGracePeriodSeconds: {
            description: 'Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.',
            type: 'integer',
            format: 'int64',
          },
          deletionTimestamp: {
            description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            type: ['string', 'null'],
            format: 'date-time',
          },
          finalizers: {
            description: 'Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.',
            type: ['array', 'null'],
            items: {
              type: ['string', 'null'],
            },
            'x-kubernetes-patch-strategy': 'merge',
          },
          generateName: {
            description:
              'GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency',
            type: ['string', 'null'],
          },
          generation: {
            description: 'A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.',
            type: 'integer',
            format: 'int64',
          },
          initializers: {
            description: 'Initializers tracks the progress of initialization.',
            required: ['pending'],
            properties: {
              pending: {
                description: 'Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.',
                type: 'array',
                items: {
                  description: 'Initializer is information about an initializer that has not yet completed.',
                  required: ['name'],
                  properties: {
                    name: {
                      description: 'name of the process that is responsible for initializing this object.',
                      type: 'string',
                    },
                  },
                  additionalProperties: false,
                },
                'x-kubernetes-patch-merge-key': 'name',
                'x-kubernetes-patch-strategy': 'merge',
              },
              result: {
                description: "Status is a return value for calls that don't return other objects.",
                properties: {
                  apiVersion: {
                    description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
                    type: ['string', 'null'],
                    enum: ['v1'],
                  },
                  code: {
                    description: 'Suggested HTTP return code for this status, 0 if not set.',
                    type: 'integer',
                    format: 'int32',
                  },
                  details: {
                    description: 'StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.',
                    properties: {
                      causes: {
                        description: 'The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.',
                        type: ['array', 'null'],
                        items: {
                          description: 'StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.',
                          properties: {
                            field: {
                              description: 'The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  "name" - the field "name" on the current resource\n  "items[0].name" - the field "name" on the first array entry in "items"',
                              type: ['string', 'null'],
                            },
                            message: {
                              description: 'A human-readable description of the cause of the error.  This field may be presented as-is to a reader.',
                              type: ['string', 'null'],
                            },
                            reason: {
                              description: 'A machine-readable description of the cause of the error. If this value is empty there is no information available.',
                              type: ['string', 'null'],
                            },
                          },
                          additionalProperties: false,
                        },
                      },
                      group: {
                        description: 'The group attribute of the resource associated with the status StatusReason.',
                        type: ['string', 'null'],
                      },
                      kind: {
                        description: 'The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                        type: ['string', 'null'],
                      },
                      name: {
                        description: 'The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).',
                        type: ['string', 'null'],
                      },
                      retryAfterSeconds: {
                        description: 'If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.',
                        type: 'integer',
                        format: 'int32',
                      },
                      uid: {
                        description: 'UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                        type: ['string', 'null'],
                      },
                    },
                    additionalProperties: false,
                  },
                  kind: {
                    description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                    type: ['string', 'null'],
                    enum: ['Status'],
                  },
                  message: {
                    description: 'A human-readable description of the status of this operation.',
                    type: ['string', 'null'],
                  },
                  metadata: {
                    description: 'ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.',
                    properties: {
                      continue: {
                        description:
                          'continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response.',
                        type: ['string', 'null'],
                      },
                      resourceVersion: {
                        description: "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
                        type: ['string', 'null'],
                      },
                      selfLink: {
                        description: 'selfLink is a URL representing this object. Populated by the system. Read-only.',
                        type: ['string', 'null'],
                      },
                    },
                    additionalProperties: false,
                  },
                  reason: {
                    description: 'A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.',
                    type: ['string', 'null'],
                  },
                  status: {
                    description: 'Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status',
                    type: ['string', 'null'],
                  },
                },
                'x-kubernetes-group-version-kind': [
                  {
                    group: '',
                    kind: 'Status',
                    version: 'v1',
                  },
                ],
                additionalProperties: false,
              },
            },
            additionalProperties: false,
          },
          labels: {
            description: 'Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels',
            type: 'object',
            additionalProperties: {
              type: ['string', 'null'],
            },
          },
          name: {
            description: 'Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
            type: ['string', 'null'],
          },
          namespace: {
            description: 'Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces',
            type: ['string', 'null'],
          },
          ownerReferences: {
            description: 'List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.',
            type: ['array', 'null'],
            items: {
              description: 'OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.',
              required: ['apiVersion', 'kind', 'name', 'uid'],
              properties: {
                apiVersion: {
                  description: 'API version of the referent.',
                  type: 'string',
                },
                blockOwnerDeletion: {
                  description: 'If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.',
                  type: 'boolean',
                },
                controller: {
                  description: 'If true, this reference points to the managing controller.',
                  type: 'boolean',
                },
                kind: {
                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
                  type: 'string',
                },
                name: {
                  description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
                  type: 'string',
                },
                uid: {
                  description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                  type: 'string',
                },
              },
              additionalProperties: false,
            },
            'x-kubernetes-patch-merge-key': 'uid',
            'x-kubernetes-patch-strategy': 'merge',
          },
          resourceVersion: {
            description:
              'An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency',
            type: ['string', 'null'],
          },
          selfLink: {
            description: 'SelfLink is a URL representing this object. Populated by the system. Read-only.',
            type: ['string', 'null'],
          },
          uid: {
            description: 'UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
            type: ['string', 'null'],
          },
        },
        additionalProperties: false,
      },
      spec: {
        description: 'NodeSpec describes the attributes that a node is created with.',
        properties: {
          configSource: {
            description: 'NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil.',
            properties: {
              configMap: {
                description: 'ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node.',
                required: ['namespace', 'name', 'kubeletConfigKey'],
                properties: {
                  kubeletConfigKey: {
                    description: 'KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.',
                    type: 'string',
                  },
                  name: {
                    description: 'Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.',
                    type: 'string',
                  },
                  namespace: {
                    description: 'Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.',
                    type: 'string',
                  },
                  resourceVersion: {
                    description: 'ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.',
                    type: ['string', 'null'],
                  },
                  uid: {
                    description: 'UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.',
                    type: ['string', 'null'],
                  },
                },
                additionalProperties: false,
              },
            },
            additionalProperties: false,
          },
          externalID: {
            description: 'Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966',
            type: ['string', 'null'],
          },
          podCIDR: {
            description: 'PodCIDR represents the pod IP range assigned to the node.',
            type: ['string', 'null'],
          },
          providerID: {
            description: 'ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>',
            type: ['string', 'null'],
          },
          taints: {
            description: "If specified, the node's taints.",
            type: ['array', 'null'],
            items: {
              description: 'The node this Taint is attached to has the "effect" on any pod that does not tolerate the Taint.',
              required: ['key', 'effect'],
              properties: {
                effect: {
                  description: 'Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.',
                  type: 'string',
                },
                key: {
                  description: 'Required. The taint key to be applied to a node.',
                  type: 'string',
                },
                timeAdded: {
                  description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                  type: ['string', 'null'],
                  format: 'date-time',
                },
                value: {
                  description: 'Required. The taint value corresponding to the taint key.',
                  type: ['string', 'null'],
                },
              },
              additionalProperties: false,
            },
          },
          unschedulable: {
            description: 'Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration',
            type: 'boolean',
          },
        },
        additionalProperties: false,
      },
      status: {
        description: 'NodeStatus is information about the current status of a node.',
        properties: {
          addresses: {
            description: 'List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses',
            type: ['array', 'null'],
            items: {
              description: "NodeAddress contains information for the node's address.",
              required: ['type', 'address'],
              properties: {
                address: {
                  description: 'The node address.',
                  type: 'string',
                },
                type: {
                  description: 'Node address type, one of Hostname, ExternalIP or InternalIP.',
                  type: 'string',
                },
              },
              additionalProperties: false,
            },
            'x-kubernetes-patch-merge-key': 'type',
            'x-kubernetes-patch-strategy': 'merge',
          },
          allocatable: {
            description: 'Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.',
            type: 'object',
            additionalProperties: {
              oneOf: [
                {
                  type: ['string', 'null'],
                },
                {
                  type: 'integer',
                },
              ],
            },
          },
          capacity: {
            description: 'Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity',
            type: 'object',
            additionalProperties: {
              oneOf: [
                {
                  type: ['string', 'null'],
                },
                {
                  type: 'integer',
                },
              ],
            },
          },
          conditions: {
            description: 'Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition',
            type: ['array', 'null'],
            items: {
              description: 'NodeCondition contains condition information for a node.',
              required: ['type', 'status'],
              properties: {
                lastHeartbeatTime: {
                  description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                  type: ['string', 'null'],
                  format: 'date-time',
                },
                lastTransitionTime: {
                  description: 'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                  type: ['string', 'null'],
                  format: 'date-time',
                },
                message: {
                  description: 'Human readable message indicating details about last transition.',
                  type: ['string', 'null'],
                },
                reason: {
                  description: "(brief) reason for the condition's last transition.",
                  type: ['string', 'null'],
                },
                status: {
                  description: 'Status of the condition, one of True, False, Unknown.',
                  type: 'string',
                },
                type: {
                  description: 'Type of node condition.',
                  type: 'string',
                },
              },
              additionalProperties: false,
            },
            'x-kubernetes-patch-merge-key': 'type',
            'x-kubernetes-patch-strategy': 'merge',
          },
          config: {
            description: 'NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource.',
            properties: {
              active: {
                description: 'NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil.',
                properties: {
                  configMap: {
                    description: 'ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node.',
                    required: ['namespace', 'name', 'kubeletConfigKey'],
                    properties: {
                      kubeletConfigKey: {
                        description: 'KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.',
                        type: 'string',
                      },
                      name: {
                        description: 'Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.',
                        type: 'string',
                      },
                      namespace: {
                        description: 'Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.',
                        type: 'string',
                      },
                      resourceVersion: {
                        description: 'ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.',
                        type: ['string', 'null'],
                      },
                      uid: {
                        description: 'UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.',
                        type: ['string', 'null'],
                      },
                    },
                    additionalProperties: false,
                  },
                },
                additionalProperties: false,
              },
              assigned: {
                description: 'NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil.',
                properties: {
                  configMap: {
                    description: 'ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node.',
                    required: ['namespace', 'name', 'kubeletConfigKey'],
                    properties: {
                      kubeletConfigKey: {
                        description: 'KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.',
                        type: 'string',
                      },
                      name: {
                        description: 'Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.',
                        type: 'string',
                      },
                      namespace: {
                        description: 'Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.',
                        type: 'string',
                      },
                      resourceVersion: {
                        description: 'ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.',
                        type: ['string', 'null'],
                      },
                      uid: {
                        description: 'UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.',
                        type: ['string', 'null'],
                      },
                    },
                    additionalProperties: false,
                  },
                },
                additionalProperties: false,
              },
              error: {
                description:
                  'Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions.',
                type: ['string', 'null'],
              },
              lastKnownGood: {
                description: 'NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil.',
                properties: {
                  configMap: {
                    description: 'ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node.',
                    required: ['namespace', 'name', 'kubeletConfigKey'],
                    properties: {
                      kubeletConfigKey: {
                        description: 'KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.',
                        type: 'string',
                      },
                      name: {
                        description: 'Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.',
                        type: 'string',
                      },
                      namespace: {
                        description: 'Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.',
                        type: 'string',
                      },
                      resourceVersion: {
                        description: 'ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.',
                        type: ['string', 'null'],
                      },
                      uid: {
                        description: 'UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.',
                        type: ['string', 'null'],
                      },
                    },
                    additionalProperties: false,
                  },
                },
                additionalProperties: false,
              },
            },
            additionalProperties: false,
          },
          daemonEndpoints: {
            description: 'NodeDaemonEndpoints lists ports opened by daemons running on the Node.',
            properties: {
              kubeletEndpoint: {
                description: 'DaemonEndpoint contains information about a single Daemon endpoint.',
                required: ['Port'],
                properties: {
                  Port: {
                    description: 'Port number of the given endpoint.',
                    type: 'integer',
                    format: 'int32',
                  },
                },
                additionalProperties: false,
              },
            },
            additionalProperties: false,
          },
          images: {
            description: 'List of container images on this node',
            type: ['array', 'null'],
            items: {
              description: 'Describe a container image',
              required: ['names'],
              properties: {
                names: {
                  description: 'Names by which this image is known. e.g. ["k8s.gcr.io/hyperkube:v1.0.7", "dockerhub.io/google_containers/hyperkube:v1.0.7"]',
                  type: 'array',
                  items: {
                    type: ['string', 'null'],
                  },
                },
                sizeBytes: {
                  description: 'The size of the image in bytes.',
                  type: 'integer',
                  format: 'int64',
                },
              },
              additionalProperties: false,
            },
          },
          nodeInfo: {
            description: 'NodeSystemInfo is a set of ids/uuids to uniquely identify the node.',
            required: ['machineID', 'systemUUID', 'bootID', 'kernelVersion', 'osImage', 'containerRuntimeVersion', 'kubeletVersion', 'kubeProxyVersion', 'operatingSystem', 'architecture'],
            properties: {
              architecture: {
                description: 'The Architecture reported by the node',
                type: 'string',
              },
              bootID: {
                description: 'Boot ID reported by the node.',
                type: 'string',
              },
              containerRuntimeVersion: {
                description: 'ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0).',
                type: 'string',
              },
              kernelVersion: {
                description: "Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).",
                type: 'string',
              },
              kubeProxyVersion: {
                description: 'KubeProxy Version reported by the node.',
                type: 'string',
              },
              kubeletVersion: {
                description: 'Kubelet Version reported by the node.',
                type: 'string',
              },
              machineID: {
                description: 'MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html',
                type: 'string',
              },
              operatingSystem: {
                description: 'The Operating System reported by the node',
                type: 'string',
              },
              osImage: {
                description: 'OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).',
                type: 'string',
              },
              systemUUID: {
                description: 'SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-US/Red_Hat_Subscription_Management/1/html/RHSM/getting-system-uuid.html',
                type: 'string',
              },
            },
            additionalProperties: false,
          },
          phase: {
            description: 'NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.',
            type: ['string', 'null'],
          },
          volumesAttached: {
            description: 'List of volumes that are attached to the node.',
            type: ['array', 'null'],
            items: {
              description: 'AttachedVolume describes a volume attached to a node',
              required: ['name', 'devicePath'],
              properties: {
                devicePath: {
                  description: 'DevicePath represents the device path where the volume should be available',
                  type: 'string',
                },
                name: {
                  description: 'Name of the attached volume',
                  type: 'string',
                },
              },
              additionalProperties: false,
            },
          },
          volumesInUse: {
            description: 'List of attachable volumes in use (mounted) by the node.',
            type: ['array', 'null'],
            items: {
              type: ['string', 'null'],
            },
          },
        },
        additionalProperties: false,
      },
    },
    'x-kubernetes-group-version-kind': [
      {
        group: '',
        kind: 'Node',
        version: 'v1',
      },
    ],
    additionalProperties: false,
    $schema: 'http://json-schema.org/schema#',
    type: 'object',
  })
  .setIn([referenceForModel(k8sModels.StorageClassModel), 'default'], {
    description:
      'StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.\n\nStorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.',
    properties: {
      allowVolumeExpansion: {
        description:
          'AllowVolumeExpansion shows whether the storage class allow volume expand',
        type: ['boolean', 'null'],
      },
      allowedTopologies: {
        description:
          'Restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty TopologySelectorTerm list means there is no topology restriction. This field is only honored by servers that enable the VolumeScheduling feature.',
        items: {
          description:
            'A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.',
          properties: {
            matchLabelExpressions: {
              description: 'A list of topology selector requirements by labels.',
              items: {
                description:
                  'A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.',
                properties: {
                  key: {
                    description: 'The label key that the selector applies to.',
                    type: 'string',
                  },
                  values: {
                    description:
                      'An array of string values. One value must match the label to be selected. Each entry in Values is ORed.',
                    items: {
                      type: ['string', 'null'],
                    },
                    type: 'array',
                  },
                },
                required: ['key', 'values'],
                type: ['object', 'null'],
              },
              type: ['array', 'null'],
            },
          },
          type: ['object', 'null'],
        },
        type: ['array', 'null'],
      },
      apiVersion: {
        description:
          'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
        type: ['string', 'null'],
      },
      kind: {
        description:
          'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
        type: ['string', 'null'],
        enum: ['StorageClass'],
      },
      metadata: {
        description:
          'ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.',
        properties: {
          annotations: {
            additionalProperties: {
              type: ['string', 'null'],
            },
            description:
              'Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations',
            type: ['object', 'null'],
          },
          clusterName: {
            description:
              'The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.',
            type: ['string', 'null'],
          },
          creationTimestamp: {
            description:
              'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            format: 'date-time',
            type: ['string', 'null'],
          },
          deletionGracePeriodSeconds: {
            description:
              'Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.',
            format: 'int64',
            type: ['integer', 'null'],
          },
          deletionTimestamp: {
            description:
              'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
            format: 'date-time',
            type: ['string', 'null'],
          },
          finalizers: {
            description:
              'Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.',
            items: {
              type: ['string', 'null'],
            },
            type: ['array', 'null'],
            'x-kubernetes-patch-strategy': 'merge',
          },
          generateName: {
            description:
              'GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency',
            type: ['string', 'null'],
          },
          generation: {
            description:
              'A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.',
            format: 'int64',
            type: ['integer', 'null'],
          },
          labels: {
            additionalProperties: {
              type: ['string', 'null'],
            },
            description:
              'Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels',
            type: ['object', 'null'],
          },
          managedFields: {
            description:
              "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
            items: {
              description:
                'ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.',
              properties: {
                apiVersion: {
                  description:
                    'APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.',
                  type: ['string', 'null'],
                },
                fieldsType: {
                  description:
                    'FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"',
                  type: ['string', 'null'],
                },
                fieldsV1: {
                  description:
                    "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
                  type: ['object', 'null'],
                },
                manager: {
                  description:
                    'Manager is an identifier of the workflow managing these fields.',
                  type: ['string', 'null'],
                },
                operation: {
                  description:
                    "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
                  type: ['string', 'null'],
                },
                time: {
                  description:
                    'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
                  format: 'date-time',
                  type: ['string', 'null'],
                },
              },
              type: ['object', 'null'],
            },
            type: ['array', 'null'],
          },
          name: {
            description:
              'Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
            type: ['string', 'null'],
          },
          namespace: {
            description:
              'Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces',
            type: ['string', 'null'],
          },
          ownerReferences: {
            description:
              'List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.',
            items: {
              description:
                'OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.',
              properties: {
                apiVersion: {
                  description: 'API version of the referent.',
                  type: 'string',
                },
                blockOwnerDeletion: {
                  description:
                    'If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.',
                  type: ['boolean', 'null'],
                },
                controller: {
                  description:
                    'If true, this reference points to the managing controller.',
                  type: ['boolean', 'null'],
                },
                kind: {
                  description:
                    'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
                  type: 'string',
                },
                name: {
                  description:
                    'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
                  type: 'string',
                },
                uid: {
                  description:
                    'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
                  type: 'string',
                },
              },
              required: ['apiVersion', 'kind', 'name', 'uid'],
              type: ['object', 'null'],
            },
            type: ['array', 'null'],
            'x-kubernetes-patch-merge-key': 'uid',
            'x-kubernetes-patch-strategy': 'merge',
          },
          resourceVersion: {
            description:
              'An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency',
            type: ['string', 'null'],
          },
          selfLink: {
            description:
              'SelfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.',
            type: ['string', 'null'],
          },
          uid: {
            description:
              'UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids',
            type: ['string', 'null'],
          },
        },
        type: ['object', 'null'],
      },
      mountOptions: {
        description:
          'Dynamically provisioned PersistentVolumes of this storage class are created with these mountOptions, e.g. ["ro", "soft"]. Not validated - mount of the PVs will simply fail if one is invalid.',
        items: {
          type: ['string', 'null'],
        },
        type: ['array', 'null'],
      },
      parameters: {
        additionalProperties: {
          type: ['string', 'null'],
        },
        description:
          'Parameters holds the parameters for the provisioner that should create volumes of this storage class.',
        type: ['object', 'null'],
      },
      provisioner: {
        description: 'Provisioner indicates the type of the provisioner.',
        type: ['string', 'null'],
      },
      reclaimPolicy: {
        description:
          'Dynamically provisioned PersistentVolumes of this storage class are created with this reclaimPolicy. Defaults to Delete.',
        type: ['string', 'null'],
      },
      volumeBindingMode: {
        description:
          'VolumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the VolumeScheduling feature.',
        type: ['string', 'null'],
      },
    },
    required: ['provisioner'],
    type: 'object',
    'x-kubernetes-group-version-kind': [
      {
        group: 'storage.k8s.io',
        kind: 'StorageClass',
        version: 'v1beta1',
      },
    ],
    $schema: 'http://json-schema.org/schema#',
  });

export const schemaTemplates = baseTemplates;
